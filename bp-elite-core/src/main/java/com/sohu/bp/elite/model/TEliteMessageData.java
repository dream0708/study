/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sohu.bp.elite.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TEliteMessageData implements org.apache.thrift.TBase<TEliteMessageData, TEliteMessageData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEliteMessageData");

  private static final org.apache.thrift.protocol.TField INBOX_MESSAGE_DATA_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("inboxMessageDataValue", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField INBOX_MESSAGE_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("inboxMessageContent", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SEND_CLOUD_TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("sendCloudTemplate", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SEND_CLOUD_VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("sendCloudVariables", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField WECHAT_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wechatTemplateId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField WECHAT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("wechatData", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField WECHAT_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("wechatUrl", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TEliteMessageDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TEliteMessageDataTupleSchemeFactory());
  }

  public int inboxMessageDataValue; // required
  public String inboxMessageContent; // required
  public int sendCloudTemplate; // required
  public Map<String,String> sendCloudVariables; // required
  public int wechatTemplateId; // required
  public String wechatData; // required
  public String wechatUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INBOX_MESSAGE_DATA_VALUE((short)1, "inboxMessageDataValue"),
    INBOX_MESSAGE_CONTENT((short)3, "inboxMessageContent"),
    SEND_CLOUD_TEMPLATE((short)4, "sendCloudTemplate"),
    SEND_CLOUD_VARIABLES((short)5, "sendCloudVariables"),
    WECHAT_TEMPLATE_ID((short)6, "wechatTemplateId"),
    WECHAT_DATA((short)7, "wechatData"),
    WECHAT_URL((short)8, "wechatUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INBOX_MESSAGE_DATA_VALUE
          return INBOX_MESSAGE_DATA_VALUE;
        case 3: // INBOX_MESSAGE_CONTENT
          return INBOX_MESSAGE_CONTENT;
        case 4: // SEND_CLOUD_TEMPLATE
          return SEND_CLOUD_TEMPLATE;
        case 5: // SEND_CLOUD_VARIABLES
          return SEND_CLOUD_VARIABLES;
        case 6: // WECHAT_TEMPLATE_ID
          return WECHAT_TEMPLATE_ID;
        case 7: // WECHAT_DATA
          return WECHAT_DATA;
        case 8: // WECHAT_URL
          return WECHAT_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INBOXMESSAGEDATAVALUE_ISSET_ID = 0;
  private static final int __SENDCLOUDTEMPLATE_ISSET_ID = 1;
  private static final int __WECHATTEMPLATEID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INBOX_MESSAGE_DATA_VALUE, new org.apache.thrift.meta_data.FieldMetaData("inboxMessageDataValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INBOX_MESSAGE_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("inboxMessageContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEND_CLOUD_TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("sendCloudTemplate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEND_CLOUD_VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("sendCloudVariables", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.WECHAT_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("wechatTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WECHAT_DATA, new org.apache.thrift.meta_data.FieldMetaData("wechatData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WECHAT_URL, new org.apache.thrift.meta_data.FieldMetaData("wechatUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEliteMessageData.class, metaDataMap);
  }

  public TEliteMessageData() {
    this.inboxMessageDataValue = 0;

    this.inboxMessageContent = "";

    this.sendCloudTemplate = 0;

    this.wechatTemplateId = 5;

    this.wechatData = "";

    this.wechatUrl = "";

  }

  public TEliteMessageData(
    int inboxMessageDataValue,
    String inboxMessageContent,
    int sendCloudTemplate,
    Map<String,String> sendCloudVariables,
    int wechatTemplateId,
    String wechatData,
    String wechatUrl)
  {
    this();
    this.inboxMessageDataValue = inboxMessageDataValue;
    setInboxMessageDataValueIsSet(true);
    this.inboxMessageContent = inboxMessageContent;
    this.sendCloudTemplate = sendCloudTemplate;
    setSendCloudTemplateIsSet(true);
    this.sendCloudVariables = sendCloudVariables;
    this.wechatTemplateId = wechatTemplateId;
    setWechatTemplateIdIsSet(true);
    this.wechatData = wechatData;
    this.wechatUrl = wechatUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEliteMessageData(TEliteMessageData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.inboxMessageDataValue = other.inboxMessageDataValue;
    if (other.isSetInboxMessageContent()) {
      this.inboxMessageContent = other.inboxMessageContent;
    }
    this.sendCloudTemplate = other.sendCloudTemplate;
    if (other.isSetSendCloudVariables()) {
      Map<String,String> __this__sendCloudVariables = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.sendCloudVariables.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__sendCloudVariables_copy_key = other_element_key;

        String __this__sendCloudVariables_copy_value = other_element_value;

        __this__sendCloudVariables.put(__this__sendCloudVariables_copy_key, __this__sendCloudVariables_copy_value);
      }
      this.sendCloudVariables = __this__sendCloudVariables;
    }
    this.wechatTemplateId = other.wechatTemplateId;
    if (other.isSetWechatData()) {
      this.wechatData = other.wechatData;
    }
    if (other.isSetWechatUrl()) {
      this.wechatUrl = other.wechatUrl;
    }
  }

  public TEliteMessageData deepCopy() {
    return new TEliteMessageData(this);
  }

  @Override
  public void clear() {
    this.inboxMessageDataValue = 0;

    this.inboxMessageContent = "";

    this.sendCloudTemplate = 0;

    this.sendCloudVariables = null;
    this.wechatTemplateId = 5;

    this.wechatData = "";

    this.wechatUrl = "";

  }

  public int getInboxMessageDataValue() {
    return this.inboxMessageDataValue;
  }

  public TEliteMessageData setInboxMessageDataValue(int inboxMessageDataValue) {
    this.inboxMessageDataValue = inboxMessageDataValue;
    setInboxMessageDataValueIsSet(true);
    return this;
  }

  public void unsetInboxMessageDataValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INBOXMESSAGEDATAVALUE_ISSET_ID);
  }

  /** Returns true if field inboxMessageDataValue is set (has been assigned a value) and false otherwise */
  public boolean isSetInboxMessageDataValue() {
    return EncodingUtils.testBit(__isset_bitfield, __INBOXMESSAGEDATAVALUE_ISSET_ID);
  }

  public void setInboxMessageDataValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INBOXMESSAGEDATAVALUE_ISSET_ID, value);
  }

  public String getInboxMessageContent() {
    return this.inboxMessageContent;
  }

  public TEliteMessageData setInboxMessageContent(String inboxMessageContent) {
    this.inboxMessageContent = inboxMessageContent;
    return this;
  }

  public void unsetInboxMessageContent() {
    this.inboxMessageContent = null;
  }

  /** Returns true if field inboxMessageContent is set (has been assigned a value) and false otherwise */
  public boolean isSetInboxMessageContent() {
    return this.inboxMessageContent != null;
  }

  public void setInboxMessageContentIsSet(boolean value) {
    if (!value) {
      this.inboxMessageContent = null;
    }
  }

  public int getSendCloudTemplate() {
    return this.sendCloudTemplate;
  }

  public TEliteMessageData setSendCloudTemplate(int sendCloudTemplate) {
    this.sendCloudTemplate = sendCloudTemplate;
    setSendCloudTemplateIsSet(true);
    return this;
  }

  public void unsetSendCloudTemplate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDCLOUDTEMPLATE_ISSET_ID);
  }

  /** Returns true if field sendCloudTemplate is set (has been assigned a value) and false otherwise */
  public boolean isSetSendCloudTemplate() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDCLOUDTEMPLATE_ISSET_ID);
  }

  public void setSendCloudTemplateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDCLOUDTEMPLATE_ISSET_ID, value);
  }

  public int getSendCloudVariablesSize() {
    return (this.sendCloudVariables == null) ? 0 : this.sendCloudVariables.size();
  }

  public void putToSendCloudVariables(String key, String val) {
    if (this.sendCloudVariables == null) {
      this.sendCloudVariables = new HashMap<String,String>();
    }
    this.sendCloudVariables.put(key, val);
  }

  public Map<String,String> getSendCloudVariables() {
    return this.sendCloudVariables;
  }

  public TEliteMessageData setSendCloudVariables(Map<String,String> sendCloudVariables) {
    this.sendCloudVariables = sendCloudVariables;
    return this;
  }

  public void unsetSendCloudVariables() {
    this.sendCloudVariables = null;
  }

  /** Returns true if field sendCloudVariables is set (has been assigned a value) and false otherwise */
  public boolean isSetSendCloudVariables() {
    return this.sendCloudVariables != null;
  }

  public void setSendCloudVariablesIsSet(boolean value) {
    if (!value) {
      this.sendCloudVariables = null;
    }
  }

  public int getWechatTemplateId() {
    return this.wechatTemplateId;
  }

  public TEliteMessageData setWechatTemplateId(int wechatTemplateId) {
    this.wechatTemplateId = wechatTemplateId;
    setWechatTemplateIdIsSet(true);
    return this;
  }

  public void unsetWechatTemplateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WECHATTEMPLATEID_ISSET_ID);
  }

  /** Returns true if field wechatTemplateId is set (has been assigned a value) and false otherwise */
  public boolean isSetWechatTemplateId() {
    return EncodingUtils.testBit(__isset_bitfield, __WECHATTEMPLATEID_ISSET_ID);
  }

  public void setWechatTemplateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WECHATTEMPLATEID_ISSET_ID, value);
  }

  public String getWechatData() {
    return this.wechatData;
  }

  public TEliteMessageData setWechatData(String wechatData) {
    this.wechatData = wechatData;
    return this;
  }

  public void unsetWechatData() {
    this.wechatData = null;
  }

  /** Returns true if field wechatData is set (has been assigned a value) and false otherwise */
  public boolean isSetWechatData() {
    return this.wechatData != null;
  }

  public void setWechatDataIsSet(boolean value) {
    if (!value) {
      this.wechatData = null;
    }
  }

  public String getWechatUrl() {
    return this.wechatUrl;
  }

  public TEliteMessageData setWechatUrl(String wechatUrl) {
    this.wechatUrl = wechatUrl;
    return this;
  }

  public void unsetWechatUrl() {
    this.wechatUrl = null;
  }

  /** Returns true if field wechatUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetWechatUrl() {
    return this.wechatUrl != null;
  }

  public void setWechatUrlIsSet(boolean value) {
    if (!value) {
      this.wechatUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INBOX_MESSAGE_DATA_VALUE:
      if (value == null) {
        unsetInboxMessageDataValue();
      } else {
        setInboxMessageDataValue((Integer)value);
      }
      break;

    case INBOX_MESSAGE_CONTENT:
      if (value == null) {
        unsetInboxMessageContent();
      } else {
        setInboxMessageContent((String)value);
      }
      break;

    case SEND_CLOUD_TEMPLATE:
      if (value == null) {
        unsetSendCloudTemplate();
      } else {
        setSendCloudTemplate((Integer)value);
      }
      break;

    case SEND_CLOUD_VARIABLES:
      if (value == null) {
        unsetSendCloudVariables();
      } else {
        setSendCloudVariables((Map<String,String>)value);
      }
      break;

    case WECHAT_TEMPLATE_ID:
      if (value == null) {
        unsetWechatTemplateId();
      } else {
        setWechatTemplateId((Integer)value);
      }
      break;

    case WECHAT_DATA:
      if (value == null) {
        unsetWechatData();
      } else {
        setWechatData((String)value);
      }
      break;

    case WECHAT_URL:
      if (value == null) {
        unsetWechatUrl();
      } else {
        setWechatUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INBOX_MESSAGE_DATA_VALUE:
      return Integer.valueOf(getInboxMessageDataValue());

    case INBOX_MESSAGE_CONTENT:
      return getInboxMessageContent();

    case SEND_CLOUD_TEMPLATE:
      return Integer.valueOf(getSendCloudTemplate());

    case SEND_CLOUD_VARIABLES:
      return getSendCloudVariables();

    case WECHAT_TEMPLATE_ID:
      return Integer.valueOf(getWechatTemplateId());

    case WECHAT_DATA:
      return getWechatData();

    case WECHAT_URL:
      return getWechatUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INBOX_MESSAGE_DATA_VALUE:
      return isSetInboxMessageDataValue();
    case INBOX_MESSAGE_CONTENT:
      return isSetInboxMessageContent();
    case SEND_CLOUD_TEMPLATE:
      return isSetSendCloudTemplate();
    case SEND_CLOUD_VARIABLES:
      return isSetSendCloudVariables();
    case WECHAT_TEMPLATE_ID:
      return isSetWechatTemplateId();
    case WECHAT_DATA:
      return isSetWechatData();
    case WECHAT_URL:
      return isSetWechatUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TEliteMessageData)
      return this.equals((TEliteMessageData)that);
    return false;
  }

  public boolean equals(TEliteMessageData that) {
    if (that == null)
      return false;

    boolean this_present_inboxMessageDataValue = true;
    boolean that_present_inboxMessageDataValue = true;
    if (this_present_inboxMessageDataValue || that_present_inboxMessageDataValue) {
      if (!(this_present_inboxMessageDataValue && that_present_inboxMessageDataValue))
        return false;
      if (this.inboxMessageDataValue != that.inboxMessageDataValue)
        return false;
    }

    boolean this_present_inboxMessageContent = true && this.isSetInboxMessageContent();
    boolean that_present_inboxMessageContent = true && that.isSetInboxMessageContent();
    if (this_present_inboxMessageContent || that_present_inboxMessageContent) {
      if (!(this_present_inboxMessageContent && that_present_inboxMessageContent))
        return false;
      if (!this.inboxMessageContent.equals(that.inboxMessageContent))
        return false;
    }

    boolean this_present_sendCloudTemplate = true;
    boolean that_present_sendCloudTemplate = true;
    if (this_present_sendCloudTemplate || that_present_sendCloudTemplate) {
      if (!(this_present_sendCloudTemplate && that_present_sendCloudTemplate))
        return false;
      if (this.sendCloudTemplate != that.sendCloudTemplate)
        return false;
    }

    boolean this_present_sendCloudVariables = true && this.isSetSendCloudVariables();
    boolean that_present_sendCloudVariables = true && that.isSetSendCloudVariables();
    if (this_present_sendCloudVariables || that_present_sendCloudVariables) {
      if (!(this_present_sendCloudVariables && that_present_sendCloudVariables))
        return false;
      if (!this.sendCloudVariables.equals(that.sendCloudVariables))
        return false;
    }

    boolean this_present_wechatTemplateId = true;
    boolean that_present_wechatTemplateId = true;
    if (this_present_wechatTemplateId || that_present_wechatTemplateId) {
      if (!(this_present_wechatTemplateId && that_present_wechatTemplateId))
        return false;
      if (this.wechatTemplateId != that.wechatTemplateId)
        return false;
    }

    boolean this_present_wechatData = true && this.isSetWechatData();
    boolean that_present_wechatData = true && that.isSetWechatData();
    if (this_present_wechatData || that_present_wechatData) {
      if (!(this_present_wechatData && that_present_wechatData))
        return false;
      if (!this.wechatData.equals(that.wechatData))
        return false;
    }

    boolean this_present_wechatUrl = true && this.isSetWechatUrl();
    boolean that_present_wechatUrl = true && that.isSetWechatUrl();
    if (this_present_wechatUrl || that_present_wechatUrl) {
      if (!(this_present_wechatUrl && that_present_wechatUrl))
        return false;
      if (!this.wechatUrl.equals(that.wechatUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TEliteMessageData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TEliteMessageData typedOther = (TEliteMessageData)other;

    lastComparison = Boolean.valueOf(isSetInboxMessageDataValue()).compareTo(typedOther.isSetInboxMessageDataValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInboxMessageDataValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inboxMessageDataValue, typedOther.inboxMessageDataValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInboxMessageContent()).compareTo(typedOther.isSetInboxMessageContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInboxMessageContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inboxMessageContent, typedOther.inboxMessageContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendCloudTemplate()).compareTo(typedOther.isSetSendCloudTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendCloudTemplate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendCloudTemplate, typedOther.sendCloudTemplate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendCloudVariables()).compareTo(typedOther.isSetSendCloudVariables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendCloudVariables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendCloudVariables, typedOther.sendCloudVariables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWechatTemplateId()).compareTo(typedOther.isSetWechatTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechatTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechatTemplateId, typedOther.wechatTemplateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWechatData()).compareTo(typedOther.isSetWechatData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechatData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechatData, typedOther.wechatData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWechatUrl()).compareTo(typedOther.isSetWechatUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechatUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechatUrl, typedOther.wechatUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TEliteMessageData(");
    boolean first = true;

    sb.append("inboxMessageDataValue:");
    sb.append(this.inboxMessageDataValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inboxMessageContent:");
    if (this.inboxMessageContent == null) {
      sb.append("null");
    } else {
      sb.append(this.inboxMessageContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendCloudTemplate:");
    sb.append(this.sendCloudTemplate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendCloudVariables:");
    if (this.sendCloudVariables == null) {
      sb.append("null");
    } else {
      sb.append(this.sendCloudVariables);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wechatTemplateId:");
    sb.append(this.wechatTemplateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wechatData:");
    if (this.wechatData == null) {
      sb.append("null");
    } else {
      sb.append(this.wechatData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wechatUrl:");
    if (this.wechatUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.wechatUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEliteMessageDataStandardSchemeFactory implements SchemeFactory {
    public TEliteMessageDataStandardScheme getScheme() {
      return new TEliteMessageDataStandardScheme();
    }
  }

  private static class TEliteMessageDataStandardScheme extends StandardScheme<TEliteMessageData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEliteMessageData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INBOX_MESSAGE_DATA_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.inboxMessageDataValue = iprot.readI32();
              struct.setInboxMessageDataValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INBOX_MESSAGE_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inboxMessageContent = iprot.readString();
              struct.setInboxMessageContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEND_CLOUD_TEMPLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sendCloudTemplate = iprot.readI32();
              struct.setSendCloudTemplateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEND_CLOUD_VARIABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map124 = iprot.readMapBegin();
                struct.sendCloudVariables = new HashMap<String,String>(2*_map124.size);
                for (int _i125 = 0; _i125 < _map124.size; ++_i125)
                {
                  String _key126; // required
                  String _val127; // required
                  _key126 = iprot.readString();
                  _val127 = iprot.readString();
                  struct.sendCloudVariables.put(_key126, _val127);
                }
                iprot.readMapEnd();
              }
              struct.setSendCloudVariablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WECHAT_TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wechatTemplateId = iprot.readI32();
              struct.setWechatTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WECHAT_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wechatData = iprot.readString();
              struct.setWechatDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WECHAT_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wechatUrl = iprot.readString();
              struct.setWechatUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEliteMessageData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INBOX_MESSAGE_DATA_VALUE_FIELD_DESC);
      oprot.writeI32(struct.inboxMessageDataValue);
      oprot.writeFieldEnd();
      if (struct.inboxMessageContent != null) {
        oprot.writeFieldBegin(INBOX_MESSAGE_CONTENT_FIELD_DESC);
        oprot.writeString(struct.inboxMessageContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEND_CLOUD_TEMPLATE_FIELD_DESC);
      oprot.writeI32(struct.sendCloudTemplate);
      oprot.writeFieldEnd();
      if (struct.sendCloudVariables != null) {
        oprot.writeFieldBegin(SEND_CLOUD_VARIABLES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.sendCloudVariables.size()));
          for (Map.Entry<String, String> _iter128 : struct.sendCloudVariables.entrySet())
          {
            oprot.writeString(_iter128.getKey());
            oprot.writeString(_iter128.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WECHAT_TEMPLATE_ID_FIELD_DESC);
      oprot.writeI32(struct.wechatTemplateId);
      oprot.writeFieldEnd();
      if (struct.wechatData != null) {
        oprot.writeFieldBegin(WECHAT_DATA_FIELD_DESC);
        oprot.writeString(struct.wechatData);
        oprot.writeFieldEnd();
      }
      if (struct.wechatUrl != null) {
        oprot.writeFieldBegin(WECHAT_URL_FIELD_DESC);
        oprot.writeString(struct.wechatUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEliteMessageDataTupleSchemeFactory implements SchemeFactory {
    public TEliteMessageDataTupleScheme getScheme() {
      return new TEliteMessageDataTupleScheme();
    }
  }

  private static class TEliteMessageDataTupleScheme extends TupleScheme<TEliteMessageData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEliteMessageData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInboxMessageDataValue()) {
        optionals.set(0);
      }
      if (struct.isSetInboxMessageContent()) {
        optionals.set(1);
      }
      if (struct.isSetSendCloudTemplate()) {
        optionals.set(2);
      }
      if (struct.isSetSendCloudVariables()) {
        optionals.set(3);
      }
      if (struct.isSetWechatTemplateId()) {
        optionals.set(4);
      }
      if (struct.isSetWechatData()) {
        optionals.set(5);
      }
      if (struct.isSetWechatUrl()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetInboxMessageDataValue()) {
        oprot.writeI32(struct.inboxMessageDataValue);
      }
      if (struct.isSetInboxMessageContent()) {
        oprot.writeString(struct.inboxMessageContent);
      }
      if (struct.isSetSendCloudTemplate()) {
        oprot.writeI32(struct.sendCloudTemplate);
      }
      if (struct.isSetSendCloudVariables()) {
        {
          oprot.writeI32(struct.sendCloudVariables.size());
          for (Map.Entry<String, String> _iter129 : struct.sendCloudVariables.entrySet())
          {
            oprot.writeString(_iter129.getKey());
            oprot.writeString(_iter129.getValue());
          }
        }
      }
      if (struct.isSetWechatTemplateId()) {
        oprot.writeI32(struct.wechatTemplateId);
      }
      if (struct.isSetWechatData()) {
        oprot.writeString(struct.wechatData);
      }
      if (struct.isSetWechatUrl()) {
        oprot.writeString(struct.wechatUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEliteMessageData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.inboxMessageDataValue = iprot.readI32();
        struct.setInboxMessageDataValueIsSet(true);
      }
      if (incoming.get(1)) {
        struct.inboxMessageContent = iprot.readString();
        struct.setInboxMessageContentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sendCloudTemplate = iprot.readI32();
        struct.setSendCloudTemplateIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map130 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.sendCloudVariables = new HashMap<String,String>(2*_map130.size);
          for (int _i131 = 0; _i131 < _map130.size; ++_i131)
          {
            String _key132; // required
            String _val133; // required
            _key132 = iprot.readString();
            _val133 = iprot.readString();
            struct.sendCloudVariables.put(_key132, _val133);
          }
        }
        struct.setSendCloudVariablesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.wechatTemplateId = iprot.readI32();
        struct.setWechatTemplateIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.wechatData = iprot.readString();
        struct.setWechatDataIsSet(true);
      }
      if (incoming.get(6)) {
        struct.wechatUrl = iprot.readString();
        struct.setWechatUrlIsSet(true);
      }
    }
  }

}

