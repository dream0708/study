/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sohu.bp.elite.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TEliteUser implements org.apache.thrift.TBase<TEliteUser, TEliteUser._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEliteUser");

  private static final org.apache.thrift.protocol.TField BP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bpId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthday", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField GRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("grade", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagIds", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FIRST_LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstLoginTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoginTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField GOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("gold", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField FIRST_LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("firstLogin", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("identity", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField NICK_FIELD_DESC = new org.apache.thrift.protocol.TField("nick", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField AREA_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("areaCode", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField HIGHLIGHT_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("highlightText", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField HIGHLIGHT_WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("highlightWords", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TEliteUserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TEliteUserTupleSchemeFactory());
  }

  public long bpId; // required
  public int gender; // required
  public long birthday; // required
  public String description; // required
  public int grade; // required
  public String tagIds; // required
  public int status; // required
  public long firstLoginTime; // required
  public long lastLoginTime; // required
  public int gold; // required
  public int firstLogin; // required
  public int identity; // required
  public String nick; // required
  public long areaCode; // required
  public String highlightText; // required
  public String highlightWords; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BP_ID((short)1, "bpId"),
    GENDER((short)2, "gender"),
    BIRTHDAY((short)3, "birthday"),
    DESCRIPTION((short)4, "description"),
    GRADE((short)5, "grade"),
    TAG_IDS((short)6, "tagIds"),
    STATUS((short)7, "status"),
    FIRST_LOGIN_TIME((short)8, "firstLoginTime"),
    LAST_LOGIN_TIME((short)9, "lastLoginTime"),
    GOLD((short)10, "gold"),
    FIRST_LOGIN((short)11, "firstLogin"),
    IDENTITY((short)12, "identity"),
    NICK((short)13, "nick"),
    AREA_CODE((short)14, "areaCode"),
    HIGHLIGHT_TEXT((short)15, "highlightText"),
    HIGHLIGHT_WORDS((short)16, "highlightWords");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BP_ID
          return BP_ID;
        case 2: // GENDER
          return GENDER;
        case 3: // BIRTHDAY
          return BIRTHDAY;
        case 4: // DESCRIPTION
          return DESCRIPTION;
        case 5: // GRADE
          return GRADE;
        case 6: // TAG_IDS
          return TAG_IDS;
        case 7: // STATUS
          return STATUS;
        case 8: // FIRST_LOGIN_TIME
          return FIRST_LOGIN_TIME;
        case 9: // LAST_LOGIN_TIME
          return LAST_LOGIN_TIME;
        case 10: // GOLD
          return GOLD;
        case 11: // FIRST_LOGIN
          return FIRST_LOGIN;
        case 12: // IDENTITY
          return IDENTITY;
        case 13: // NICK
          return NICK;
        case 14: // AREA_CODE
          return AREA_CODE;
        case 15: // HIGHLIGHT_TEXT
          return HIGHLIGHT_TEXT;
        case 16: // HIGHLIGHT_WORDS
          return HIGHLIGHT_WORDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BPID_ISSET_ID = 0;
  private static final int __GENDER_ISSET_ID = 1;
  private static final int __BIRTHDAY_ISSET_ID = 2;
  private static final int __GRADE_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __FIRSTLOGINTIME_ISSET_ID = 5;
  private static final int __LASTLOGINTIME_ISSET_ID = 6;
  private static final int __GOLD_ISSET_ID = 7;
  private static final int __FIRSTLOGIN_ISSET_ID = 8;
  private static final int __IDENTITY_ISSET_ID = 9;
  private static final int __AREACODE_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BP_ID, new org.apache.thrift.meta_data.FieldMetaData("bpId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("birthday", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GRADE, new org.apache.thrift.meta_data.FieldMetaData("grade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tagIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIRST_LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("firstLoginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastLoginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GOLD, new org.apache.thrift.meta_data.FieldMetaData("gold", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIRST_LOGIN, new org.apache.thrift.meta_data.FieldMetaData("firstLogin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("identity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NICK, new org.apache.thrift.meta_data.FieldMetaData("nick", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA_CODE, new org.apache.thrift.meta_data.FieldMetaData("areaCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HIGHLIGHT_TEXT, new org.apache.thrift.meta_data.FieldMetaData("highlightText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIGHLIGHT_WORDS, new org.apache.thrift.meta_data.FieldMetaData("highlightWords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEliteUser.class, metaDataMap);
  }

  public TEliteUser() {
    this.bpId = 0L;

    this.gender = 0;

    this.birthday = 0L;

    this.description = "";

    this.grade = 0;

    this.tagIds = "";

    this.status = 0;

    this.firstLoginTime = 0L;

    this.lastLoginTime = 0L;

    this.gold = 0;

    this.firstLogin = 0;

    this.identity = 0;

    this.nick = "";

    this.areaCode = 0L;

    this.highlightText = "";

    this.highlightWords = "";

  }

  public TEliteUser(
    long bpId,
    int gender,
    long birthday,
    String description,
    int grade,
    String tagIds,
    int status,
    long firstLoginTime,
    long lastLoginTime,
    int gold,
    int firstLogin,
    int identity,
    String nick,
    long areaCode,
    String highlightText,
    String highlightWords)
  {
    this();
    this.bpId = bpId;
    setBpIdIsSet(true);
    this.gender = gender;
    setGenderIsSet(true);
    this.birthday = birthday;
    setBirthdayIsSet(true);
    this.description = description;
    this.grade = grade;
    setGradeIsSet(true);
    this.tagIds = tagIds;
    this.status = status;
    setStatusIsSet(true);
    this.firstLoginTime = firstLoginTime;
    setFirstLoginTimeIsSet(true);
    this.lastLoginTime = lastLoginTime;
    setLastLoginTimeIsSet(true);
    this.gold = gold;
    setGoldIsSet(true);
    this.firstLogin = firstLogin;
    setFirstLoginIsSet(true);
    this.identity = identity;
    setIdentityIsSet(true);
    this.nick = nick;
    this.areaCode = areaCode;
    setAreaCodeIsSet(true);
    this.highlightText = highlightText;
    this.highlightWords = highlightWords;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEliteUser(TEliteUser other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bpId = other.bpId;
    this.gender = other.gender;
    this.birthday = other.birthday;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.grade = other.grade;
    if (other.isSetTagIds()) {
      this.tagIds = other.tagIds;
    }
    this.status = other.status;
    this.firstLoginTime = other.firstLoginTime;
    this.lastLoginTime = other.lastLoginTime;
    this.gold = other.gold;
    this.firstLogin = other.firstLogin;
    this.identity = other.identity;
    if (other.isSetNick()) {
      this.nick = other.nick;
    }
    this.areaCode = other.areaCode;
    if (other.isSetHighlightText()) {
      this.highlightText = other.highlightText;
    }
    if (other.isSetHighlightWords()) {
      this.highlightWords = other.highlightWords;
    }
  }

  public TEliteUser deepCopy() {
    return new TEliteUser(this);
  }

  @Override
  public void clear() {
    this.bpId = 0L;

    this.gender = 0;

    this.birthday = 0L;

    this.description = "";

    this.grade = 0;

    this.tagIds = "";

    this.status = 0;

    this.firstLoginTime = 0L;

    this.lastLoginTime = 0L;

    this.gold = 0;

    this.firstLogin = 0;

    this.identity = 0;

    this.nick = "";

    this.areaCode = 0L;

    this.highlightText = "";

    this.highlightWords = "";

  }

  public long getBpId() {
    return this.bpId;
  }

  public TEliteUser setBpId(long bpId) {
    this.bpId = bpId;
    setBpIdIsSet(true);
    return this;
  }

  public void unsetBpId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BPID_ISSET_ID);
  }

  /** Returns true if field bpId is set (has been assigned a value) and false otherwise */
  public boolean isSetBpId() {
    return EncodingUtils.testBit(__isset_bitfield, __BPID_ISSET_ID);
  }

  public void setBpIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BPID_ISSET_ID, value);
  }

  public int getGender() {
    return this.gender;
  }

  public TEliteUser setGender(int gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  public long getBirthday() {
    return this.birthday;
  }

  public TEliteUser setBirthday(long birthday) {
    this.birthday = birthday;
    setBirthdayIsSet(true);
    return this;
  }

  public void unsetBirthday() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIRTHDAY_ISSET_ID);
  }

  /** Returns true if field birthday is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthday() {
    return EncodingUtils.testBit(__isset_bitfield, __BIRTHDAY_ISSET_ID);
  }

  public void setBirthdayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIRTHDAY_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public TEliteUser setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getGrade() {
    return this.grade;
  }

  public TEliteUser setGrade(int grade) {
    this.grade = grade;
    setGradeIsSet(true);
    return this;
  }

  public void unsetGrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GRADE_ISSET_ID);
  }

  /** Returns true if field grade is set (has been assigned a value) and false otherwise */
  public boolean isSetGrade() {
    return EncodingUtils.testBit(__isset_bitfield, __GRADE_ISSET_ID);
  }

  public void setGradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GRADE_ISSET_ID, value);
  }

  public String getTagIds() {
    return this.tagIds;
  }

  public TEliteUser setTagIds(String tagIds) {
    this.tagIds = tagIds;
    return this;
  }

  public void unsetTagIds() {
    this.tagIds = null;
  }

  /** Returns true if field tagIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTagIds() {
    return this.tagIds != null;
  }

  public void setTagIdsIsSet(boolean value) {
    if (!value) {
      this.tagIds = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public TEliteUser setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public long getFirstLoginTime() {
    return this.firstLoginTime;
  }

  public TEliteUser setFirstLoginTime(long firstLoginTime) {
    this.firstLoginTime = firstLoginTime;
    setFirstLoginTimeIsSet(true);
    return this;
  }

  public void unsetFirstLoginTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRSTLOGINTIME_ISSET_ID);
  }

  /** Returns true if field firstLoginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstLoginTime() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRSTLOGINTIME_ISSET_ID);
  }

  public void setFirstLoginTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRSTLOGINTIME_ISSET_ID, value);
  }

  public long getLastLoginTime() {
    return this.lastLoginTime;
  }

  public TEliteUser setLastLoginTime(long lastLoginTime) {
    this.lastLoginTime = lastLoginTime;
    setLastLoginTimeIsSet(true);
    return this;
  }

  public void unsetLastLoginTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLOGINTIME_ISSET_ID);
  }

  /** Returns true if field lastLoginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLoginTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTLOGINTIME_ISSET_ID);
  }

  public void setLastLoginTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLOGINTIME_ISSET_ID, value);
  }

  public int getGold() {
    return this.gold;
  }

  public TEliteUser setGold(int gold) {
    this.gold = gold;
    setGoldIsSet(true);
    return this;
  }

  public void unsetGold() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOLD_ISSET_ID);
  }

  /** Returns true if field gold is set (has been assigned a value) and false otherwise */
  public boolean isSetGold() {
    return EncodingUtils.testBit(__isset_bitfield, __GOLD_ISSET_ID);
  }

  public void setGoldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOLD_ISSET_ID, value);
  }

  public int getFirstLogin() {
    return this.firstLogin;
  }

  public TEliteUser setFirstLogin(int firstLogin) {
    this.firstLogin = firstLogin;
    setFirstLoginIsSet(true);
    return this;
  }

  public void unsetFirstLogin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRSTLOGIN_ISSET_ID);
  }

  /** Returns true if field firstLogin is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstLogin() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRSTLOGIN_ISSET_ID);
  }

  public void setFirstLoginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRSTLOGIN_ISSET_ID, value);
  }

  public int getIdentity() {
    return this.identity;
  }

  public TEliteUser setIdentity(int identity) {
    this.identity = identity;
    setIdentityIsSet(true);
    return this;
  }

  public void unsetIdentity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDENTITY_ISSET_ID);
  }

  /** Returns true if field identity is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentity() {
    return EncodingUtils.testBit(__isset_bitfield, __IDENTITY_ISSET_ID);
  }

  public void setIdentityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDENTITY_ISSET_ID, value);
  }

  public String getNick() {
    return this.nick;
  }

  public TEliteUser setNick(String nick) {
    this.nick = nick;
    return this;
  }

  public void unsetNick() {
    this.nick = null;
  }

  /** Returns true if field nick is set (has been assigned a value) and false otherwise */
  public boolean isSetNick() {
    return this.nick != null;
  }

  public void setNickIsSet(boolean value) {
    if (!value) {
      this.nick = null;
    }
  }

  public long getAreaCode() {
    return this.areaCode;
  }

  public TEliteUser setAreaCode(long areaCode) {
    this.areaCode = areaCode;
    setAreaCodeIsSet(true);
    return this;
  }

  public void unsetAreaCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AREACODE_ISSET_ID);
  }

  /** Returns true if field areaCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaCode() {
    return EncodingUtils.testBit(__isset_bitfield, __AREACODE_ISSET_ID);
  }

  public void setAreaCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AREACODE_ISSET_ID, value);
  }

  public String getHighlightText() {
    return this.highlightText;
  }

  public TEliteUser setHighlightText(String highlightText) {
    this.highlightText = highlightText;
    return this;
  }

  public void unsetHighlightText() {
    this.highlightText = null;
  }

  /** Returns true if field highlightText is set (has been assigned a value) and false otherwise */
  public boolean isSetHighlightText() {
    return this.highlightText != null;
  }

  public void setHighlightTextIsSet(boolean value) {
    if (!value) {
      this.highlightText = null;
    }
  }

  public String getHighlightWords() {
    return this.highlightWords;
  }

  public TEliteUser setHighlightWords(String highlightWords) {
    this.highlightWords = highlightWords;
    return this;
  }

  public void unsetHighlightWords() {
    this.highlightWords = null;
  }

  /** Returns true if field highlightWords is set (has been assigned a value) and false otherwise */
  public boolean isSetHighlightWords() {
    return this.highlightWords != null;
  }

  public void setHighlightWordsIsSet(boolean value) {
    if (!value) {
      this.highlightWords = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BP_ID:
      if (value == null) {
        unsetBpId();
      } else {
        setBpId((Long)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Integer)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBirthday();
      } else {
        setBirthday((Long)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case GRADE:
      if (value == null) {
        unsetGrade();
      } else {
        setGrade((Integer)value);
      }
      break;

    case TAG_IDS:
      if (value == null) {
        unsetTagIds();
      } else {
        setTagIds((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case FIRST_LOGIN_TIME:
      if (value == null) {
        unsetFirstLoginTime();
      } else {
        setFirstLoginTime((Long)value);
      }
      break;

    case LAST_LOGIN_TIME:
      if (value == null) {
        unsetLastLoginTime();
      } else {
        setLastLoginTime((Long)value);
      }
      break;

    case GOLD:
      if (value == null) {
        unsetGold();
      } else {
        setGold((Integer)value);
      }
      break;

    case FIRST_LOGIN:
      if (value == null) {
        unsetFirstLogin();
      } else {
        setFirstLogin((Integer)value);
      }
      break;

    case IDENTITY:
      if (value == null) {
        unsetIdentity();
      } else {
        setIdentity((Integer)value);
      }
      break;

    case NICK:
      if (value == null) {
        unsetNick();
      } else {
        setNick((String)value);
      }
      break;

    case AREA_CODE:
      if (value == null) {
        unsetAreaCode();
      } else {
        setAreaCode((Long)value);
      }
      break;

    case HIGHLIGHT_TEXT:
      if (value == null) {
        unsetHighlightText();
      } else {
        setHighlightText((String)value);
      }
      break;

    case HIGHLIGHT_WORDS:
      if (value == null) {
        unsetHighlightWords();
      } else {
        setHighlightWords((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BP_ID:
      return Long.valueOf(getBpId());

    case GENDER:
      return Integer.valueOf(getGender());

    case BIRTHDAY:
      return Long.valueOf(getBirthday());

    case DESCRIPTION:
      return getDescription();

    case GRADE:
      return Integer.valueOf(getGrade());

    case TAG_IDS:
      return getTagIds();

    case STATUS:
      return Integer.valueOf(getStatus());

    case FIRST_LOGIN_TIME:
      return Long.valueOf(getFirstLoginTime());

    case LAST_LOGIN_TIME:
      return Long.valueOf(getLastLoginTime());

    case GOLD:
      return Integer.valueOf(getGold());

    case FIRST_LOGIN:
      return Integer.valueOf(getFirstLogin());

    case IDENTITY:
      return Integer.valueOf(getIdentity());

    case NICK:
      return getNick();

    case AREA_CODE:
      return Long.valueOf(getAreaCode());

    case HIGHLIGHT_TEXT:
      return getHighlightText();

    case HIGHLIGHT_WORDS:
      return getHighlightWords();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BP_ID:
      return isSetBpId();
    case GENDER:
      return isSetGender();
    case BIRTHDAY:
      return isSetBirthday();
    case DESCRIPTION:
      return isSetDescription();
    case GRADE:
      return isSetGrade();
    case TAG_IDS:
      return isSetTagIds();
    case STATUS:
      return isSetStatus();
    case FIRST_LOGIN_TIME:
      return isSetFirstLoginTime();
    case LAST_LOGIN_TIME:
      return isSetLastLoginTime();
    case GOLD:
      return isSetGold();
    case FIRST_LOGIN:
      return isSetFirstLogin();
    case IDENTITY:
      return isSetIdentity();
    case NICK:
      return isSetNick();
    case AREA_CODE:
      return isSetAreaCode();
    case HIGHLIGHT_TEXT:
      return isSetHighlightText();
    case HIGHLIGHT_WORDS:
      return isSetHighlightWords();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TEliteUser)
      return this.equals((TEliteUser)that);
    return false;
  }

  public boolean equals(TEliteUser that) {
    if (that == null)
      return false;

    boolean this_present_bpId = true;
    boolean that_present_bpId = true;
    if (this_present_bpId || that_present_bpId) {
      if (!(this_present_bpId && that_present_bpId))
        return false;
      if (this.bpId != that.bpId)
        return false;
    }

    boolean this_present_gender = true;
    boolean that_present_gender = true;
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_birthday = true;
    boolean that_present_birthday = true;
    if (this_present_birthday || that_present_birthday) {
      if (!(this_present_birthday && that_present_birthday))
        return false;
      if (this.birthday != that.birthday)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_grade = true;
    boolean that_present_grade = true;
    if (this_present_grade || that_present_grade) {
      if (!(this_present_grade && that_present_grade))
        return false;
      if (this.grade != that.grade)
        return false;
    }

    boolean this_present_tagIds = true && this.isSetTagIds();
    boolean that_present_tagIds = true && that.isSetTagIds();
    if (this_present_tagIds || that_present_tagIds) {
      if (!(this_present_tagIds && that_present_tagIds))
        return false;
      if (!this.tagIds.equals(that.tagIds))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_firstLoginTime = true;
    boolean that_present_firstLoginTime = true;
    if (this_present_firstLoginTime || that_present_firstLoginTime) {
      if (!(this_present_firstLoginTime && that_present_firstLoginTime))
        return false;
      if (this.firstLoginTime != that.firstLoginTime)
        return false;
    }

    boolean this_present_lastLoginTime = true;
    boolean that_present_lastLoginTime = true;
    if (this_present_lastLoginTime || that_present_lastLoginTime) {
      if (!(this_present_lastLoginTime && that_present_lastLoginTime))
        return false;
      if (this.lastLoginTime != that.lastLoginTime)
        return false;
    }

    boolean this_present_gold = true;
    boolean that_present_gold = true;
    if (this_present_gold || that_present_gold) {
      if (!(this_present_gold && that_present_gold))
        return false;
      if (this.gold != that.gold)
        return false;
    }

    boolean this_present_firstLogin = true;
    boolean that_present_firstLogin = true;
    if (this_present_firstLogin || that_present_firstLogin) {
      if (!(this_present_firstLogin && that_present_firstLogin))
        return false;
      if (this.firstLogin != that.firstLogin)
        return false;
    }

    boolean this_present_identity = true;
    boolean that_present_identity = true;
    if (this_present_identity || that_present_identity) {
      if (!(this_present_identity && that_present_identity))
        return false;
      if (this.identity != that.identity)
        return false;
    }

    boolean this_present_nick = true && this.isSetNick();
    boolean that_present_nick = true && that.isSetNick();
    if (this_present_nick || that_present_nick) {
      if (!(this_present_nick && that_present_nick))
        return false;
      if (!this.nick.equals(that.nick))
        return false;
    }

    boolean this_present_areaCode = true;
    boolean that_present_areaCode = true;
    if (this_present_areaCode || that_present_areaCode) {
      if (!(this_present_areaCode && that_present_areaCode))
        return false;
      if (this.areaCode != that.areaCode)
        return false;
    }

    boolean this_present_highlightText = true && this.isSetHighlightText();
    boolean that_present_highlightText = true && that.isSetHighlightText();
    if (this_present_highlightText || that_present_highlightText) {
      if (!(this_present_highlightText && that_present_highlightText))
        return false;
      if (!this.highlightText.equals(that.highlightText))
        return false;
    }

    boolean this_present_highlightWords = true && this.isSetHighlightWords();
    boolean that_present_highlightWords = true && that.isSetHighlightWords();
    if (this_present_highlightWords || that_present_highlightWords) {
      if (!(this_present_highlightWords && that_present_highlightWords))
        return false;
      if (!this.highlightWords.equals(that.highlightWords))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TEliteUser other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TEliteUser typedOther = (TEliteUser)other;

    lastComparison = Boolean.valueOf(isSetBpId()).compareTo(typedOther.isSetBpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bpId, typedOther.bpId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(typedOther.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, typedOther.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthday()).compareTo(typedOther.isSetBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthday, typedOther.birthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrade()).compareTo(typedOther.isSetGrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grade, typedOther.grade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagIds()).compareTo(typedOther.isSetTagIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagIds, typedOther.tagIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstLoginTime()).compareTo(typedOther.isSetFirstLoginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstLoginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstLoginTime, typedOther.firstLoginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLoginTime()).compareTo(typedOther.isSetLastLoginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLoginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoginTime, typedOther.lastLoginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGold()).compareTo(typedOther.isSetGold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gold, typedOther.gold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstLogin()).compareTo(typedOther.isSetFirstLogin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstLogin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstLogin, typedOther.firstLogin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentity()).compareTo(typedOther.isSetIdentity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identity, typedOther.identity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNick()).compareTo(typedOther.isSetNick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nick, typedOther.nick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreaCode()).compareTo(typedOther.isSetAreaCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaCode, typedOther.areaCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighlightText()).compareTo(typedOther.isSetHighlightText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighlightText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highlightText, typedOther.highlightText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighlightWords()).compareTo(typedOther.isSetHighlightWords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighlightWords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highlightWords, typedOther.highlightWords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TEliteUser(");
    boolean first = true;

    sb.append("bpId:");
    sb.append(this.bpId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gender:");
    sb.append(this.gender);
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthday:");
    sb.append(this.birthday);
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("grade:");
    sb.append(this.grade);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagIds:");
    if (this.tagIds == null) {
      sb.append("null");
    } else {
      sb.append(this.tagIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstLoginTime:");
    sb.append(this.firstLoginTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastLoginTime:");
    sb.append(this.lastLoginTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gold:");
    sb.append(this.gold);
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstLogin:");
    sb.append(this.firstLogin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("identity:");
    sb.append(this.identity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nick:");
    if (this.nick == null) {
      sb.append("null");
    } else {
      sb.append(this.nick);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("areaCode:");
    sb.append(this.areaCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("highlightText:");
    if (this.highlightText == null) {
      sb.append("null");
    } else {
      sb.append(this.highlightText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("highlightWords:");
    if (this.highlightWords == null) {
      sb.append("null");
    } else {
      sb.append(this.highlightWords);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEliteUserStandardSchemeFactory implements SchemeFactory {
    public TEliteUserStandardScheme getScheme() {
      return new TEliteUserStandardScheme();
    }
  }

  private static class TEliteUserStandardScheme extends StandardScheme<TEliteUser> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEliteUser struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bpId = iprot.readI64();
              struct.setBpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gender = iprot.readI32();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.birthday = iprot.readI64();
              struct.setBirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.grade = iprot.readI32();
              struct.setGradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TAG_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tagIds = iprot.readString();
              struct.setTagIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FIRST_LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.firstLoginTime = iprot.readI64();
              struct.setFirstLoginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAST_LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastLoginTime = iprot.readI64();
              struct.setLastLoginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gold = iprot.readI32();
              struct.setGoldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FIRST_LOGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.firstLogin = iprot.readI32();
              struct.setFirstLoginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IDENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.identity = iprot.readI32();
              struct.setIdentityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NICK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nick = iprot.readString();
              struct.setNickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // AREA_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.areaCode = iprot.readI64();
              struct.setAreaCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // HIGHLIGHT_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.highlightText = iprot.readString();
              struct.setHighlightTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HIGHLIGHT_WORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.highlightWords = iprot.readString();
              struct.setHighlightWordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEliteUser struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BP_ID_FIELD_DESC);
      oprot.writeI64(struct.bpId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GENDER_FIELD_DESC);
      oprot.writeI32(struct.gender);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
      oprot.writeI64(struct.birthday);
      oprot.writeFieldEnd();
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GRADE_FIELD_DESC);
      oprot.writeI32(struct.grade);
      oprot.writeFieldEnd();
      if (struct.tagIds != null) {
        oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
        oprot.writeString(struct.tagIds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIRST_LOGIN_TIME_FIELD_DESC);
      oprot.writeI64(struct.firstLoginTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_LOGIN_TIME_FIELD_DESC);
      oprot.writeI64(struct.lastLoginTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GOLD_FIELD_DESC);
      oprot.writeI32(struct.gold);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIRST_LOGIN_FIELD_DESC);
      oprot.writeI32(struct.firstLogin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IDENTITY_FIELD_DESC);
      oprot.writeI32(struct.identity);
      oprot.writeFieldEnd();
      if (struct.nick != null) {
        oprot.writeFieldBegin(NICK_FIELD_DESC);
        oprot.writeString(struct.nick);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AREA_CODE_FIELD_DESC);
      oprot.writeI64(struct.areaCode);
      oprot.writeFieldEnd();
      if (struct.highlightText != null) {
        oprot.writeFieldBegin(HIGHLIGHT_TEXT_FIELD_DESC);
        oprot.writeString(struct.highlightText);
        oprot.writeFieldEnd();
      }
      if (struct.highlightWords != null) {
        oprot.writeFieldBegin(HIGHLIGHT_WORDS_FIELD_DESC);
        oprot.writeString(struct.highlightWords);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEliteUserTupleSchemeFactory implements SchemeFactory {
    public TEliteUserTupleScheme getScheme() {
      return new TEliteUserTupleScheme();
    }
  }

  private static class TEliteUserTupleScheme extends TupleScheme<TEliteUser> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEliteUser struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBpId()) {
        optionals.set(0);
      }
      if (struct.isSetGender()) {
        optionals.set(1);
      }
      if (struct.isSetBirthday()) {
        optionals.set(2);
      }
      if (struct.isSetDescription()) {
        optionals.set(3);
      }
      if (struct.isSetGrade()) {
        optionals.set(4);
      }
      if (struct.isSetTagIds()) {
        optionals.set(5);
      }
      if (struct.isSetStatus()) {
        optionals.set(6);
      }
      if (struct.isSetFirstLoginTime()) {
        optionals.set(7);
      }
      if (struct.isSetLastLoginTime()) {
        optionals.set(8);
      }
      if (struct.isSetGold()) {
        optionals.set(9);
      }
      if (struct.isSetFirstLogin()) {
        optionals.set(10);
      }
      if (struct.isSetIdentity()) {
        optionals.set(11);
      }
      if (struct.isSetNick()) {
        optionals.set(12);
      }
      if (struct.isSetAreaCode()) {
        optionals.set(13);
      }
      if (struct.isSetHighlightText()) {
        optionals.set(14);
      }
      if (struct.isSetHighlightWords()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetBpId()) {
        oprot.writeI64(struct.bpId);
      }
      if (struct.isSetGender()) {
        oprot.writeI32(struct.gender);
      }
      if (struct.isSetBirthday()) {
        oprot.writeI64(struct.birthday);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetGrade()) {
        oprot.writeI32(struct.grade);
      }
      if (struct.isSetTagIds()) {
        oprot.writeString(struct.tagIds);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetFirstLoginTime()) {
        oprot.writeI64(struct.firstLoginTime);
      }
      if (struct.isSetLastLoginTime()) {
        oprot.writeI64(struct.lastLoginTime);
      }
      if (struct.isSetGold()) {
        oprot.writeI32(struct.gold);
      }
      if (struct.isSetFirstLogin()) {
        oprot.writeI32(struct.firstLogin);
      }
      if (struct.isSetIdentity()) {
        oprot.writeI32(struct.identity);
      }
      if (struct.isSetNick()) {
        oprot.writeString(struct.nick);
      }
      if (struct.isSetAreaCode()) {
        oprot.writeI64(struct.areaCode);
      }
      if (struct.isSetHighlightText()) {
        oprot.writeString(struct.highlightText);
      }
      if (struct.isSetHighlightWords()) {
        oprot.writeString(struct.highlightWords);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEliteUser struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.bpId = iprot.readI64();
        struct.setBpIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gender = iprot.readI32();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(2)) {
        struct.birthday = iprot.readI64();
        struct.setBirthdayIsSet(true);
      }
      if (incoming.get(3)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.grade = iprot.readI32();
        struct.setGradeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tagIds = iprot.readString();
        struct.setTagIdsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.firstLoginTime = iprot.readI64();
        struct.setFirstLoginTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lastLoginTime = iprot.readI64();
        struct.setLastLoginTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.gold = iprot.readI32();
        struct.setGoldIsSet(true);
      }
      if (incoming.get(10)) {
        struct.firstLogin = iprot.readI32();
        struct.setFirstLoginIsSet(true);
      }
      if (incoming.get(11)) {
        struct.identity = iprot.readI32();
        struct.setIdentityIsSet(true);
      }
      if (incoming.get(12)) {
        struct.nick = iprot.readString();
        struct.setNickIsSet(true);
      }
      if (incoming.get(13)) {
        struct.areaCode = iprot.readI64();
        struct.setAreaCodeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.highlightText = iprot.readString();
        struct.setHighlightTextIsSet(true);
      }
      if (incoming.get(15)) {
        struct.highlightWords = iprot.readString();
        struct.setHighlightWordsIsSet(true);
      }
    }
  }

}

