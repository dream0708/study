/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sohu.bp.elite.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TEliteAnswer implements org.apache.thrift.TBase<TEliteAnswer, TEliteAnswer._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEliteAnswer");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField BP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bpId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField QUESTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("questionId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagIds", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField PUBLISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("publishTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("createHost", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField CREATE_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("createPort", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField UPDATE_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("updateHost", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField UPDATE_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatePort", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField SOURCE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceUrl", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField AREA_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("areaCode", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField SPECIAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("specialId", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField SPECIAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("specialType", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField HIGHLIGHT_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("highlightText", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField HIGHLIGHT_WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("highlightWords", org.apache.thrift.protocol.TType.STRING, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TEliteAnswerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TEliteAnswerTupleSchemeFactory());
  }

  public long id; // required
  public long bpId; // required
  public long questionId; // required
  public String content; // required
  public String tagIds; // required
  public int source; // required
  public long createTime; // required
  public long updateTime; // required
  public long publishTime; // required
  public int status; // required
  public long createHost; // required
  public int createPort; // required
  public long updateHost; // required
  public int updatePort; // required
  public String sourceUrl; // required
  public long areaCode; // required
  public long specialId; // required
  public int specialType; // required
  public String highlightText; // required
  public String highlightWords; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    BP_ID((short)2, "bpId"),
    QUESTION_ID((short)3, "questionId"),
    CONTENT((short)4, "content"),
    TAG_IDS((short)5, "tagIds"),
    SOURCE((short)6, "source"),
    CREATE_TIME((short)7, "createTime"),
    UPDATE_TIME((short)8, "updateTime"),
    PUBLISH_TIME((short)9, "publishTime"),
    STATUS((short)10, "status"),
    CREATE_HOST((short)11, "createHost"),
    CREATE_PORT((short)12, "createPort"),
    UPDATE_HOST((short)13, "updateHost"),
    UPDATE_PORT((short)14, "updatePort"),
    SOURCE_URL((short)15, "sourceUrl"),
    AREA_CODE((short)16, "areaCode"),
    SPECIAL_ID((short)17, "specialId"),
    SPECIAL_TYPE((short)18, "specialType"),
    HIGHLIGHT_TEXT((short)19, "highlightText"),
    HIGHLIGHT_WORDS((short)20, "highlightWords");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // BP_ID
          return BP_ID;
        case 3: // QUESTION_ID
          return QUESTION_ID;
        case 4: // CONTENT
          return CONTENT;
        case 5: // TAG_IDS
          return TAG_IDS;
        case 6: // SOURCE
          return SOURCE;
        case 7: // CREATE_TIME
          return CREATE_TIME;
        case 8: // UPDATE_TIME
          return UPDATE_TIME;
        case 9: // PUBLISH_TIME
          return PUBLISH_TIME;
        case 10: // STATUS
          return STATUS;
        case 11: // CREATE_HOST
          return CREATE_HOST;
        case 12: // CREATE_PORT
          return CREATE_PORT;
        case 13: // UPDATE_HOST
          return UPDATE_HOST;
        case 14: // UPDATE_PORT
          return UPDATE_PORT;
        case 15: // SOURCE_URL
          return SOURCE_URL;
        case 16: // AREA_CODE
          return AREA_CODE;
        case 17: // SPECIAL_ID
          return SPECIAL_ID;
        case 18: // SPECIAL_TYPE
          return SPECIAL_TYPE;
        case 19: // HIGHLIGHT_TEXT
          return HIGHLIGHT_TEXT;
        case 20: // HIGHLIGHT_WORDS
          return HIGHLIGHT_WORDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __BPID_ISSET_ID = 1;
  private static final int __QUESTIONID_ISSET_ID = 2;
  private static final int __SOURCE_ISSET_ID = 3;
  private static final int __CREATETIME_ISSET_ID = 4;
  private static final int __UPDATETIME_ISSET_ID = 5;
  private static final int __PUBLISHTIME_ISSET_ID = 6;
  private static final int __STATUS_ISSET_ID = 7;
  private static final int __CREATEHOST_ISSET_ID = 8;
  private static final int __CREATEPORT_ISSET_ID = 9;
  private static final int __UPDATEHOST_ISSET_ID = 10;
  private static final int __UPDATEPORT_ISSET_ID = 11;
  private static final int __AREACODE_ISSET_ID = 12;
  private static final int __SPECIALID_ISSET_ID = 13;
  private static final int __SPECIALTYPE_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BP_ID, new org.apache.thrift.meta_data.FieldMetaData("bpId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUESTION_ID, new org.apache.thrift.meta_data.FieldMetaData("questionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tagIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PUBLISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("publishTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_HOST, new org.apache.thrift.meta_data.FieldMetaData("createHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_PORT, new org.apache.thrift.meta_data.FieldMetaData("createPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_HOST, new org.apache.thrift.meta_data.FieldMetaData("updateHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_PORT, new org.apache.thrift.meta_data.FieldMetaData("updatePort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOURCE_URL, new org.apache.thrift.meta_data.FieldMetaData("sourceUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA_CODE, new org.apache.thrift.meta_data.FieldMetaData("areaCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPECIAL_ID, new org.apache.thrift.meta_data.FieldMetaData("specialId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPECIAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("specialType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HIGHLIGHT_TEXT, new org.apache.thrift.meta_data.FieldMetaData("highlightText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIGHLIGHT_WORDS, new org.apache.thrift.meta_data.FieldMetaData("highlightWords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEliteAnswer.class, metaDataMap);
  }

  public TEliteAnswer() {
    this.id = 0L;

    this.bpId = 0L;

    this.questionId = 0L;

    this.content = "";

    this.tagIds = "";

    this.source = 0;

    this.createTime = 0L;

    this.updateTime = 0L;

    this.publishTime = 0L;

    this.status = 0;

    this.createHost = 0L;

    this.createPort = 0;

    this.updateHost = 0L;

    this.updatePort = 0;

    this.sourceUrl = "";

    this.areaCode = 0L;

    this.specialId = 0L;

    this.specialType = 0;

    this.highlightText = "";

    this.highlightWords = "";

  }

  public TEliteAnswer(
    long id,
    long bpId,
    long questionId,
    String content,
    String tagIds,
    int source,
    long createTime,
    long updateTime,
    long publishTime,
    int status,
    long createHost,
    int createPort,
    long updateHost,
    int updatePort,
    String sourceUrl,
    long areaCode,
    long specialId,
    int specialType,
    String highlightText,
    String highlightWords)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.bpId = bpId;
    setBpIdIsSet(true);
    this.questionId = questionId;
    setQuestionIdIsSet(true);
    this.content = content;
    this.tagIds = tagIds;
    this.source = source;
    setSourceIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.publishTime = publishTime;
    setPublishTimeIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.createHost = createHost;
    setCreateHostIsSet(true);
    this.createPort = createPort;
    setCreatePortIsSet(true);
    this.updateHost = updateHost;
    setUpdateHostIsSet(true);
    this.updatePort = updatePort;
    setUpdatePortIsSet(true);
    this.sourceUrl = sourceUrl;
    this.areaCode = areaCode;
    setAreaCodeIsSet(true);
    this.specialId = specialId;
    setSpecialIdIsSet(true);
    this.specialType = specialType;
    setSpecialTypeIsSet(true);
    this.highlightText = highlightText;
    this.highlightWords = highlightWords;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEliteAnswer(TEliteAnswer other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.bpId = other.bpId;
    this.questionId = other.questionId;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetTagIds()) {
      this.tagIds = other.tagIds;
    }
    this.source = other.source;
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    this.publishTime = other.publishTime;
    this.status = other.status;
    this.createHost = other.createHost;
    this.createPort = other.createPort;
    this.updateHost = other.updateHost;
    this.updatePort = other.updatePort;
    if (other.isSetSourceUrl()) {
      this.sourceUrl = other.sourceUrl;
    }
    this.areaCode = other.areaCode;
    this.specialId = other.specialId;
    this.specialType = other.specialType;
    if (other.isSetHighlightText()) {
      this.highlightText = other.highlightText;
    }
    if (other.isSetHighlightWords()) {
      this.highlightWords = other.highlightWords;
    }
  }

  public TEliteAnswer deepCopy() {
    return new TEliteAnswer(this);
  }

  @Override
  public void clear() {
    this.id = 0L;

    this.bpId = 0L;

    this.questionId = 0L;

    this.content = "";

    this.tagIds = "";

    this.source = 0;

    this.createTime = 0L;

    this.updateTime = 0L;

    this.publishTime = 0L;

    this.status = 0;

    this.createHost = 0L;

    this.createPort = 0;

    this.updateHost = 0L;

    this.updatePort = 0;

    this.sourceUrl = "";

    this.areaCode = 0L;

    this.specialId = 0L;

    this.specialType = 0;

    this.highlightText = "";

    this.highlightWords = "";

  }

  public long getId() {
    return this.id;
  }

  public TEliteAnswer setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getBpId() {
    return this.bpId;
  }

  public TEliteAnswer setBpId(long bpId) {
    this.bpId = bpId;
    setBpIdIsSet(true);
    return this;
  }

  public void unsetBpId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BPID_ISSET_ID);
  }

  /** Returns true if field bpId is set (has been assigned a value) and false otherwise */
  public boolean isSetBpId() {
    return EncodingUtils.testBit(__isset_bitfield, __BPID_ISSET_ID);
  }

  public void setBpIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BPID_ISSET_ID, value);
  }

  public long getQuestionId() {
    return this.questionId;
  }

  public TEliteAnswer setQuestionId(long questionId) {
    this.questionId = questionId;
    setQuestionIdIsSet(true);
    return this;
  }

  public void unsetQuestionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
  }

  /** Returns true if field questionId is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionId() {
    return EncodingUtils.testBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
  }

  public void setQuestionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUESTIONID_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public TEliteAnswer setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getTagIds() {
    return this.tagIds;
  }

  public TEliteAnswer setTagIds(String tagIds) {
    this.tagIds = tagIds;
    return this;
  }

  public void unsetTagIds() {
    this.tagIds = null;
  }

  /** Returns true if field tagIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTagIds() {
    return this.tagIds != null;
  }

  public void setTagIdsIsSet(boolean value) {
    if (!value) {
      this.tagIds = null;
    }
  }

  public int getSource() {
    return this.source;
  }

  public TEliteAnswer setSource(int source) {
    this.source = source;
    setSourceIsSet(true);
    return this;
  }

  public void unsetSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return EncodingUtils.testBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCE_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public TEliteAnswer setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public TEliteAnswer setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public long getPublishTime() {
    return this.publishTime;
  }

  public TEliteAnswer setPublishTime(long publishTime) {
    this.publishTime = publishTime;
    setPublishTimeIsSet(true);
    return this;
  }

  public void unsetPublishTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISHTIME_ISSET_ID);
  }

  /** Returns true if field publishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLISHTIME_ISSET_ID);
  }

  public void setPublishTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISHTIME_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TEliteAnswer setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public long getCreateHost() {
    return this.createHost;
  }

  public TEliteAnswer setCreateHost(long createHost) {
    this.createHost = createHost;
    setCreateHostIsSet(true);
    return this;
  }

  public void unsetCreateHost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEHOST_ISSET_ID);
  }

  /** Returns true if field createHost is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateHost() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEHOST_ISSET_ID);
  }

  public void setCreateHostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEHOST_ISSET_ID, value);
  }

  public int getCreatePort() {
    return this.createPort;
  }

  public TEliteAnswer setCreatePort(int createPort) {
    this.createPort = createPort;
    setCreatePortIsSet(true);
    return this;
  }

  public void unsetCreatePort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEPORT_ISSET_ID);
  }

  /** Returns true if field createPort is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatePort() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEPORT_ISSET_ID);
  }

  public void setCreatePortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEPORT_ISSET_ID, value);
  }

  public long getUpdateHost() {
    return this.updateHost;
  }

  public TEliteAnswer setUpdateHost(long updateHost) {
    this.updateHost = updateHost;
    setUpdateHostIsSet(true);
    return this;
  }

  public void unsetUpdateHost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEHOST_ISSET_ID);
  }

  /** Returns true if field updateHost is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateHost() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEHOST_ISSET_ID);
  }

  public void setUpdateHostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEHOST_ISSET_ID, value);
  }

  public int getUpdatePort() {
    return this.updatePort;
  }

  public TEliteAnswer setUpdatePort(int updatePort) {
    this.updatePort = updatePort;
    setUpdatePortIsSet(true);
    return this;
  }

  public void unsetUpdatePort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEPORT_ISSET_ID);
  }

  /** Returns true if field updatePort is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatePort() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEPORT_ISSET_ID);
  }

  public void setUpdatePortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEPORT_ISSET_ID, value);
  }

  public String getSourceUrl() {
    return this.sourceUrl;
  }

  public TEliteAnswer setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  public void unsetSourceUrl() {
    this.sourceUrl = null;
  }

  /** Returns true if field sourceUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceUrl() {
    return this.sourceUrl != null;
  }

  public void setSourceUrlIsSet(boolean value) {
    if (!value) {
      this.sourceUrl = null;
    }
  }

  public long getAreaCode() {
    return this.areaCode;
  }

  public TEliteAnswer setAreaCode(long areaCode) {
    this.areaCode = areaCode;
    setAreaCodeIsSet(true);
    return this;
  }

  public void unsetAreaCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AREACODE_ISSET_ID);
  }

  /** Returns true if field areaCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaCode() {
    return EncodingUtils.testBit(__isset_bitfield, __AREACODE_ISSET_ID);
  }

  public void setAreaCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AREACODE_ISSET_ID, value);
  }

  public long getSpecialId() {
    return this.specialId;
  }

  public TEliteAnswer setSpecialId(long specialId) {
    this.specialId = specialId;
    setSpecialIdIsSet(true);
    return this;
  }

  public void unsetSpecialId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECIALID_ISSET_ID);
  }

  /** Returns true if field specialId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecialId() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECIALID_ISSET_ID);
  }

  public void setSpecialIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECIALID_ISSET_ID, value);
  }

  public int getSpecialType() {
    return this.specialType;
  }

  public TEliteAnswer setSpecialType(int specialType) {
    this.specialType = specialType;
    setSpecialTypeIsSet(true);
    return this;
  }

  public void unsetSpecialType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECIALTYPE_ISSET_ID);
  }

  /** Returns true if field specialType is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecialType() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECIALTYPE_ISSET_ID);
  }

  public void setSpecialTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECIALTYPE_ISSET_ID, value);
  }

  public String getHighlightText() {
    return this.highlightText;
  }

  public TEliteAnswer setHighlightText(String highlightText) {
    this.highlightText = highlightText;
    return this;
  }

  public void unsetHighlightText() {
    this.highlightText = null;
  }

  /** Returns true if field highlightText is set (has been assigned a value) and false otherwise */
  public boolean isSetHighlightText() {
    return this.highlightText != null;
  }

  public void setHighlightTextIsSet(boolean value) {
    if (!value) {
      this.highlightText = null;
    }
  }

  public String getHighlightWords() {
    return this.highlightWords;
  }

  public TEliteAnswer setHighlightWords(String highlightWords) {
    this.highlightWords = highlightWords;
    return this;
  }

  public void unsetHighlightWords() {
    this.highlightWords = null;
  }

  /** Returns true if field highlightWords is set (has been assigned a value) and false otherwise */
  public boolean isSetHighlightWords() {
    return this.highlightWords != null;
  }

  public void setHighlightWordsIsSet(boolean value) {
    if (!value) {
      this.highlightWords = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case BP_ID:
      if (value == null) {
        unsetBpId();
      } else {
        setBpId((Long)value);
      }
      break;

    case QUESTION_ID:
      if (value == null) {
        unsetQuestionId();
      } else {
        setQuestionId((Long)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case TAG_IDS:
      if (value == null) {
        unsetTagIds();
      } else {
        setTagIds((String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case PUBLISH_TIME:
      if (value == null) {
        unsetPublishTime();
      } else {
        setPublishTime((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case CREATE_HOST:
      if (value == null) {
        unsetCreateHost();
      } else {
        setCreateHost((Long)value);
      }
      break;

    case CREATE_PORT:
      if (value == null) {
        unsetCreatePort();
      } else {
        setCreatePort((Integer)value);
      }
      break;

    case UPDATE_HOST:
      if (value == null) {
        unsetUpdateHost();
      } else {
        setUpdateHost((Long)value);
      }
      break;

    case UPDATE_PORT:
      if (value == null) {
        unsetUpdatePort();
      } else {
        setUpdatePort((Integer)value);
      }
      break;

    case SOURCE_URL:
      if (value == null) {
        unsetSourceUrl();
      } else {
        setSourceUrl((String)value);
      }
      break;

    case AREA_CODE:
      if (value == null) {
        unsetAreaCode();
      } else {
        setAreaCode((Long)value);
      }
      break;

    case SPECIAL_ID:
      if (value == null) {
        unsetSpecialId();
      } else {
        setSpecialId((Long)value);
      }
      break;

    case SPECIAL_TYPE:
      if (value == null) {
        unsetSpecialType();
      } else {
        setSpecialType((Integer)value);
      }
      break;

    case HIGHLIGHT_TEXT:
      if (value == null) {
        unsetHighlightText();
      } else {
        setHighlightText((String)value);
      }
      break;

    case HIGHLIGHT_WORDS:
      if (value == null) {
        unsetHighlightWords();
      } else {
        setHighlightWords((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case BP_ID:
      return Long.valueOf(getBpId());

    case QUESTION_ID:
      return Long.valueOf(getQuestionId());

    case CONTENT:
      return getContent();

    case TAG_IDS:
      return getTagIds();

    case SOURCE:
      return Integer.valueOf(getSource());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case PUBLISH_TIME:
      return Long.valueOf(getPublishTime());

    case STATUS:
      return Integer.valueOf(getStatus());

    case CREATE_HOST:
      return Long.valueOf(getCreateHost());

    case CREATE_PORT:
      return Integer.valueOf(getCreatePort());

    case UPDATE_HOST:
      return Long.valueOf(getUpdateHost());

    case UPDATE_PORT:
      return Integer.valueOf(getUpdatePort());

    case SOURCE_URL:
      return getSourceUrl();

    case AREA_CODE:
      return Long.valueOf(getAreaCode());

    case SPECIAL_ID:
      return Long.valueOf(getSpecialId());

    case SPECIAL_TYPE:
      return Integer.valueOf(getSpecialType());

    case HIGHLIGHT_TEXT:
      return getHighlightText();

    case HIGHLIGHT_WORDS:
      return getHighlightWords();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case BP_ID:
      return isSetBpId();
    case QUESTION_ID:
      return isSetQuestionId();
    case CONTENT:
      return isSetContent();
    case TAG_IDS:
      return isSetTagIds();
    case SOURCE:
      return isSetSource();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case PUBLISH_TIME:
      return isSetPublishTime();
    case STATUS:
      return isSetStatus();
    case CREATE_HOST:
      return isSetCreateHost();
    case CREATE_PORT:
      return isSetCreatePort();
    case UPDATE_HOST:
      return isSetUpdateHost();
    case UPDATE_PORT:
      return isSetUpdatePort();
    case SOURCE_URL:
      return isSetSourceUrl();
    case AREA_CODE:
      return isSetAreaCode();
    case SPECIAL_ID:
      return isSetSpecialId();
    case SPECIAL_TYPE:
      return isSetSpecialType();
    case HIGHLIGHT_TEXT:
      return isSetHighlightText();
    case HIGHLIGHT_WORDS:
      return isSetHighlightWords();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TEliteAnswer)
      return this.equals((TEliteAnswer)that);
    return false;
  }

  public boolean equals(TEliteAnswer that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_bpId = true;
    boolean that_present_bpId = true;
    if (this_present_bpId || that_present_bpId) {
      if (!(this_present_bpId && that_present_bpId))
        return false;
      if (this.bpId != that.bpId)
        return false;
    }

    boolean this_present_questionId = true;
    boolean that_present_questionId = true;
    if (this_present_questionId || that_present_questionId) {
      if (!(this_present_questionId && that_present_questionId))
        return false;
      if (this.questionId != that.questionId)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_tagIds = true && this.isSetTagIds();
    boolean that_present_tagIds = true && that.isSetTagIds();
    if (this_present_tagIds || that_present_tagIds) {
      if (!(this_present_tagIds && that_present_tagIds))
        return false;
      if (!this.tagIds.equals(that.tagIds))
        return false;
    }

    boolean this_present_source = true;
    boolean that_present_source = true;
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_publishTime = true;
    boolean that_present_publishTime = true;
    if (this_present_publishTime || that_present_publishTime) {
      if (!(this_present_publishTime && that_present_publishTime))
        return false;
      if (this.publishTime != that.publishTime)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_createHost = true;
    boolean that_present_createHost = true;
    if (this_present_createHost || that_present_createHost) {
      if (!(this_present_createHost && that_present_createHost))
        return false;
      if (this.createHost != that.createHost)
        return false;
    }

    boolean this_present_createPort = true;
    boolean that_present_createPort = true;
    if (this_present_createPort || that_present_createPort) {
      if (!(this_present_createPort && that_present_createPort))
        return false;
      if (this.createPort != that.createPort)
        return false;
    }

    boolean this_present_updateHost = true;
    boolean that_present_updateHost = true;
    if (this_present_updateHost || that_present_updateHost) {
      if (!(this_present_updateHost && that_present_updateHost))
        return false;
      if (this.updateHost != that.updateHost)
        return false;
    }

    boolean this_present_updatePort = true;
    boolean that_present_updatePort = true;
    if (this_present_updatePort || that_present_updatePort) {
      if (!(this_present_updatePort && that_present_updatePort))
        return false;
      if (this.updatePort != that.updatePort)
        return false;
    }

    boolean this_present_sourceUrl = true && this.isSetSourceUrl();
    boolean that_present_sourceUrl = true && that.isSetSourceUrl();
    if (this_present_sourceUrl || that_present_sourceUrl) {
      if (!(this_present_sourceUrl && that_present_sourceUrl))
        return false;
      if (!this.sourceUrl.equals(that.sourceUrl))
        return false;
    }

    boolean this_present_areaCode = true;
    boolean that_present_areaCode = true;
    if (this_present_areaCode || that_present_areaCode) {
      if (!(this_present_areaCode && that_present_areaCode))
        return false;
      if (this.areaCode != that.areaCode)
        return false;
    }

    boolean this_present_specialId = true;
    boolean that_present_specialId = true;
    if (this_present_specialId || that_present_specialId) {
      if (!(this_present_specialId && that_present_specialId))
        return false;
      if (this.specialId != that.specialId)
        return false;
    }

    boolean this_present_specialType = true;
    boolean that_present_specialType = true;
    if (this_present_specialType || that_present_specialType) {
      if (!(this_present_specialType && that_present_specialType))
        return false;
      if (this.specialType != that.specialType)
        return false;
    }

    boolean this_present_highlightText = true && this.isSetHighlightText();
    boolean that_present_highlightText = true && that.isSetHighlightText();
    if (this_present_highlightText || that_present_highlightText) {
      if (!(this_present_highlightText && that_present_highlightText))
        return false;
      if (!this.highlightText.equals(that.highlightText))
        return false;
    }

    boolean this_present_highlightWords = true && this.isSetHighlightWords();
    boolean that_present_highlightWords = true && that.isSetHighlightWords();
    if (this_present_highlightWords || that_present_highlightWords) {
      if (!(this_present_highlightWords && that_present_highlightWords))
        return false;
      if (!this.highlightWords.equals(that.highlightWords))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TEliteAnswer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TEliteAnswer typedOther = (TEliteAnswer)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBpId()).compareTo(typedOther.isSetBpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bpId, typedOther.bpId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionId()).compareTo(typedOther.isSetQuestionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionId, typedOther.questionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagIds()).compareTo(typedOther.isSetTagIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagIds, typedOther.tagIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishTime()).compareTo(typedOther.isSetPublishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishTime, typedOther.publishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateHost()).compareTo(typedOther.isSetCreateHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createHost, typedOther.createHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatePort()).compareTo(typedOther.isSetCreatePort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatePort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createPort, typedOther.createPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateHost()).compareTo(typedOther.isSetUpdateHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateHost, typedOther.updateHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatePort()).compareTo(typedOther.isSetUpdatePort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatePort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatePort, typedOther.updatePort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceUrl()).compareTo(typedOther.isSetSourceUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceUrl, typedOther.sourceUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreaCode()).compareTo(typedOther.isSetAreaCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaCode, typedOther.areaCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecialId()).compareTo(typedOther.isSetSpecialId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecialId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialId, typedOther.specialId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecialType()).compareTo(typedOther.isSetSpecialType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecialType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialType, typedOther.specialType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighlightText()).compareTo(typedOther.isSetHighlightText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighlightText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highlightText, typedOther.highlightText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighlightWords()).compareTo(typedOther.isSetHighlightWords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighlightWords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highlightWords, typedOther.highlightWords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TEliteAnswer(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bpId:");
    sb.append(this.bpId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionId:");
    sb.append(this.questionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagIds:");
    if (this.tagIds == null) {
      sb.append("null");
    } else {
      sb.append(this.tagIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    sb.append(this.source);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("publishTime:");
    sb.append(this.publishTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createHost:");
    sb.append(this.createHost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createPort:");
    sb.append(this.createPort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateHost:");
    sb.append(this.updateHost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatePort:");
    sb.append(this.updatePort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceUrl:");
    if (this.sourceUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("areaCode:");
    sb.append(this.areaCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("specialId:");
    sb.append(this.specialId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("specialType:");
    sb.append(this.specialType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("highlightText:");
    if (this.highlightText == null) {
      sb.append("null");
    } else {
      sb.append(this.highlightText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("highlightWords:");
    if (this.highlightWords == null) {
      sb.append("null");
    } else {
      sb.append(this.highlightWords);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEliteAnswerStandardSchemeFactory implements SchemeFactory {
    public TEliteAnswerStandardScheme getScheme() {
      return new TEliteAnswerStandardScheme();
    }
  }

  private static class TEliteAnswerStandardScheme extends StandardScheme<TEliteAnswer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEliteAnswer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bpId = iprot.readI64();
              struct.setBpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUESTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.questionId = iprot.readI64();
              struct.setQuestionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TAG_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tagIds = iprot.readString();
              struct.setTagIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.source = iprot.readI32();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PUBLISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.publishTime = iprot.readI64();
              struct.setPublishTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createHost = iprot.readI64();
              struct.setCreateHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATE_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createPort = iprot.readI32();
              struct.setCreatePortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UPDATE_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateHost = iprot.readI64();
              struct.setUpdateHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UPDATE_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updatePort = iprot.readI32();
              struct.setUpdatePortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SOURCE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceUrl = iprot.readString();
              struct.setSourceUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // AREA_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.areaCode = iprot.readI64();
              struct.setAreaCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SPECIAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.specialId = iprot.readI64();
              struct.setSpecialIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SPECIAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.specialType = iprot.readI32();
              struct.setSpecialTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // HIGHLIGHT_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.highlightText = iprot.readString();
              struct.setHighlightTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // HIGHLIGHT_WORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.highlightWords = iprot.readString();
              struct.setHighlightWordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEliteAnswer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BP_ID_FIELD_DESC);
      oprot.writeI64(struct.bpId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUESTION_ID_FIELD_DESC);
      oprot.writeI64(struct.questionId);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.tagIds != null) {
        oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
        oprot.writeString(struct.tagIds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SOURCE_FIELD_DESC);
      oprot.writeI32(struct.source);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUBLISH_TIME_FIELD_DESC);
      oprot.writeI64(struct.publishTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_HOST_FIELD_DESC);
      oprot.writeI64(struct.createHost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_PORT_FIELD_DESC);
      oprot.writeI32(struct.createPort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_HOST_FIELD_DESC);
      oprot.writeI64(struct.updateHost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_PORT_FIELD_DESC);
      oprot.writeI32(struct.updatePort);
      oprot.writeFieldEnd();
      if (struct.sourceUrl != null) {
        oprot.writeFieldBegin(SOURCE_URL_FIELD_DESC);
        oprot.writeString(struct.sourceUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AREA_CODE_FIELD_DESC);
      oprot.writeI64(struct.areaCode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPECIAL_ID_FIELD_DESC);
      oprot.writeI64(struct.specialId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPECIAL_TYPE_FIELD_DESC);
      oprot.writeI32(struct.specialType);
      oprot.writeFieldEnd();
      if (struct.highlightText != null) {
        oprot.writeFieldBegin(HIGHLIGHT_TEXT_FIELD_DESC);
        oprot.writeString(struct.highlightText);
        oprot.writeFieldEnd();
      }
      if (struct.highlightWords != null) {
        oprot.writeFieldBegin(HIGHLIGHT_WORDS_FIELD_DESC);
        oprot.writeString(struct.highlightWords);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEliteAnswerTupleSchemeFactory implements SchemeFactory {
    public TEliteAnswerTupleScheme getScheme() {
      return new TEliteAnswerTupleScheme();
    }
  }

  private static class TEliteAnswerTupleScheme extends TupleScheme<TEliteAnswer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEliteAnswer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetBpId()) {
        optionals.set(1);
      }
      if (struct.isSetQuestionId()) {
        optionals.set(2);
      }
      if (struct.isSetContent()) {
        optionals.set(3);
      }
      if (struct.isSetTagIds()) {
        optionals.set(4);
      }
      if (struct.isSetSource()) {
        optionals.set(5);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(6);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(7);
      }
      if (struct.isSetPublishTime()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      if (struct.isSetCreateHost()) {
        optionals.set(10);
      }
      if (struct.isSetCreatePort()) {
        optionals.set(11);
      }
      if (struct.isSetUpdateHost()) {
        optionals.set(12);
      }
      if (struct.isSetUpdatePort()) {
        optionals.set(13);
      }
      if (struct.isSetSourceUrl()) {
        optionals.set(14);
      }
      if (struct.isSetAreaCode()) {
        optionals.set(15);
      }
      if (struct.isSetSpecialId()) {
        optionals.set(16);
      }
      if (struct.isSetSpecialType()) {
        optionals.set(17);
      }
      if (struct.isSetHighlightText()) {
        optionals.set(18);
      }
      if (struct.isSetHighlightWords()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetBpId()) {
        oprot.writeI64(struct.bpId);
      }
      if (struct.isSetQuestionId()) {
        oprot.writeI64(struct.questionId);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetTagIds()) {
        oprot.writeString(struct.tagIds);
      }
      if (struct.isSetSource()) {
        oprot.writeI32(struct.source);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetPublishTime()) {
        oprot.writeI64(struct.publishTime);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCreateHost()) {
        oprot.writeI64(struct.createHost);
      }
      if (struct.isSetCreatePort()) {
        oprot.writeI32(struct.createPort);
      }
      if (struct.isSetUpdateHost()) {
        oprot.writeI64(struct.updateHost);
      }
      if (struct.isSetUpdatePort()) {
        oprot.writeI32(struct.updatePort);
      }
      if (struct.isSetSourceUrl()) {
        oprot.writeString(struct.sourceUrl);
      }
      if (struct.isSetAreaCode()) {
        oprot.writeI64(struct.areaCode);
      }
      if (struct.isSetSpecialId()) {
        oprot.writeI64(struct.specialId);
      }
      if (struct.isSetSpecialType()) {
        oprot.writeI32(struct.specialType);
      }
      if (struct.isSetHighlightText()) {
        oprot.writeString(struct.highlightText);
      }
      if (struct.isSetHighlightWords()) {
        oprot.writeString(struct.highlightWords);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEliteAnswer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bpId = iprot.readI64();
        struct.setBpIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.questionId = iprot.readI64();
        struct.setQuestionIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tagIds = iprot.readString();
        struct.setTagIdsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.source = iprot.readI32();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.publishTime = iprot.readI64();
        struct.setPublishTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createHost = iprot.readI64();
        struct.setCreateHostIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createPort = iprot.readI32();
        struct.setCreatePortIsSet(true);
      }
      if (incoming.get(12)) {
        struct.updateHost = iprot.readI64();
        struct.setUpdateHostIsSet(true);
      }
      if (incoming.get(13)) {
        struct.updatePort = iprot.readI32();
        struct.setUpdatePortIsSet(true);
      }
      if (incoming.get(14)) {
        struct.sourceUrl = iprot.readString();
        struct.setSourceUrlIsSet(true);
      }
      if (incoming.get(15)) {
        struct.areaCode = iprot.readI64();
        struct.setAreaCodeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.specialId = iprot.readI64();
        struct.setSpecialIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.specialType = iprot.readI32();
        struct.setSpecialTypeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.highlightText = iprot.readString();
        struct.setHighlightTextIsSet(true);
      }
      if (incoming.get(19)) {
        struct.highlightWords = iprot.readString();
        struct.setHighlightWordsIsSet(true);
      }
    }
  }

}

