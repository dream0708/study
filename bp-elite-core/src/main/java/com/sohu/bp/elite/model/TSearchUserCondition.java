/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sohu.bp.elite.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TSearchUserCondition implements org.apache.thrift.TBase<TSearchUserCondition, TSearchUserCondition._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSearchUserCondition");

  private static final org.apache.thrift.protocol.TField BP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bpId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keywords", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagIds", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MIN_GRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("minGrade", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField MAX_GRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxGrade", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MIN_CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("minCreateTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField MAX_CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCreateTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField MIN_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("minUpdateTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField MAX_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxUpdateTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField MIN_BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("minBirthday", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField MAX_BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("maxBirthday", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField SORT_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("sortField", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField SORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sortType", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("from", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField MIN_FIRST_LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("minFirstLoginTime", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField MAX_FIRST_LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxFirstLoginTime", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField MIN_LAST_LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("minLastLoginTime", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField MAX_LAST_LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxLastLoginTIme", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField FIRST_LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("firstLogin", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("identity", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField MIN_QUESTION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("minQuestionNum", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField MAX_QUESTION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("maxQuestionNum", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField MIN_ANSWER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("minAnswerNum", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField MAX_ANSWER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("maxAnswerNum", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField AUTO_COMPLETE_FIELD_DESC = new org.apache.thrift.protocol.TField("autoComplete", org.apache.thrift.protocol.TType.I32, (short)28);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSearchUserConditionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSearchUserConditionTupleSchemeFactory());
  }

  public long bpId; // required
  public int gender; // required
  public String keywords; // required
  public String tagIds; // required
  public int status; // required
  public int minGrade; // required
  public int maxGrade; // required
  public long minCreateTime; // required
  public long maxCreateTime; // required
  public long minUpdateTime; // required
  public long maxUpdateTime; // required
  public long minBirthday; // required
  public long maxBirthday; // required
  public String sortField; // required
  /**
   * 
   * @see SortType
   */
  public SortType sortType; // required
  public int from; // required
  public int count; // required
  public long minFirstLoginTime; // required
  public long maxFirstLoginTime; // required
  public long minLastLoginTime; // required
  public long maxLastLoginTIme; // required
  public String firstLogin; // required
  public int identity; // required
  public int minQuestionNum; // required
  public int maxQuestionNum; // required
  public int minAnswerNum; // required
  public int maxAnswerNum; // required
  public int autoComplete; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BP_ID((short)1, "bpId"),
    GENDER((short)2, "gender"),
    KEYWORDS((short)3, "keywords"),
    TAG_IDS((short)4, "tagIds"),
    STATUS((short)5, "status"),
    MIN_GRADE((short)6, "minGrade"),
    MAX_GRADE((short)7, "maxGrade"),
    MIN_CREATE_TIME((short)8, "minCreateTime"),
    MAX_CREATE_TIME((short)9, "maxCreateTime"),
    MIN_UPDATE_TIME((short)10, "minUpdateTime"),
    MAX_UPDATE_TIME((short)11, "maxUpdateTime"),
    MIN_BIRTHDAY((short)12, "minBirthday"),
    MAX_BIRTHDAY((short)13, "maxBirthday"),
    SORT_FIELD((short)14, "sortField"),
    /**
     * 
     * @see SortType
     */
    SORT_TYPE((short)15, "sortType"),
    FROM((short)16, "from"),
    COUNT((short)17, "count"),
    MIN_FIRST_LOGIN_TIME((short)18, "minFirstLoginTime"),
    MAX_FIRST_LOGIN_TIME((short)19, "maxFirstLoginTime"),
    MIN_LAST_LOGIN_TIME((short)20, "minLastLoginTime"),
    MAX_LAST_LOGIN_TIME((short)21, "maxLastLoginTIme"),
    FIRST_LOGIN((short)22, "firstLogin"),
    IDENTITY((short)23, "identity"),
    MIN_QUESTION_NUM((short)24, "minQuestionNum"),
    MAX_QUESTION_NUM((short)25, "maxQuestionNum"),
    MIN_ANSWER_NUM((short)26, "minAnswerNum"),
    MAX_ANSWER_NUM((short)27, "maxAnswerNum"),
    AUTO_COMPLETE((short)28, "autoComplete");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BP_ID
          return BP_ID;
        case 2: // GENDER
          return GENDER;
        case 3: // KEYWORDS
          return KEYWORDS;
        case 4: // TAG_IDS
          return TAG_IDS;
        case 5: // STATUS
          return STATUS;
        case 6: // MIN_GRADE
          return MIN_GRADE;
        case 7: // MAX_GRADE
          return MAX_GRADE;
        case 8: // MIN_CREATE_TIME
          return MIN_CREATE_TIME;
        case 9: // MAX_CREATE_TIME
          return MAX_CREATE_TIME;
        case 10: // MIN_UPDATE_TIME
          return MIN_UPDATE_TIME;
        case 11: // MAX_UPDATE_TIME
          return MAX_UPDATE_TIME;
        case 12: // MIN_BIRTHDAY
          return MIN_BIRTHDAY;
        case 13: // MAX_BIRTHDAY
          return MAX_BIRTHDAY;
        case 14: // SORT_FIELD
          return SORT_FIELD;
        case 15: // SORT_TYPE
          return SORT_TYPE;
        case 16: // FROM
          return FROM;
        case 17: // COUNT
          return COUNT;
        case 18: // MIN_FIRST_LOGIN_TIME
          return MIN_FIRST_LOGIN_TIME;
        case 19: // MAX_FIRST_LOGIN_TIME
          return MAX_FIRST_LOGIN_TIME;
        case 20: // MIN_LAST_LOGIN_TIME
          return MIN_LAST_LOGIN_TIME;
        case 21: // MAX_LAST_LOGIN_TIME
          return MAX_LAST_LOGIN_TIME;
        case 22: // FIRST_LOGIN
          return FIRST_LOGIN;
        case 23: // IDENTITY
          return IDENTITY;
        case 24: // MIN_QUESTION_NUM
          return MIN_QUESTION_NUM;
        case 25: // MAX_QUESTION_NUM
          return MAX_QUESTION_NUM;
        case 26: // MIN_ANSWER_NUM
          return MIN_ANSWER_NUM;
        case 27: // MAX_ANSWER_NUM
          return MAX_ANSWER_NUM;
        case 28: // AUTO_COMPLETE
          return AUTO_COMPLETE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BPID_ISSET_ID = 0;
  private static final int __GENDER_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private static final int __MINGRADE_ISSET_ID = 3;
  private static final int __MAXGRADE_ISSET_ID = 4;
  private static final int __MINCREATETIME_ISSET_ID = 5;
  private static final int __MAXCREATETIME_ISSET_ID = 6;
  private static final int __MINUPDATETIME_ISSET_ID = 7;
  private static final int __MAXUPDATETIME_ISSET_ID = 8;
  private static final int __MINBIRTHDAY_ISSET_ID = 9;
  private static final int __MAXBIRTHDAY_ISSET_ID = 10;
  private static final int __FROM_ISSET_ID = 11;
  private static final int __COUNT_ISSET_ID = 12;
  private static final int __MINFIRSTLOGINTIME_ISSET_ID = 13;
  private static final int __MAXFIRSTLOGINTIME_ISSET_ID = 14;
  private static final int __MINLASTLOGINTIME_ISSET_ID = 15;
  private static final int __MAXLASTLOGINTIME_ISSET_ID = 16;
  private static final int __IDENTITY_ISSET_ID = 17;
  private static final int __MINQUESTIONNUM_ISSET_ID = 18;
  private static final int __MAXQUESTIONNUM_ISSET_ID = 19;
  private static final int __MINANSWERNUM_ISSET_ID = 20;
  private static final int __MAXANSWERNUM_ISSET_ID = 21;
  private static final int __AUTOCOMPLETE_ISSET_ID = 22;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BP_ID, new org.apache.thrift.meta_data.FieldMetaData("bpId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("keywords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tagIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_GRADE, new org.apache.thrift.meta_data.FieldMetaData("minGrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_GRADE, new org.apache.thrift.meta_data.FieldMetaData("maxGrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("minCreateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("maxCreateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("minUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("maxUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("minBirthday", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("maxBirthday", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SORT_FIELD, new org.apache.thrift.meta_data.FieldMetaData("sortField", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sortType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SortType.class)));
    tmpMap.put(_Fields.FROM, new org.apache.thrift.meta_data.FieldMetaData("from", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_FIRST_LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("minFirstLoginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_FIRST_LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("maxFirstLoginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_LAST_LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("minLastLoginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_LAST_LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("maxLastLoginTIme", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FIRST_LOGIN, new org.apache.thrift.meta_data.FieldMetaData("firstLogin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("identity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_QUESTION_NUM, new org.apache.thrift.meta_data.FieldMetaData("minQuestionNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_QUESTION_NUM, new org.apache.thrift.meta_data.FieldMetaData("maxQuestionNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_ANSWER_NUM, new org.apache.thrift.meta_data.FieldMetaData("minAnswerNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_ANSWER_NUM, new org.apache.thrift.meta_data.FieldMetaData("maxAnswerNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUTO_COMPLETE, new org.apache.thrift.meta_data.FieldMetaData("autoComplete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSearchUserCondition.class, metaDataMap);
  }

  public TSearchUserCondition() {
    this.bpId = -1L;

    this.gender = -1;

    this.keywords = "";

    this.tagIds = "";

    this.status = -1;

    this.minGrade = -1;

    this.maxGrade = -1;

    this.minCreateTime = -1L;

    this.maxCreateTime = -1L;

    this.minUpdateTime = -1L;

    this.maxUpdateTime = -1L;

    this.minBirthday = -1L;

    this.maxBirthday = -1L;

    this.sortField = "";

    this.sortType = com.sohu.bp.elite.model.SortType.ASC;

    this.from = 0;

    this.count = 0;

    this.minFirstLoginTime = -1L;

    this.maxFirstLoginTime = -1L;

    this.minLastLoginTime = -1L;

    this.maxLastLoginTIme = -1L;

    this.firstLogin = "";

    this.identity = -1;

    this.minQuestionNum = -1;

    this.maxQuestionNum = -1;

    this.minAnswerNum = -1;

    this.maxAnswerNum = -1;

    this.autoComplete = -1;

  }

  public TSearchUserCondition(
    long bpId,
    int gender,
    String keywords,
    String tagIds,
    int status,
    int minGrade,
    int maxGrade,
    long minCreateTime,
    long maxCreateTime,
    long minUpdateTime,
    long maxUpdateTime,
    long minBirthday,
    long maxBirthday,
    String sortField,
    SortType sortType,
    int from,
    int count,
    long minFirstLoginTime,
    long maxFirstLoginTime,
    long minLastLoginTime,
    long maxLastLoginTIme,
    String firstLogin,
    int identity,
    int minQuestionNum,
    int maxQuestionNum,
    int minAnswerNum,
    int maxAnswerNum,
    int autoComplete)
  {
    this();
    this.bpId = bpId;
    setBpIdIsSet(true);
    this.gender = gender;
    setGenderIsSet(true);
    this.keywords = keywords;
    this.tagIds = tagIds;
    this.status = status;
    setStatusIsSet(true);
    this.minGrade = minGrade;
    setMinGradeIsSet(true);
    this.maxGrade = maxGrade;
    setMaxGradeIsSet(true);
    this.minCreateTime = minCreateTime;
    setMinCreateTimeIsSet(true);
    this.maxCreateTime = maxCreateTime;
    setMaxCreateTimeIsSet(true);
    this.minUpdateTime = minUpdateTime;
    setMinUpdateTimeIsSet(true);
    this.maxUpdateTime = maxUpdateTime;
    setMaxUpdateTimeIsSet(true);
    this.minBirthday = minBirthday;
    setMinBirthdayIsSet(true);
    this.maxBirthday = maxBirthday;
    setMaxBirthdayIsSet(true);
    this.sortField = sortField;
    this.sortType = sortType;
    this.from = from;
    setFromIsSet(true);
    this.count = count;
    setCountIsSet(true);
    this.minFirstLoginTime = minFirstLoginTime;
    setMinFirstLoginTimeIsSet(true);
    this.maxFirstLoginTime = maxFirstLoginTime;
    setMaxFirstLoginTimeIsSet(true);
    this.minLastLoginTime = minLastLoginTime;
    setMinLastLoginTimeIsSet(true);
    this.maxLastLoginTIme = maxLastLoginTIme;
    setMaxLastLoginTImeIsSet(true);
    this.firstLogin = firstLogin;
    this.identity = identity;
    setIdentityIsSet(true);
    this.minQuestionNum = minQuestionNum;
    setMinQuestionNumIsSet(true);
    this.maxQuestionNum = maxQuestionNum;
    setMaxQuestionNumIsSet(true);
    this.minAnswerNum = minAnswerNum;
    setMinAnswerNumIsSet(true);
    this.maxAnswerNum = maxAnswerNum;
    setMaxAnswerNumIsSet(true);
    this.autoComplete = autoComplete;
    setAutoCompleteIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSearchUserCondition(TSearchUserCondition other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bpId = other.bpId;
    this.gender = other.gender;
    if (other.isSetKeywords()) {
      this.keywords = other.keywords;
    }
    if (other.isSetTagIds()) {
      this.tagIds = other.tagIds;
    }
    this.status = other.status;
    this.minGrade = other.minGrade;
    this.maxGrade = other.maxGrade;
    this.minCreateTime = other.minCreateTime;
    this.maxCreateTime = other.maxCreateTime;
    this.minUpdateTime = other.minUpdateTime;
    this.maxUpdateTime = other.maxUpdateTime;
    this.minBirthday = other.minBirthday;
    this.maxBirthday = other.maxBirthday;
    if (other.isSetSortField()) {
      this.sortField = other.sortField;
    }
    if (other.isSetSortType()) {
      this.sortType = other.sortType;
    }
    this.from = other.from;
    this.count = other.count;
    this.minFirstLoginTime = other.minFirstLoginTime;
    this.maxFirstLoginTime = other.maxFirstLoginTime;
    this.minLastLoginTime = other.minLastLoginTime;
    this.maxLastLoginTIme = other.maxLastLoginTIme;
    if (other.isSetFirstLogin()) {
      this.firstLogin = other.firstLogin;
    }
    this.identity = other.identity;
    this.minQuestionNum = other.minQuestionNum;
    this.maxQuestionNum = other.maxQuestionNum;
    this.minAnswerNum = other.minAnswerNum;
    this.maxAnswerNum = other.maxAnswerNum;
    this.autoComplete = other.autoComplete;
  }

  public TSearchUserCondition deepCopy() {
    return new TSearchUserCondition(this);
  }

  @Override
  public void clear() {
    this.bpId = -1L;

    this.gender = -1;

    this.keywords = "";

    this.tagIds = "";

    this.status = -1;

    this.minGrade = -1;

    this.maxGrade = -1;

    this.minCreateTime = -1L;

    this.maxCreateTime = -1L;

    this.minUpdateTime = -1L;

    this.maxUpdateTime = -1L;

    this.minBirthday = -1L;

    this.maxBirthday = -1L;

    this.sortField = "";

    this.sortType = com.sohu.bp.elite.model.SortType.ASC;

    this.from = 0;

    this.count = 0;

    this.minFirstLoginTime = -1L;

    this.maxFirstLoginTime = -1L;

    this.minLastLoginTime = -1L;

    this.maxLastLoginTIme = -1L;

    this.firstLogin = "";

    this.identity = -1;

    this.minQuestionNum = -1;

    this.maxQuestionNum = -1;

    this.minAnswerNum = -1;

    this.maxAnswerNum = -1;

    this.autoComplete = -1;

  }

  public long getBpId() {
    return this.bpId;
  }

  public TSearchUserCondition setBpId(long bpId) {
    this.bpId = bpId;
    setBpIdIsSet(true);
    return this;
  }

  public void unsetBpId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BPID_ISSET_ID);
  }

  /** Returns true if field bpId is set (has been assigned a value) and false otherwise */
  public boolean isSetBpId() {
    return EncodingUtils.testBit(__isset_bitfield, __BPID_ISSET_ID);
  }

  public void setBpIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BPID_ISSET_ID, value);
  }

  public int getGender() {
    return this.gender;
  }

  public TSearchUserCondition setGender(int gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  public String getKeywords() {
    return this.keywords;
  }

  public TSearchUserCondition setKeywords(String keywords) {
    this.keywords = keywords;
    return this;
  }

  public void unsetKeywords() {
    this.keywords = null;
  }

  /** Returns true if field keywords is set (has been assigned a value) and false otherwise */
  public boolean isSetKeywords() {
    return this.keywords != null;
  }

  public void setKeywordsIsSet(boolean value) {
    if (!value) {
      this.keywords = null;
    }
  }

  public String getTagIds() {
    return this.tagIds;
  }

  public TSearchUserCondition setTagIds(String tagIds) {
    this.tagIds = tagIds;
    return this;
  }

  public void unsetTagIds() {
    this.tagIds = null;
  }

  /** Returns true if field tagIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTagIds() {
    return this.tagIds != null;
  }

  public void setTagIdsIsSet(boolean value) {
    if (!value) {
      this.tagIds = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public TSearchUserCondition setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getMinGrade() {
    return this.minGrade;
  }

  public TSearchUserCondition setMinGrade(int minGrade) {
    this.minGrade = minGrade;
    setMinGradeIsSet(true);
    return this;
  }

  public void unsetMinGrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINGRADE_ISSET_ID);
  }

  /** Returns true if field minGrade is set (has been assigned a value) and false otherwise */
  public boolean isSetMinGrade() {
    return EncodingUtils.testBit(__isset_bitfield, __MINGRADE_ISSET_ID);
  }

  public void setMinGradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINGRADE_ISSET_ID, value);
  }

  public int getMaxGrade() {
    return this.maxGrade;
  }

  public TSearchUserCondition setMaxGrade(int maxGrade) {
    this.maxGrade = maxGrade;
    setMaxGradeIsSet(true);
    return this;
  }

  public void unsetMaxGrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXGRADE_ISSET_ID);
  }

  /** Returns true if field maxGrade is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxGrade() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXGRADE_ISSET_ID);
  }

  public void setMaxGradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXGRADE_ISSET_ID, value);
  }

  public long getMinCreateTime() {
    return this.minCreateTime;
  }

  public TSearchUserCondition setMinCreateTime(long minCreateTime) {
    this.minCreateTime = minCreateTime;
    setMinCreateTimeIsSet(true);
    return this;
  }

  public void unsetMinCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINCREATETIME_ISSET_ID);
  }

  /** Returns true if field minCreateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMinCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MINCREATETIME_ISSET_ID);
  }

  public void setMinCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINCREATETIME_ISSET_ID, value);
  }

  public long getMaxCreateTime() {
    return this.maxCreateTime;
  }

  public TSearchUserCondition setMaxCreateTime(long maxCreateTime) {
    this.maxCreateTime = maxCreateTime;
    setMaxCreateTimeIsSet(true);
    return this;
  }

  public void unsetMaxCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXCREATETIME_ISSET_ID);
  }

  /** Returns true if field maxCreateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXCREATETIME_ISSET_ID);
  }

  public void setMaxCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXCREATETIME_ISSET_ID, value);
  }

  public long getMinUpdateTime() {
    return this.minUpdateTime;
  }

  public TSearchUserCondition setMinUpdateTime(long minUpdateTime) {
    this.minUpdateTime = minUpdateTime;
    setMinUpdateTimeIsSet(true);
    return this;
  }

  public void unsetMinUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINUPDATETIME_ISSET_ID);
  }

  /** Returns true if field minUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMinUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MINUPDATETIME_ISSET_ID);
  }

  public void setMinUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINUPDATETIME_ISSET_ID, value);
  }

  public long getMaxUpdateTime() {
    return this.maxUpdateTime;
  }

  public TSearchUserCondition setMaxUpdateTime(long maxUpdateTime) {
    this.maxUpdateTime = maxUpdateTime;
    setMaxUpdateTimeIsSet(true);
    return this;
  }

  public void unsetMaxUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXUPDATETIME_ISSET_ID);
  }

  /** Returns true if field maxUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXUPDATETIME_ISSET_ID);
  }

  public void setMaxUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXUPDATETIME_ISSET_ID, value);
  }

  public long getMinBirthday() {
    return this.minBirthday;
  }

  public TSearchUserCondition setMinBirthday(long minBirthday) {
    this.minBirthday = minBirthday;
    setMinBirthdayIsSet(true);
    return this;
  }

  public void unsetMinBirthday() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINBIRTHDAY_ISSET_ID);
  }

  /** Returns true if field minBirthday is set (has been assigned a value) and false otherwise */
  public boolean isSetMinBirthday() {
    return EncodingUtils.testBit(__isset_bitfield, __MINBIRTHDAY_ISSET_ID);
  }

  public void setMinBirthdayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINBIRTHDAY_ISSET_ID, value);
  }

  public long getMaxBirthday() {
    return this.maxBirthday;
  }

  public TSearchUserCondition setMaxBirthday(long maxBirthday) {
    this.maxBirthday = maxBirthday;
    setMaxBirthdayIsSet(true);
    return this;
  }

  public void unsetMaxBirthday() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXBIRTHDAY_ISSET_ID);
  }

  /** Returns true if field maxBirthday is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxBirthday() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXBIRTHDAY_ISSET_ID);
  }

  public void setMaxBirthdayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXBIRTHDAY_ISSET_ID, value);
  }

  public String getSortField() {
    return this.sortField;
  }

  public TSearchUserCondition setSortField(String sortField) {
    this.sortField = sortField;
    return this;
  }

  public void unsetSortField() {
    this.sortField = null;
  }

  /** Returns true if field sortField is set (has been assigned a value) and false otherwise */
  public boolean isSetSortField() {
    return this.sortField != null;
  }

  public void setSortFieldIsSet(boolean value) {
    if (!value) {
      this.sortField = null;
    }
  }

  /**
   * 
   * @see SortType
   */
  public SortType getSortType() {
    return this.sortType;
  }

  /**
   * 
   * @see SortType
   */
  public TSearchUserCondition setSortType(SortType sortType) {
    this.sortType = sortType;
    return this;
  }

  public void unsetSortType() {
    this.sortType = null;
  }

  /** Returns true if field sortType is set (has been assigned a value) and false otherwise */
  public boolean isSetSortType() {
    return this.sortType != null;
  }

  public void setSortTypeIsSet(boolean value) {
    if (!value) {
      this.sortType = null;
    }
  }

  public int getFrom() {
    return this.from;
  }

  public TSearchUserCondition setFrom(int from) {
    this.from = from;
    setFromIsSet(true);
    return this;
  }

  public void unsetFrom() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROM_ISSET_ID);
  }

  /** Returns true if field from is set (has been assigned a value) and false otherwise */
  public boolean isSetFrom() {
    return EncodingUtils.testBit(__isset_bitfield, __FROM_ISSET_ID);
  }

  public void setFromIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROM_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public TSearchUserCondition setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public long getMinFirstLoginTime() {
    return this.minFirstLoginTime;
  }

  public TSearchUserCondition setMinFirstLoginTime(long minFirstLoginTime) {
    this.minFirstLoginTime = minFirstLoginTime;
    setMinFirstLoginTimeIsSet(true);
    return this;
  }

  public void unsetMinFirstLoginTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINFIRSTLOGINTIME_ISSET_ID);
  }

  /** Returns true if field minFirstLoginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMinFirstLoginTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MINFIRSTLOGINTIME_ISSET_ID);
  }

  public void setMinFirstLoginTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINFIRSTLOGINTIME_ISSET_ID, value);
  }

  public long getMaxFirstLoginTime() {
    return this.maxFirstLoginTime;
  }

  public TSearchUserCondition setMaxFirstLoginTime(long maxFirstLoginTime) {
    this.maxFirstLoginTime = maxFirstLoginTime;
    setMaxFirstLoginTimeIsSet(true);
    return this;
  }

  public void unsetMaxFirstLoginTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXFIRSTLOGINTIME_ISSET_ID);
  }

  /** Returns true if field maxFirstLoginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxFirstLoginTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXFIRSTLOGINTIME_ISSET_ID);
  }

  public void setMaxFirstLoginTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXFIRSTLOGINTIME_ISSET_ID, value);
  }

  public long getMinLastLoginTime() {
    return this.minLastLoginTime;
  }

  public TSearchUserCondition setMinLastLoginTime(long minLastLoginTime) {
    this.minLastLoginTime = minLastLoginTime;
    setMinLastLoginTimeIsSet(true);
    return this;
  }

  public void unsetMinLastLoginTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINLASTLOGINTIME_ISSET_ID);
  }

  /** Returns true if field minLastLoginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMinLastLoginTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MINLASTLOGINTIME_ISSET_ID);
  }

  public void setMinLastLoginTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINLASTLOGINTIME_ISSET_ID, value);
  }

  public long getMaxLastLoginTIme() {
    return this.maxLastLoginTIme;
  }

  public TSearchUserCondition setMaxLastLoginTIme(long maxLastLoginTIme) {
    this.maxLastLoginTIme = maxLastLoginTIme;
    setMaxLastLoginTImeIsSet(true);
    return this;
  }

  public void unsetMaxLastLoginTIme() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXLASTLOGINTIME_ISSET_ID);
  }

  /** Returns true if field maxLastLoginTIme is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxLastLoginTIme() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXLASTLOGINTIME_ISSET_ID);
  }

  public void setMaxLastLoginTImeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXLASTLOGINTIME_ISSET_ID, value);
  }

  public String getFirstLogin() {
    return this.firstLogin;
  }

  public TSearchUserCondition setFirstLogin(String firstLogin) {
    this.firstLogin = firstLogin;
    return this;
  }

  public void unsetFirstLogin() {
    this.firstLogin = null;
  }

  /** Returns true if field firstLogin is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstLogin() {
    return this.firstLogin != null;
  }

  public void setFirstLoginIsSet(boolean value) {
    if (!value) {
      this.firstLogin = null;
    }
  }

  public int getIdentity() {
    return this.identity;
  }

  public TSearchUserCondition setIdentity(int identity) {
    this.identity = identity;
    setIdentityIsSet(true);
    return this;
  }

  public void unsetIdentity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDENTITY_ISSET_ID);
  }

  /** Returns true if field identity is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentity() {
    return EncodingUtils.testBit(__isset_bitfield, __IDENTITY_ISSET_ID);
  }

  public void setIdentityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDENTITY_ISSET_ID, value);
  }

  public int getMinQuestionNum() {
    return this.minQuestionNum;
  }

  public TSearchUserCondition setMinQuestionNum(int minQuestionNum) {
    this.minQuestionNum = minQuestionNum;
    setMinQuestionNumIsSet(true);
    return this;
  }

  public void unsetMinQuestionNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINQUESTIONNUM_ISSET_ID);
  }

  /** Returns true if field minQuestionNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMinQuestionNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MINQUESTIONNUM_ISSET_ID);
  }

  public void setMinQuestionNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINQUESTIONNUM_ISSET_ID, value);
  }

  public int getMaxQuestionNum() {
    return this.maxQuestionNum;
  }

  public TSearchUserCondition setMaxQuestionNum(int maxQuestionNum) {
    this.maxQuestionNum = maxQuestionNum;
    setMaxQuestionNumIsSet(true);
    return this;
  }

  public void unsetMaxQuestionNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXQUESTIONNUM_ISSET_ID);
  }

  /** Returns true if field maxQuestionNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxQuestionNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXQUESTIONNUM_ISSET_ID);
  }

  public void setMaxQuestionNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXQUESTIONNUM_ISSET_ID, value);
  }

  public int getMinAnswerNum() {
    return this.minAnswerNum;
  }

  public TSearchUserCondition setMinAnswerNum(int minAnswerNum) {
    this.minAnswerNum = minAnswerNum;
    setMinAnswerNumIsSet(true);
    return this;
  }

  public void unsetMinAnswerNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINANSWERNUM_ISSET_ID);
  }

  /** Returns true if field minAnswerNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMinAnswerNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MINANSWERNUM_ISSET_ID);
  }

  public void setMinAnswerNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINANSWERNUM_ISSET_ID, value);
  }

  public int getMaxAnswerNum() {
    return this.maxAnswerNum;
  }

  public TSearchUserCondition setMaxAnswerNum(int maxAnswerNum) {
    this.maxAnswerNum = maxAnswerNum;
    setMaxAnswerNumIsSet(true);
    return this;
  }

  public void unsetMaxAnswerNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXANSWERNUM_ISSET_ID);
  }

  /** Returns true if field maxAnswerNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxAnswerNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXANSWERNUM_ISSET_ID);
  }

  public void setMaxAnswerNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXANSWERNUM_ISSET_ID, value);
  }

  public int getAutoComplete() {
    return this.autoComplete;
  }

  public TSearchUserCondition setAutoComplete(int autoComplete) {
    this.autoComplete = autoComplete;
    setAutoCompleteIsSet(true);
    return this;
  }

  public void unsetAutoComplete() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUTOCOMPLETE_ISSET_ID);
  }

  /** Returns true if field autoComplete is set (has been assigned a value) and false otherwise */
  public boolean isSetAutoComplete() {
    return EncodingUtils.testBit(__isset_bitfield, __AUTOCOMPLETE_ISSET_ID);
  }

  public void setAutoCompleteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUTOCOMPLETE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BP_ID:
      if (value == null) {
        unsetBpId();
      } else {
        setBpId((Long)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Integer)value);
      }
      break;

    case KEYWORDS:
      if (value == null) {
        unsetKeywords();
      } else {
        setKeywords((String)value);
      }
      break;

    case TAG_IDS:
      if (value == null) {
        unsetTagIds();
      } else {
        setTagIds((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case MIN_GRADE:
      if (value == null) {
        unsetMinGrade();
      } else {
        setMinGrade((Integer)value);
      }
      break;

    case MAX_GRADE:
      if (value == null) {
        unsetMaxGrade();
      } else {
        setMaxGrade((Integer)value);
      }
      break;

    case MIN_CREATE_TIME:
      if (value == null) {
        unsetMinCreateTime();
      } else {
        setMinCreateTime((Long)value);
      }
      break;

    case MAX_CREATE_TIME:
      if (value == null) {
        unsetMaxCreateTime();
      } else {
        setMaxCreateTime((Long)value);
      }
      break;

    case MIN_UPDATE_TIME:
      if (value == null) {
        unsetMinUpdateTime();
      } else {
        setMinUpdateTime((Long)value);
      }
      break;

    case MAX_UPDATE_TIME:
      if (value == null) {
        unsetMaxUpdateTime();
      } else {
        setMaxUpdateTime((Long)value);
      }
      break;

    case MIN_BIRTHDAY:
      if (value == null) {
        unsetMinBirthday();
      } else {
        setMinBirthday((Long)value);
      }
      break;

    case MAX_BIRTHDAY:
      if (value == null) {
        unsetMaxBirthday();
      } else {
        setMaxBirthday((Long)value);
      }
      break;

    case SORT_FIELD:
      if (value == null) {
        unsetSortField();
      } else {
        setSortField((String)value);
      }
      break;

    case SORT_TYPE:
      if (value == null) {
        unsetSortType();
      } else {
        setSortType((SortType)value);
      }
      break;

    case FROM:
      if (value == null) {
        unsetFrom();
      } else {
        setFrom((Integer)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case MIN_FIRST_LOGIN_TIME:
      if (value == null) {
        unsetMinFirstLoginTime();
      } else {
        setMinFirstLoginTime((Long)value);
      }
      break;

    case MAX_FIRST_LOGIN_TIME:
      if (value == null) {
        unsetMaxFirstLoginTime();
      } else {
        setMaxFirstLoginTime((Long)value);
      }
      break;

    case MIN_LAST_LOGIN_TIME:
      if (value == null) {
        unsetMinLastLoginTime();
      } else {
        setMinLastLoginTime((Long)value);
      }
      break;

    case MAX_LAST_LOGIN_TIME:
      if (value == null) {
        unsetMaxLastLoginTIme();
      } else {
        setMaxLastLoginTIme((Long)value);
      }
      break;

    case FIRST_LOGIN:
      if (value == null) {
        unsetFirstLogin();
      } else {
        setFirstLogin((String)value);
      }
      break;

    case IDENTITY:
      if (value == null) {
        unsetIdentity();
      } else {
        setIdentity((Integer)value);
      }
      break;

    case MIN_QUESTION_NUM:
      if (value == null) {
        unsetMinQuestionNum();
      } else {
        setMinQuestionNum((Integer)value);
      }
      break;

    case MAX_QUESTION_NUM:
      if (value == null) {
        unsetMaxQuestionNum();
      } else {
        setMaxQuestionNum((Integer)value);
      }
      break;

    case MIN_ANSWER_NUM:
      if (value == null) {
        unsetMinAnswerNum();
      } else {
        setMinAnswerNum((Integer)value);
      }
      break;

    case MAX_ANSWER_NUM:
      if (value == null) {
        unsetMaxAnswerNum();
      } else {
        setMaxAnswerNum((Integer)value);
      }
      break;

    case AUTO_COMPLETE:
      if (value == null) {
        unsetAutoComplete();
      } else {
        setAutoComplete((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BP_ID:
      return Long.valueOf(getBpId());

    case GENDER:
      return Integer.valueOf(getGender());

    case KEYWORDS:
      return getKeywords();

    case TAG_IDS:
      return getTagIds();

    case STATUS:
      return Integer.valueOf(getStatus());

    case MIN_GRADE:
      return Integer.valueOf(getMinGrade());

    case MAX_GRADE:
      return Integer.valueOf(getMaxGrade());

    case MIN_CREATE_TIME:
      return Long.valueOf(getMinCreateTime());

    case MAX_CREATE_TIME:
      return Long.valueOf(getMaxCreateTime());

    case MIN_UPDATE_TIME:
      return Long.valueOf(getMinUpdateTime());

    case MAX_UPDATE_TIME:
      return Long.valueOf(getMaxUpdateTime());

    case MIN_BIRTHDAY:
      return Long.valueOf(getMinBirthday());

    case MAX_BIRTHDAY:
      return Long.valueOf(getMaxBirthday());

    case SORT_FIELD:
      return getSortField();

    case SORT_TYPE:
      return getSortType();

    case FROM:
      return Integer.valueOf(getFrom());

    case COUNT:
      return Integer.valueOf(getCount());

    case MIN_FIRST_LOGIN_TIME:
      return Long.valueOf(getMinFirstLoginTime());

    case MAX_FIRST_LOGIN_TIME:
      return Long.valueOf(getMaxFirstLoginTime());

    case MIN_LAST_LOGIN_TIME:
      return Long.valueOf(getMinLastLoginTime());

    case MAX_LAST_LOGIN_TIME:
      return Long.valueOf(getMaxLastLoginTIme());

    case FIRST_LOGIN:
      return getFirstLogin();

    case IDENTITY:
      return Integer.valueOf(getIdentity());

    case MIN_QUESTION_NUM:
      return Integer.valueOf(getMinQuestionNum());

    case MAX_QUESTION_NUM:
      return Integer.valueOf(getMaxQuestionNum());

    case MIN_ANSWER_NUM:
      return Integer.valueOf(getMinAnswerNum());

    case MAX_ANSWER_NUM:
      return Integer.valueOf(getMaxAnswerNum());

    case AUTO_COMPLETE:
      return Integer.valueOf(getAutoComplete());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BP_ID:
      return isSetBpId();
    case GENDER:
      return isSetGender();
    case KEYWORDS:
      return isSetKeywords();
    case TAG_IDS:
      return isSetTagIds();
    case STATUS:
      return isSetStatus();
    case MIN_GRADE:
      return isSetMinGrade();
    case MAX_GRADE:
      return isSetMaxGrade();
    case MIN_CREATE_TIME:
      return isSetMinCreateTime();
    case MAX_CREATE_TIME:
      return isSetMaxCreateTime();
    case MIN_UPDATE_TIME:
      return isSetMinUpdateTime();
    case MAX_UPDATE_TIME:
      return isSetMaxUpdateTime();
    case MIN_BIRTHDAY:
      return isSetMinBirthday();
    case MAX_BIRTHDAY:
      return isSetMaxBirthday();
    case SORT_FIELD:
      return isSetSortField();
    case SORT_TYPE:
      return isSetSortType();
    case FROM:
      return isSetFrom();
    case COUNT:
      return isSetCount();
    case MIN_FIRST_LOGIN_TIME:
      return isSetMinFirstLoginTime();
    case MAX_FIRST_LOGIN_TIME:
      return isSetMaxFirstLoginTime();
    case MIN_LAST_LOGIN_TIME:
      return isSetMinLastLoginTime();
    case MAX_LAST_LOGIN_TIME:
      return isSetMaxLastLoginTIme();
    case FIRST_LOGIN:
      return isSetFirstLogin();
    case IDENTITY:
      return isSetIdentity();
    case MIN_QUESTION_NUM:
      return isSetMinQuestionNum();
    case MAX_QUESTION_NUM:
      return isSetMaxQuestionNum();
    case MIN_ANSWER_NUM:
      return isSetMinAnswerNum();
    case MAX_ANSWER_NUM:
      return isSetMaxAnswerNum();
    case AUTO_COMPLETE:
      return isSetAutoComplete();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSearchUserCondition)
      return this.equals((TSearchUserCondition)that);
    return false;
  }

  public boolean equals(TSearchUserCondition that) {
    if (that == null)
      return false;

    boolean this_present_bpId = true;
    boolean that_present_bpId = true;
    if (this_present_bpId || that_present_bpId) {
      if (!(this_present_bpId && that_present_bpId))
        return false;
      if (this.bpId != that.bpId)
        return false;
    }

    boolean this_present_gender = true;
    boolean that_present_gender = true;
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_keywords = true && this.isSetKeywords();
    boolean that_present_keywords = true && that.isSetKeywords();
    if (this_present_keywords || that_present_keywords) {
      if (!(this_present_keywords && that_present_keywords))
        return false;
      if (!this.keywords.equals(that.keywords))
        return false;
    }

    boolean this_present_tagIds = true && this.isSetTagIds();
    boolean that_present_tagIds = true && that.isSetTagIds();
    if (this_present_tagIds || that_present_tagIds) {
      if (!(this_present_tagIds && that_present_tagIds))
        return false;
      if (!this.tagIds.equals(that.tagIds))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_minGrade = true;
    boolean that_present_minGrade = true;
    if (this_present_minGrade || that_present_minGrade) {
      if (!(this_present_minGrade && that_present_minGrade))
        return false;
      if (this.minGrade != that.minGrade)
        return false;
    }

    boolean this_present_maxGrade = true;
    boolean that_present_maxGrade = true;
    if (this_present_maxGrade || that_present_maxGrade) {
      if (!(this_present_maxGrade && that_present_maxGrade))
        return false;
      if (this.maxGrade != that.maxGrade)
        return false;
    }

    boolean this_present_minCreateTime = true;
    boolean that_present_minCreateTime = true;
    if (this_present_minCreateTime || that_present_minCreateTime) {
      if (!(this_present_minCreateTime && that_present_minCreateTime))
        return false;
      if (this.minCreateTime != that.minCreateTime)
        return false;
    }

    boolean this_present_maxCreateTime = true;
    boolean that_present_maxCreateTime = true;
    if (this_present_maxCreateTime || that_present_maxCreateTime) {
      if (!(this_present_maxCreateTime && that_present_maxCreateTime))
        return false;
      if (this.maxCreateTime != that.maxCreateTime)
        return false;
    }

    boolean this_present_minUpdateTime = true;
    boolean that_present_minUpdateTime = true;
    if (this_present_minUpdateTime || that_present_minUpdateTime) {
      if (!(this_present_minUpdateTime && that_present_minUpdateTime))
        return false;
      if (this.minUpdateTime != that.minUpdateTime)
        return false;
    }

    boolean this_present_maxUpdateTime = true;
    boolean that_present_maxUpdateTime = true;
    if (this_present_maxUpdateTime || that_present_maxUpdateTime) {
      if (!(this_present_maxUpdateTime && that_present_maxUpdateTime))
        return false;
      if (this.maxUpdateTime != that.maxUpdateTime)
        return false;
    }

    boolean this_present_minBirthday = true;
    boolean that_present_minBirthday = true;
    if (this_present_minBirthday || that_present_minBirthday) {
      if (!(this_present_minBirthday && that_present_minBirthday))
        return false;
      if (this.minBirthday != that.minBirthday)
        return false;
    }

    boolean this_present_maxBirthday = true;
    boolean that_present_maxBirthday = true;
    if (this_present_maxBirthday || that_present_maxBirthday) {
      if (!(this_present_maxBirthday && that_present_maxBirthday))
        return false;
      if (this.maxBirthday != that.maxBirthday)
        return false;
    }

    boolean this_present_sortField = true && this.isSetSortField();
    boolean that_present_sortField = true && that.isSetSortField();
    if (this_present_sortField || that_present_sortField) {
      if (!(this_present_sortField && that_present_sortField))
        return false;
      if (!this.sortField.equals(that.sortField))
        return false;
    }

    boolean this_present_sortType = true && this.isSetSortType();
    boolean that_present_sortType = true && that.isSetSortType();
    if (this_present_sortType || that_present_sortType) {
      if (!(this_present_sortType && that_present_sortType))
        return false;
      if (!this.sortType.equals(that.sortType))
        return false;
    }

    boolean this_present_from = true;
    boolean that_present_from = true;
    if (this_present_from || that_present_from) {
      if (!(this_present_from && that_present_from))
        return false;
      if (this.from != that.from)
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_minFirstLoginTime = true;
    boolean that_present_minFirstLoginTime = true;
    if (this_present_minFirstLoginTime || that_present_minFirstLoginTime) {
      if (!(this_present_minFirstLoginTime && that_present_minFirstLoginTime))
        return false;
      if (this.minFirstLoginTime != that.minFirstLoginTime)
        return false;
    }

    boolean this_present_maxFirstLoginTime = true;
    boolean that_present_maxFirstLoginTime = true;
    if (this_present_maxFirstLoginTime || that_present_maxFirstLoginTime) {
      if (!(this_present_maxFirstLoginTime && that_present_maxFirstLoginTime))
        return false;
      if (this.maxFirstLoginTime != that.maxFirstLoginTime)
        return false;
    }

    boolean this_present_minLastLoginTime = true;
    boolean that_present_minLastLoginTime = true;
    if (this_present_minLastLoginTime || that_present_minLastLoginTime) {
      if (!(this_present_minLastLoginTime && that_present_minLastLoginTime))
        return false;
      if (this.minLastLoginTime != that.minLastLoginTime)
        return false;
    }

    boolean this_present_maxLastLoginTIme = true;
    boolean that_present_maxLastLoginTIme = true;
    if (this_present_maxLastLoginTIme || that_present_maxLastLoginTIme) {
      if (!(this_present_maxLastLoginTIme && that_present_maxLastLoginTIme))
        return false;
      if (this.maxLastLoginTIme != that.maxLastLoginTIme)
        return false;
    }

    boolean this_present_firstLogin = true && this.isSetFirstLogin();
    boolean that_present_firstLogin = true && that.isSetFirstLogin();
    if (this_present_firstLogin || that_present_firstLogin) {
      if (!(this_present_firstLogin && that_present_firstLogin))
        return false;
      if (!this.firstLogin.equals(that.firstLogin))
        return false;
    }

    boolean this_present_identity = true;
    boolean that_present_identity = true;
    if (this_present_identity || that_present_identity) {
      if (!(this_present_identity && that_present_identity))
        return false;
      if (this.identity != that.identity)
        return false;
    }

    boolean this_present_minQuestionNum = true;
    boolean that_present_minQuestionNum = true;
    if (this_present_minQuestionNum || that_present_minQuestionNum) {
      if (!(this_present_minQuestionNum && that_present_minQuestionNum))
        return false;
      if (this.minQuestionNum != that.minQuestionNum)
        return false;
    }

    boolean this_present_maxQuestionNum = true;
    boolean that_present_maxQuestionNum = true;
    if (this_present_maxQuestionNum || that_present_maxQuestionNum) {
      if (!(this_present_maxQuestionNum && that_present_maxQuestionNum))
        return false;
      if (this.maxQuestionNum != that.maxQuestionNum)
        return false;
    }

    boolean this_present_minAnswerNum = true;
    boolean that_present_minAnswerNum = true;
    if (this_present_minAnswerNum || that_present_minAnswerNum) {
      if (!(this_present_minAnswerNum && that_present_minAnswerNum))
        return false;
      if (this.minAnswerNum != that.minAnswerNum)
        return false;
    }

    boolean this_present_maxAnswerNum = true;
    boolean that_present_maxAnswerNum = true;
    if (this_present_maxAnswerNum || that_present_maxAnswerNum) {
      if (!(this_present_maxAnswerNum && that_present_maxAnswerNum))
        return false;
      if (this.maxAnswerNum != that.maxAnswerNum)
        return false;
    }

    boolean this_present_autoComplete = true;
    boolean that_present_autoComplete = true;
    if (this_present_autoComplete || that_present_autoComplete) {
      if (!(this_present_autoComplete && that_present_autoComplete))
        return false;
      if (this.autoComplete != that.autoComplete)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TSearchUserCondition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TSearchUserCondition typedOther = (TSearchUserCondition)other;

    lastComparison = Boolean.valueOf(isSetBpId()).compareTo(typedOther.isSetBpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bpId, typedOther.bpId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(typedOther.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, typedOther.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeywords()).compareTo(typedOther.isSetKeywords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeywords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywords, typedOther.keywords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagIds()).compareTo(typedOther.isSetTagIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagIds, typedOther.tagIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinGrade()).compareTo(typedOther.isSetMinGrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinGrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minGrade, typedOther.minGrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxGrade()).compareTo(typedOther.isSetMaxGrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxGrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxGrade, typedOther.maxGrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinCreateTime()).compareTo(typedOther.isSetMinCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minCreateTime, typedOther.minCreateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxCreateTime()).compareTo(typedOther.isSetMaxCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCreateTime, typedOther.maxCreateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinUpdateTime()).compareTo(typedOther.isSetMinUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minUpdateTime, typedOther.minUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxUpdateTime()).compareTo(typedOther.isSetMaxUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxUpdateTime, typedOther.maxUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinBirthday()).compareTo(typedOther.isSetMinBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minBirthday, typedOther.minBirthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxBirthday()).compareTo(typedOther.isSetMaxBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxBirthday, typedOther.maxBirthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortField()).compareTo(typedOther.isSetSortField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortField, typedOther.sortField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortType()).compareTo(typedOther.isSetSortType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortType, typedOther.sortType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrom()).compareTo(typedOther.isSetFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.from, typedOther.from);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinFirstLoginTime()).compareTo(typedOther.isSetMinFirstLoginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinFirstLoginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minFirstLoginTime, typedOther.minFirstLoginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxFirstLoginTime()).compareTo(typedOther.isSetMaxFirstLoginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxFirstLoginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxFirstLoginTime, typedOther.maxFirstLoginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinLastLoginTime()).compareTo(typedOther.isSetMinLastLoginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinLastLoginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minLastLoginTime, typedOther.minLastLoginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxLastLoginTIme()).compareTo(typedOther.isSetMaxLastLoginTIme());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxLastLoginTIme()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxLastLoginTIme, typedOther.maxLastLoginTIme);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstLogin()).compareTo(typedOther.isSetFirstLogin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstLogin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstLogin, typedOther.firstLogin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentity()).compareTo(typedOther.isSetIdentity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identity, typedOther.identity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinQuestionNum()).compareTo(typedOther.isSetMinQuestionNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinQuestionNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minQuestionNum, typedOther.minQuestionNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxQuestionNum()).compareTo(typedOther.isSetMaxQuestionNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxQuestionNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxQuestionNum, typedOther.maxQuestionNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinAnswerNum()).compareTo(typedOther.isSetMinAnswerNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinAnswerNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minAnswerNum, typedOther.minAnswerNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxAnswerNum()).compareTo(typedOther.isSetMaxAnswerNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxAnswerNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxAnswerNum, typedOther.maxAnswerNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAutoComplete()).compareTo(typedOther.isSetAutoComplete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutoComplete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autoComplete, typedOther.autoComplete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSearchUserCondition(");
    boolean first = true;

    sb.append("bpId:");
    sb.append(this.bpId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gender:");
    sb.append(this.gender);
    first = false;
    if (!first) sb.append(", ");
    sb.append("keywords:");
    if (this.keywords == null) {
      sb.append("null");
    } else {
      sb.append(this.keywords);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagIds:");
    if (this.tagIds == null) {
      sb.append("null");
    } else {
      sb.append(this.tagIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minGrade:");
    sb.append(this.minGrade);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxGrade:");
    sb.append(this.maxGrade);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minCreateTime:");
    sb.append(this.minCreateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxCreateTime:");
    sb.append(this.maxCreateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minUpdateTime:");
    sb.append(this.minUpdateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxUpdateTime:");
    sb.append(this.maxUpdateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minBirthday:");
    sb.append(this.minBirthday);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxBirthday:");
    sb.append(this.maxBirthday);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortField:");
    if (this.sortField == null) {
      sb.append("null");
    } else {
      sb.append(this.sortField);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortType:");
    if (this.sortType == null) {
      sb.append("null");
    } else {
      sb.append(this.sortType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("from:");
    sb.append(this.from);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minFirstLoginTime:");
    sb.append(this.minFirstLoginTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxFirstLoginTime:");
    sb.append(this.maxFirstLoginTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minLastLoginTime:");
    sb.append(this.minLastLoginTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxLastLoginTIme:");
    sb.append(this.maxLastLoginTIme);
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstLogin:");
    if (this.firstLogin == null) {
      sb.append("null");
    } else {
      sb.append(this.firstLogin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identity:");
    sb.append(this.identity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minQuestionNum:");
    sb.append(this.minQuestionNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxQuestionNum:");
    sb.append(this.maxQuestionNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minAnswerNum:");
    sb.append(this.minAnswerNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxAnswerNum:");
    sb.append(this.maxAnswerNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("autoComplete:");
    sb.append(this.autoComplete);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSearchUserConditionStandardSchemeFactory implements SchemeFactory {
    public TSearchUserConditionStandardScheme getScheme() {
      return new TSearchUserConditionStandardScheme();
    }
  }

  private static class TSearchUserConditionStandardScheme extends StandardScheme<TSearchUserCondition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSearchUserCondition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bpId = iprot.readI64();
              struct.setBpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gender = iprot.readI32();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEYWORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keywords = iprot.readString();
              struct.setKeywordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TAG_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tagIds = iprot.readString();
              struct.setTagIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MIN_GRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minGrade = iprot.readI32();
              struct.setMinGradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MAX_GRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxGrade = iprot.readI32();
              struct.setMaxGradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MIN_CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.minCreateTime = iprot.readI64();
              struct.setMinCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAX_CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxCreateTime = iprot.readI64();
              struct.setMaxCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MIN_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.minUpdateTime = iprot.readI64();
              struct.setMinUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAX_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxUpdateTime = iprot.readI64();
              struct.setMaxUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MIN_BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.minBirthday = iprot.readI64();
              struct.setMinBirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MAX_BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxBirthday = iprot.readI64();
              struct.setMaxBirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SORT_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sortField = iprot.readString();
              struct.setSortFieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SORT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sortType = SortType.findByValue(iprot.readI32());
              struct.setSortTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.from = iprot.readI32();
              struct.setFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MIN_FIRST_LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.minFirstLoginTime = iprot.readI64();
              struct.setMinFirstLoginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MAX_FIRST_LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxFirstLoginTime = iprot.readI64();
              struct.setMaxFirstLoginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MIN_LAST_LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.minLastLoginTime = iprot.readI64();
              struct.setMinLastLoginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MAX_LAST_LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxLastLoginTIme = iprot.readI64();
              struct.setMaxLastLoginTImeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // FIRST_LOGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstLogin = iprot.readString();
              struct.setFirstLoginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IDENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.identity = iprot.readI32();
              struct.setIdentityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MIN_QUESTION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minQuestionNum = iprot.readI32();
              struct.setMinQuestionNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // MAX_QUESTION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxQuestionNum = iprot.readI32();
              struct.setMaxQuestionNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // MIN_ANSWER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minAnswerNum = iprot.readI32();
              struct.setMinAnswerNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // MAX_ANSWER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxAnswerNum = iprot.readI32();
              struct.setMaxAnswerNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // AUTO_COMPLETE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.autoComplete = iprot.readI32();
              struct.setAutoCompleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSearchUserCondition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BP_ID_FIELD_DESC);
      oprot.writeI64(struct.bpId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GENDER_FIELD_DESC);
      oprot.writeI32(struct.gender);
      oprot.writeFieldEnd();
      if (struct.keywords != null) {
        oprot.writeFieldBegin(KEYWORDS_FIELD_DESC);
        oprot.writeString(struct.keywords);
        oprot.writeFieldEnd();
      }
      if (struct.tagIds != null) {
        oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
        oprot.writeString(struct.tagIds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_GRADE_FIELD_DESC);
      oprot.writeI32(struct.minGrade);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_GRADE_FIELD_DESC);
      oprot.writeI32(struct.maxGrade);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.minCreateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.maxCreateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.minUpdateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.maxUpdateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_BIRTHDAY_FIELD_DESC);
      oprot.writeI64(struct.minBirthday);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_BIRTHDAY_FIELD_DESC);
      oprot.writeI64(struct.maxBirthday);
      oprot.writeFieldEnd();
      if (struct.sortField != null) {
        oprot.writeFieldBegin(SORT_FIELD_FIELD_DESC);
        oprot.writeString(struct.sortField);
        oprot.writeFieldEnd();
      }
      if (struct.sortType != null) {
        oprot.writeFieldBegin(SORT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.sortType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FROM_FIELD_DESC);
      oprot.writeI32(struct.from);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(struct.count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_FIRST_LOGIN_TIME_FIELD_DESC);
      oprot.writeI64(struct.minFirstLoginTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_FIRST_LOGIN_TIME_FIELD_DESC);
      oprot.writeI64(struct.maxFirstLoginTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_LAST_LOGIN_TIME_FIELD_DESC);
      oprot.writeI64(struct.minLastLoginTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_LAST_LOGIN_TIME_FIELD_DESC);
      oprot.writeI64(struct.maxLastLoginTIme);
      oprot.writeFieldEnd();
      if (struct.firstLogin != null) {
        oprot.writeFieldBegin(FIRST_LOGIN_FIELD_DESC);
        oprot.writeString(struct.firstLogin);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IDENTITY_FIELD_DESC);
      oprot.writeI32(struct.identity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_QUESTION_NUM_FIELD_DESC);
      oprot.writeI32(struct.minQuestionNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_QUESTION_NUM_FIELD_DESC);
      oprot.writeI32(struct.maxQuestionNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_ANSWER_NUM_FIELD_DESC);
      oprot.writeI32(struct.minAnswerNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_ANSWER_NUM_FIELD_DESC);
      oprot.writeI32(struct.maxAnswerNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUTO_COMPLETE_FIELD_DESC);
      oprot.writeI32(struct.autoComplete);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSearchUserConditionTupleSchemeFactory implements SchemeFactory {
    public TSearchUserConditionTupleScheme getScheme() {
      return new TSearchUserConditionTupleScheme();
    }
  }

  private static class TSearchUserConditionTupleScheme extends TupleScheme<TSearchUserCondition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSearchUserCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBpId()) {
        optionals.set(0);
      }
      if (struct.isSetGender()) {
        optionals.set(1);
      }
      if (struct.isSetKeywords()) {
        optionals.set(2);
      }
      if (struct.isSetTagIds()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetMinGrade()) {
        optionals.set(5);
      }
      if (struct.isSetMaxGrade()) {
        optionals.set(6);
      }
      if (struct.isSetMinCreateTime()) {
        optionals.set(7);
      }
      if (struct.isSetMaxCreateTime()) {
        optionals.set(8);
      }
      if (struct.isSetMinUpdateTime()) {
        optionals.set(9);
      }
      if (struct.isSetMaxUpdateTime()) {
        optionals.set(10);
      }
      if (struct.isSetMinBirthday()) {
        optionals.set(11);
      }
      if (struct.isSetMaxBirthday()) {
        optionals.set(12);
      }
      if (struct.isSetSortField()) {
        optionals.set(13);
      }
      if (struct.isSetSortType()) {
        optionals.set(14);
      }
      if (struct.isSetFrom()) {
        optionals.set(15);
      }
      if (struct.isSetCount()) {
        optionals.set(16);
      }
      if (struct.isSetMinFirstLoginTime()) {
        optionals.set(17);
      }
      if (struct.isSetMaxFirstLoginTime()) {
        optionals.set(18);
      }
      if (struct.isSetMinLastLoginTime()) {
        optionals.set(19);
      }
      if (struct.isSetMaxLastLoginTIme()) {
        optionals.set(20);
      }
      if (struct.isSetFirstLogin()) {
        optionals.set(21);
      }
      if (struct.isSetIdentity()) {
        optionals.set(22);
      }
      if (struct.isSetMinQuestionNum()) {
        optionals.set(23);
      }
      if (struct.isSetMaxQuestionNum()) {
        optionals.set(24);
      }
      if (struct.isSetMinAnswerNum()) {
        optionals.set(25);
      }
      if (struct.isSetMaxAnswerNum()) {
        optionals.set(26);
      }
      if (struct.isSetAutoComplete()) {
        optionals.set(27);
      }
      oprot.writeBitSet(optionals, 28);
      if (struct.isSetBpId()) {
        oprot.writeI64(struct.bpId);
      }
      if (struct.isSetGender()) {
        oprot.writeI32(struct.gender);
      }
      if (struct.isSetKeywords()) {
        oprot.writeString(struct.keywords);
      }
      if (struct.isSetTagIds()) {
        oprot.writeString(struct.tagIds);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetMinGrade()) {
        oprot.writeI32(struct.minGrade);
      }
      if (struct.isSetMaxGrade()) {
        oprot.writeI32(struct.maxGrade);
      }
      if (struct.isSetMinCreateTime()) {
        oprot.writeI64(struct.minCreateTime);
      }
      if (struct.isSetMaxCreateTime()) {
        oprot.writeI64(struct.maxCreateTime);
      }
      if (struct.isSetMinUpdateTime()) {
        oprot.writeI64(struct.minUpdateTime);
      }
      if (struct.isSetMaxUpdateTime()) {
        oprot.writeI64(struct.maxUpdateTime);
      }
      if (struct.isSetMinBirthday()) {
        oprot.writeI64(struct.minBirthday);
      }
      if (struct.isSetMaxBirthday()) {
        oprot.writeI64(struct.maxBirthday);
      }
      if (struct.isSetSortField()) {
        oprot.writeString(struct.sortField);
      }
      if (struct.isSetSortType()) {
        oprot.writeI32(struct.sortType.getValue());
      }
      if (struct.isSetFrom()) {
        oprot.writeI32(struct.from);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetMinFirstLoginTime()) {
        oprot.writeI64(struct.minFirstLoginTime);
      }
      if (struct.isSetMaxFirstLoginTime()) {
        oprot.writeI64(struct.maxFirstLoginTime);
      }
      if (struct.isSetMinLastLoginTime()) {
        oprot.writeI64(struct.minLastLoginTime);
      }
      if (struct.isSetMaxLastLoginTIme()) {
        oprot.writeI64(struct.maxLastLoginTIme);
      }
      if (struct.isSetFirstLogin()) {
        oprot.writeString(struct.firstLogin);
      }
      if (struct.isSetIdentity()) {
        oprot.writeI32(struct.identity);
      }
      if (struct.isSetMinQuestionNum()) {
        oprot.writeI32(struct.minQuestionNum);
      }
      if (struct.isSetMaxQuestionNum()) {
        oprot.writeI32(struct.maxQuestionNum);
      }
      if (struct.isSetMinAnswerNum()) {
        oprot.writeI32(struct.minAnswerNum);
      }
      if (struct.isSetMaxAnswerNum()) {
        oprot.writeI32(struct.maxAnswerNum);
      }
      if (struct.isSetAutoComplete()) {
        oprot.writeI32(struct.autoComplete);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSearchUserCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(28);
      if (incoming.get(0)) {
        struct.bpId = iprot.readI64();
        struct.setBpIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gender = iprot.readI32();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(2)) {
        struct.keywords = iprot.readString();
        struct.setKeywordsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tagIds = iprot.readString();
        struct.setTagIdsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.minGrade = iprot.readI32();
        struct.setMinGradeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.maxGrade = iprot.readI32();
        struct.setMaxGradeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.minCreateTime = iprot.readI64();
        struct.setMinCreateTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.maxCreateTime = iprot.readI64();
        struct.setMaxCreateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.minUpdateTime = iprot.readI64();
        struct.setMinUpdateTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.maxUpdateTime = iprot.readI64();
        struct.setMaxUpdateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.minBirthday = iprot.readI64();
        struct.setMinBirthdayIsSet(true);
      }
      if (incoming.get(12)) {
        struct.maxBirthday = iprot.readI64();
        struct.setMaxBirthdayIsSet(true);
      }
      if (incoming.get(13)) {
        struct.sortField = iprot.readString();
        struct.setSortFieldIsSet(true);
      }
      if (incoming.get(14)) {
        struct.sortType = SortType.findByValue(iprot.readI32());
        struct.setSortTypeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.from = iprot.readI32();
        struct.setFromIsSet(true);
      }
      if (incoming.get(16)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(17)) {
        struct.minFirstLoginTime = iprot.readI64();
        struct.setMinFirstLoginTimeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.maxFirstLoginTime = iprot.readI64();
        struct.setMaxFirstLoginTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.minLastLoginTime = iprot.readI64();
        struct.setMinLastLoginTimeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.maxLastLoginTIme = iprot.readI64();
        struct.setMaxLastLoginTImeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.firstLogin = iprot.readString();
        struct.setFirstLoginIsSet(true);
      }
      if (incoming.get(22)) {
        struct.identity = iprot.readI32();
        struct.setIdentityIsSet(true);
      }
      if (incoming.get(23)) {
        struct.minQuestionNum = iprot.readI32();
        struct.setMinQuestionNumIsSet(true);
      }
      if (incoming.get(24)) {
        struct.maxQuestionNum = iprot.readI32();
        struct.setMaxQuestionNumIsSet(true);
      }
      if (incoming.get(25)) {
        struct.minAnswerNum = iprot.readI32();
        struct.setMinAnswerNumIsSet(true);
      }
      if (incoming.get(26)) {
        struct.maxAnswerNum = iprot.readI32();
        struct.setMaxAnswerNumIsSet(true);
      }
      if (incoming.get(27)) {
        struct.autoComplete = iprot.readI32();
        struct.setAutoCompleteIsSet(true);
      }
    }
  }

}

