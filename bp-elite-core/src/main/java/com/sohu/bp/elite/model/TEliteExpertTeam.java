/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sohu.bp.elite.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TEliteExpertTeam implements org.apache.thrift.TBase<TEliteExpertTeam, TEliteExpertTeam._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEliteExpertTeam");

  private static final org.apache.thrift.protocol.TField BP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bpId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PUSH_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pushNum", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ANSWERED_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("answeredNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("identity", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField UNANSWERED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("unansweredId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ANSWERED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("answeredId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_PUSH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPushTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField LAST_ANSWERED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastAnsweredTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("team", org.apache.thrift.protocol.TType.I64, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TEliteExpertTeamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TEliteExpertTeamTupleSchemeFactory());
  }

  public long bpId; // required
  public int pushNum; // required
  public int answeredNum; // required
  public int score; // required
  public int identity; // required
  public String unansweredId; // required
  public String answeredId; // required
  public long lastPushTime; // required
  public long lastAnsweredTime; // required
  public long team; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BP_ID((short)1, "bpId"),
    PUSH_NUM((short)2, "pushNum"),
    ANSWERED_NUM((short)3, "answeredNum"),
    SCORE((short)4, "score"),
    IDENTITY((short)5, "identity"),
    UNANSWERED_ID((short)6, "unansweredId"),
    ANSWERED_ID((short)7, "answeredId"),
    LAST_PUSH_TIME((short)8, "lastPushTime"),
    LAST_ANSWERED_TIME((short)9, "lastAnsweredTime"),
    TEAM((short)10, "team");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BP_ID
          return BP_ID;
        case 2: // PUSH_NUM
          return PUSH_NUM;
        case 3: // ANSWERED_NUM
          return ANSWERED_NUM;
        case 4: // SCORE
          return SCORE;
        case 5: // IDENTITY
          return IDENTITY;
        case 6: // UNANSWERED_ID
          return UNANSWERED_ID;
        case 7: // ANSWERED_ID
          return ANSWERED_ID;
        case 8: // LAST_PUSH_TIME
          return LAST_PUSH_TIME;
        case 9: // LAST_ANSWERED_TIME
          return LAST_ANSWERED_TIME;
        case 10: // TEAM
          return TEAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BPID_ISSET_ID = 0;
  private static final int __PUSHNUM_ISSET_ID = 1;
  private static final int __ANSWEREDNUM_ISSET_ID = 2;
  private static final int __SCORE_ISSET_ID = 3;
  private static final int __IDENTITY_ISSET_ID = 4;
  private static final int __LASTPUSHTIME_ISSET_ID = 5;
  private static final int __LASTANSWEREDTIME_ISSET_ID = 6;
  private static final int __TEAM_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BP_ID, new org.apache.thrift.meta_data.FieldMetaData("bpId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PUSH_NUM, new org.apache.thrift.meta_data.FieldMetaData("pushNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ANSWERED_NUM, new org.apache.thrift.meta_data.FieldMetaData("answeredNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("identity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNANSWERED_ID, new org.apache.thrift.meta_data.FieldMetaData("unansweredId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANSWERED_ID, new org.apache.thrift.meta_data.FieldMetaData("answeredId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_PUSH_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastPushTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_ANSWERED_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastAnsweredTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEAM, new org.apache.thrift.meta_data.FieldMetaData("team", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEliteExpertTeam.class, metaDataMap);
  }

  public TEliteExpertTeam() {
    this.bpId = 0L;

    this.pushNum = 0;

    this.answeredNum = 0;

    this.score = 0;

    this.identity = 0;

    this.unansweredId = "";

    this.answeredId = "";

    this.lastPushTime = 0L;

    this.lastAnsweredTime = 0L;

    this.team = 0L;

  }

  public TEliteExpertTeam(
    long bpId,
    int pushNum,
    int answeredNum,
    int score,
    int identity,
    String unansweredId,
    String answeredId,
    long lastPushTime,
    long lastAnsweredTime,
    long team)
  {
    this();
    this.bpId = bpId;
    setBpIdIsSet(true);
    this.pushNum = pushNum;
    setPushNumIsSet(true);
    this.answeredNum = answeredNum;
    setAnsweredNumIsSet(true);
    this.score = score;
    setScoreIsSet(true);
    this.identity = identity;
    setIdentityIsSet(true);
    this.unansweredId = unansweredId;
    this.answeredId = answeredId;
    this.lastPushTime = lastPushTime;
    setLastPushTimeIsSet(true);
    this.lastAnsweredTime = lastAnsweredTime;
    setLastAnsweredTimeIsSet(true);
    this.team = team;
    setTeamIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEliteExpertTeam(TEliteExpertTeam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bpId = other.bpId;
    this.pushNum = other.pushNum;
    this.answeredNum = other.answeredNum;
    this.score = other.score;
    this.identity = other.identity;
    if (other.isSetUnansweredId()) {
      this.unansweredId = other.unansweredId;
    }
    if (other.isSetAnsweredId()) {
      this.answeredId = other.answeredId;
    }
    this.lastPushTime = other.lastPushTime;
    this.lastAnsweredTime = other.lastAnsweredTime;
    this.team = other.team;
  }

  public TEliteExpertTeam deepCopy() {
    return new TEliteExpertTeam(this);
  }

  @Override
  public void clear() {
    this.bpId = 0L;

    this.pushNum = 0;

    this.answeredNum = 0;

    this.score = 0;

    this.identity = 0;

    this.unansweredId = "";

    this.answeredId = "";

    this.lastPushTime = 0L;

    this.lastAnsweredTime = 0L;

    this.team = 0L;

  }

  public long getBpId() {
    return this.bpId;
  }

  public TEliteExpertTeam setBpId(long bpId) {
    this.bpId = bpId;
    setBpIdIsSet(true);
    return this;
  }

  public void unsetBpId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BPID_ISSET_ID);
  }

  /** Returns true if field bpId is set (has been assigned a value) and false otherwise */
  public boolean isSetBpId() {
    return EncodingUtils.testBit(__isset_bitfield, __BPID_ISSET_ID);
  }

  public void setBpIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BPID_ISSET_ID, value);
  }

  public int getPushNum() {
    return this.pushNum;
  }

  public TEliteExpertTeam setPushNum(int pushNum) {
    this.pushNum = pushNum;
    setPushNumIsSet(true);
    return this;
  }

  public void unsetPushNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUSHNUM_ISSET_ID);
  }

  /** Returns true if field pushNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPushNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PUSHNUM_ISSET_ID);
  }

  public void setPushNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUSHNUM_ISSET_ID, value);
  }

  public int getAnsweredNum() {
    return this.answeredNum;
  }

  public TEliteExpertTeam setAnsweredNum(int answeredNum) {
    this.answeredNum = answeredNum;
    setAnsweredNumIsSet(true);
    return this;
  }

  public void unsetAnsweredNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANSWEREDNUM_ISSET_ID);
  }

  /** Returns true if field answeredNum is set (has been assigned a value) and false otherwise */
  public boolean isSetAnsweredNum() {
    return EncodingUtils.testBit(__isset_bitfield, __ANSWEREDNUM_ISSET_ID);
  }

  public void setAnsweredNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANSWEREDNUM_ISSET_ID, value);
  }

  public int getScore() {
    return this.score;
  }

  public TEliteExpertTeam setScore(int score) {
    this.score = score;
    setScoreIsSet(true);
    return this;
  }

  public void unsetScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
  }

  public int getIdentity() {
    return this.identity;
  }

  public TEliteExpertTeam setIdentity(int identity) {
    this.identity = identity;
    setIdentityIsSet(true);
    return this;
  }

  public void unsetIdentity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDENTITY_ISSET_ID);
  }

  /** Returns true if field identity is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentity() {
    return EncodingUtils.testBit(__isset_bitfield, __IDENTITY_ISSET_ID);
  }

  public void setIdentityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDENTITY_ISSET_ID, value);
  }

  public String getUnansweredId() {
    return this.unansweredId;
  }

  public TEliteExpertTeam setUnansweredId(String unansweredId) {
    this.unansweredId = unansweredId;
    return this;
  }

  public void unsetUnansweredId() {
    this.unansweredId = null;
  }

  /** Returns true if field unansweredId is set (has been assigned a value) and false otherwise */
  public boolean isSetUnansweredId() {
    return this.unansweredId != null;
  }

  public void setUnansweredIdIsSet(boolean value) {
    if (!value) {
      this.unansweredId = null;
    }
  }

  public String getAnsweredId() {
    return this.answeredId;
  }

  public TEliteExpertTeam setAnsweredId(String answeredId) {
    this.answeredId = answeredId;
    return this;
  }

  public void unsetAnsweredId() {
    this.answeredId = null;
  }

  /** Returns true if field answeredId is set (has been assigned a value) and false otherwise */
  public boolean isSetAnsweredId() {
    return this.answeredId != null;
  }

  public void setAnsweredIdIsSet(boolean value) {
    if (!value) {
      this.answeredId = null;
    }
  }

  public long getLastPushTime() {
    return this.lastPushTime;
  }

  public TEliteExpertTeam setLastPushTime(long lastPushTime) {
    this.lastPushTime = lastPushTime;
    setLastPushTimeIsSet(true);
    return this;
  }

  public void unsetLastPushTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPUSHTIME_ISSET_ID);
  }

  /** Returns true if field lastPushTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPushTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPUSHTIME_ISSET_ID);
  }

  public void setLastPushTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPUSHTIME_ISSET_ID, value);
  }

  public long getLastAnsweredTime() {
    return this.lastAnsweredTime;
  }

  public TEliteExpertTeam setLastAnsweredTime(long lastAnsweredTime) {
    this.lastAnsweredTime = lastAnsweredTime;
    setLastAnsweredTimeIsSet(true);
    return this;
  }

  public void unsetLastAnsweredTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTANSWEREDTIME_ISSET_ID);
  }

  /** Returns true if field lastAnsweredTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastAnsweredTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTANSWEREDTIME_ISSET_ID);
  }

  public void setLastAnsweredTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTANSWEREDTIME_ISSET_ID, value);
  }

  public long getTeam() {
    return this.team;
  }

  public TEliteExpertTeam setTeam(long team) {
    this.team = team;
    setTeamIsSet(true);
    return this;
  }

  public void unsetTeam() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEAM_ISSET_ID);
  }

  /** Returns true if field team is set (has been assigned a value) and false otherwise */
  public boolean isSetTeam() {
    return EncodingUtils.testBit(__isset_bitfield, __TEAM_ISSET_ID);
  }

  public void setTeamIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEAM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BP_ID:
      if (value == null) {
        unsetBpId();
      } else {
        setBpId((Long)value);
      }
      break;

    case PUSH_NUM:
      if (value == null) {
        unsetPushNum();
      } else {
        setPushNum((Integer)value);
      }
      break;

    case ANSWERED_NUM:
      if (value == null) {
        unsetAnsweredNum();
      } else {
        setAnsweredNum((Integer)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Integer)value);
      }
      break;

    case IDENTITY:
      if (value == null) {
        unsetIdentity();
      } else {
        setIdentity((Integer)value);
      }
      break;

    case UNANSWERED_ID:
      if (value == null) {
        unsetUnansweredId();
      } else {
        setUnansweredId((String)value);
      }
      break;

    case ANSWERED_ID:
      if (value == null) {
        unsetAnsweredId();
      } else {
        setAnsweredId((String)value);
      }
      break;

    case LAST_PUSH_TIME:
      if (value == null) {
        unsetLastPushTime();
      } else {
        setLastPushTime((Long)value);
      }
      break;

    case LAST_ANSWERED_TIME:
      if (value == null) {
        unsetLastAnsweredTime();
      } else {
        setLastAnsweredTime((Long)value);
      }
      break;

    case TEAM:
      if (value == null) {
        unsetTeam();
      } else {
        setTeam((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BP_ID:
      return Long.valueOf(getBpId());

    case PUSH_NUM:
      return Integer.valueOf(getPushNum());

    case ANSWERED_NUM:
      return Integer.valueOf(getAnsweredNum());

    case SCORE:
      return Integer.valueOf(getScore());

    case IDENTITY:
      return Integer.valueOf(getIdentity());

    case UNANSWERED_ID:
      return getUnansweredId();

    case ANSWERED_ID:
      return getAnsweredId();

    case LAST_PUSH_TIME:
      return Long.valueOf(getLastPushTime());

    case LAST_ANSWERED_TIME:
      return Long.valueOf(getLastAnsweredTime());

    case TEAM:
      return Long.valueOf(getTeam());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BP_ID:
      return isSetBpId();
    case PUSH_NUM:
      return isSetPushNum();
    case ANSWERED_NUM:
      return isSetAnsweredNum();
    case SCORE:
      return isSetScore();
    case IDENTITY:
      return isSetIdentity();
    case UNANSWERED_ID:
      return isSetUnansweredId();
    case ANSWERED_ID:
      return isSetAnsweredId();
    case LAST_PUSH_TIME:
      return isSetLastPushTime();
    case LAST_ANSWERED_TIME:
      return isSetLastAnsweredTime();
    case TEAM:
      return isSetTeam();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TEliteExpertTeam)
      return this.equals((TEliteExpertTeam)that);
    return false;
  }

  public boolean equals(TEliteExpertTeam that) {
    if (that == null)
      return false;

    boolean this_present_bpId = true;
    boolean that_present_bpId = true;
    if (this_present_bpId || that_present_bpId) {
      if (!(this_present_bpId && that_present_bpId))
        return false;
      if (this.bpId != that.bpId)
        return false;
    }

    boolean this_present_pushNum = true;
    boolean that_present_pushNum = true;
    if (this_present_pushNum || that_present_pushNum) {
      if (!(this_present_pushNum && that_present_pushNum))
        return false;
      if (this.pushNum != that.pushNum)
        return false;
    }

    boolean this_present_answeredNum = true;
    boolean that_present_answeredNum = true;
    if (this_present_answeredNum || that_present_answeredNum) {
      if (!(this_present_answeredNum && that_present_answeredNum))
        return false;
      if (this.answeredNum != that.answeredNum)
        return false;
    }

    boolean this_present_score = true;
    boolean that_present_score = true;
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    boolean this_present_identity = true;
    boolean that_present_identity = true;
    if (this_present_identity || that_present_identity) {
      if (!(this_present_identity && that_present_identity))
        return false;
      if (this.identity != that.identity)
        return false;
    }

    boolean this_present_unansweredId = true && this.isSetUnansweredId();
    boolean that_present_unansweredId = true && that.isSetUnansweredId();
    if (this_present_unansweredId || that_present_unansweredId) {
      if (!(this_present_unansweredId && that_present_unansweredId))
        return false;
      if (!this.unansweredId.equals(that.unansweredId))
        return false;
    }

    boolean this_present_answeredId = true && this.isSetAnsweredId();
    boolean that_present_answeredId = true && that.isSetAnsweredId();
    if (this_present_answeredId || that_present_answeredId) {
      if (!(this_present_answeredId && that_present_answeredId))
        return false;
      if (!this.answeredId.equals(that.answeredId))
        return false;
    }

    boolean this_present_lastPushTime = true;
    boolean that_present_lastPushTime = true;
    if (this_present_lastPushTime || that_present_lastPushTime) {
      if (!(this_present_lastPushTime && that_present_lastPushTime))
        return false;
      if (this.lastPushTime != that.lastPushTime)
        return false;
    }

    boolean this_present_lastAnsweredTime = true;
    boolean that_present_lastAnsweredTime = true;
    if (this_present_lastAnsweredTime || that_present_lastAnsweredTime) {
      if (!(this_present_lastAnsweredTime && that_present_lastAnsweredTime))
        return false;
      if (this.lastAnsweredTime != that.lastAnsweredTime)
        return false;
    }

    boolean this_present_team = true;
    boolean that_present_team = true;
    if (this_present_team || that_present_team) {
      if (!(this_present_team && that_present_team))
        return false;
      if (this.team != that.team)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TEliteExpertTeam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TEliteExpertTeam typedOther = (TEliteExpertTeam)other;

    lastComparison = Boolean.valueOf(isSetBpId()).compareTo(typedOther.isSetBpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bpId, typedOther.bpId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPushNum()).compareTo(typedOther.isSetPushNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pushNum, typedOther.pushNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnsweredNum()).compareTo(typedOther.isSetAnsweredNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnsweredNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answeredNum, typedOther.answeredNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(typedOther.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, typedOther.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentity()).compareTo(typedOther.isSetIdentity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identity, typedOther.identity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnansweredId()).compareTo(typedOther.isSetUnansweredId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnansweredId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unansweredId, typedOther.unansweredId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnsweredId()).compareTo(typedOther.isSetAnsweredId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnsweredId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answeredId, typedOther.answeredId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPushTime()).compareTo(typedOther.isSetLastPushTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPushTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPushTime, typedOther.lastPushTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastAnsweredTime()).compareTo(typedOther.isSetLastAnsweredTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastAnsweredTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastAnsweredTime, typedOther.lastAnsweredTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeam()).compareTo(typedOther.isSetTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.team, typedOther.team);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TEliteExpertTeam(");
    boolean first = true;

    sb.append("bpId:");
    sb.append(this.bpId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pushNum:");
    sb.append(this.pushNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("answeredNum:");
    sb.append(this.answeredNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("score:");
    sb.append(this.score);
    first = false;
    if (!first) sb.append(", ");
    sb.append("identity:");
    sb.append(this.identity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unansweredId:");
    if (this.unansweredId == null) {
      sb.append("null");
    } else {
      sb.append(this.unansweredId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("answeredId:");
    if (this.answeredId == null) {
      sb.append("null");
    } else {
      sb.append(this.answeredId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastPushTime:");
    sb.append(this.lastPushTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastAnsweredTime:");
    sb.append(this.lastAnsweredTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("team:");
    sb.append(this.team);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEliteExpertTeamStandardSchemeFactory implements SchemeFactory {
    public TEliteExpertTeamStandardScheme getScheme() {
      return new TEliteExpertTeamStandardScheme();
    }
  }

  private static class TEliteExpertTeamStandardScheme extends StandardScheme<TEliteExpertTeam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEliteExpertTeam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bpId = iprot.readI64();
              struct.setBpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PUSH_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pushNum = iprot.readI32();
              struct.setPushNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ANSWERED_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.answeredNum = iprot.readI32();
              struct.setAnsweredNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.score = iprot.readI32();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IDENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.identity = iprot.readI32();
              struct.setIdentityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UNANSWERED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unansweredId = iprot.readString();
              struct.setUnansweredIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ANSWERED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.answeredId = iprot.readString();
              struct.setAnsweredIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAST_PUSH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastPushTime = iprot.readI64();
              struct.setLastPushTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAST_ANSWERED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastAnsweredTime = iprot.readI64();
              struct.setLastAnsweredTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.team = iprot.readI64();
              struct.setTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEliteExpertTeam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BP_ID_FIELD_DESC);
      oprot.writeI64(struct.bpId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUSH_NUM_FIELD_DESC);
      oprot.writeI32(struct.pushNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ANSWERED_NUM_FIELD_DESC);
      oprot.writeI32(struct.answeredNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCORE_FIELD_DESC);
      oprot.writeI32(struct.score);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IDENTITY_FIELD_DESC);
      oprot.writeI32(struct.identity);
      oprot.writeFieldEnd();
      if (struct.unansweredId != null) {
        oprot.writeFieldBegin(UNANSWERED_ID_FIELD_DESC);
        oprot.writeString(struct.unansweredId);
        oprot.writeFieldEnd();
      }
      if (struct.answeredId != null) {
        oprot.writeFieldBegin(ANSWERED_ID_FIELD_DESC);
        oprot.writeString(struct.answeredId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_PUSH_TIME_FIELD_DESC);
      oprot.writeI64(struct.lastPushTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_ANSWERED_TIME_FIELD_DESC);
      oprot.writeI64(struct.lastAnsweredTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEAM_FIELD_DESC);
      oprot.writeI64(struct.team);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEliteExpertTeamTupleSchemeFactory implements SchemeFactory {
    public TEliteExpertTeamTupleScheme getScheme() {
      return new TEliteExpertTeamTupleScheme();
    }
  }

  private static class TEliteExpertTeamTupleScheme extends TupleScheme<TEliteExpertTeam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEliteExpertTeam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBpId()) {
        optionals.set(0);
      }
      if (struct.isSetPushNum()) {
        optionals.set(1);
      }
      if (struct.isSetAnsweredNum()) {
        optionals.set(2);
      }
      if (struct.isSetScore()) {
        optionals.set(3);
      }
      if (struct.isSetIdentity()) {
        optionals.set(4);
      }
      if (struct.isSetUnansweredId()) {
        optionals.set(5);
      }
      if (struct.isSetAnsweredId()) {
        optionals.set(6);
      }
      if (struct.isSetLastPushTime()) {
        optionals.set(7);
      }
      if (struct.isSetLastAnsweredTime()) {
        optionals.set(8);
      }
      if (struct.isSetTeam()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetBpId()) {
        oprot.writeI64(struct.bpId);
      }
      if (struct.isSetPushNum()) {
        oprot.writeI32(struct.pushNum);
      }
      if (struct.isSetAnsweredNum()) {
        oprot.writeI32(struct.answeredNum);
      }
      if (struct.isSetScore()) {
        oprot.writeI32(struct.score);
      }
      if (struct.isSetIdentity()) {
        oprot.writeI32(struct.identity);
      }
      if (struct.isSetUnansweredId()) {
        oprot.writeString(struct.unansweredId);
      }
      if (struct.isSetAnsweredId()) {
        oprot.writeString(struct.answeredId);
      }
      if (struct.isSetLastPushTime()) {
        oprot.writeI64(struct.lastPushTime);
      }
      if (struct.isSetLastAnsweredTime()) {
        oprot.writeI64(struct.lastAnsweredTime);
      }
      if (struct.isSetTeam()) {
        oprot.writeI64(struct.team);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEliteExpertTeam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.bpId = iprot.readI64();
        struct.setBpIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pushNum = iprot.readI32();
        struct.setPushNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.answeredNum = iprot.readI32();
        struct.setAnsweredNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.score = iprot.readI32();
        struct.setScoreIsSet(true);
      }
      if (incoming.get(4)) {
        struct.identity = iprot.readI32();
        struct.setIdentityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.unansweredId = iprot.readString();
        struct.setUnansweredIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.answeredId = iprot.readString();
        struct.setAnsweredIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.lastPushTime = iprot.readI64();
        struct.setLastPushTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lastAnsweredTime = iprot.readI64();
        struct.setLastAnsweredTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.team = iprot.readI64();
        struct.setTeamIsSet(true);
      }
    }
  }

}

