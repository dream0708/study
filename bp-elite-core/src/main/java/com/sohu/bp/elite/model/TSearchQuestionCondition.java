/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sohu.bp.elite.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TSearchQuestionCondition implements org.apache.thrift.TBase<TSearchQuestionCondition, TSearchQuestionCondition._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSearchQuestionCondition");

  private static final org.apache.thrift.protocol.TField BP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bpId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keywords", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagIds", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("statusArray", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RELATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("relationType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RELATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("relationId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TITLE_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("titleOnly", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField MIN_CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("minCreateTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField MAX_CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCreateTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField MIN_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("minUpdateTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField MAX_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxUpdateTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField MIN_PUBLISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("minPublishTime", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField MAX_PUBLISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxPublishTime", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField SORT_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("sortField", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField SORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sortType", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("from", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField SPECIAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("specialId", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField SPECIAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("specialType", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField MIN_ANSWER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("minAnswerNum", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField MAX_ANSWER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("maxAnswerNum", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField AUTO_COMPLETE_FIELD_DESC = new org.apache.thrift.protocol.TField("autoComplete", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField BAN_BP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("banBpId", org.apache.thrift.protocol.TType.I64, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSearchQuestionConditionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSearchQuestionConditionTupleSchemeFactory());
  }

  public long bpId; // required
  public String keywords; // required
  public String tagIds; // required
  public String statusArray; // required
  public int relationType; // required
  public long relationId; // required
  public int source; // required
  public boolean titleOnly; // required
  public long minCreateTime; // required
  public long maxCreateTime; // required
  public long minUpdateTime; // required
  public long maxUpdateTime; // required
  public long minPublishTime; // required
  public long maxPublishTime; // required
  public String sortField; // required
  /**
   * 
   * @see SortType
   */
  public SortType sortType; // required
  public int from; // required
  public int count; // required
  public long specialId; // required
  public int specialType; // required
  public int minAnswerNum; // required
  public int maxAnswerNum; // required
  public int autoComplete; // required
  public long banBpId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BP_ID((short)1, "bpId"),
    KEYWORDS((short)2, "keywords"),
    TAG_IDS((short)3, "tagIds"),
    STATUS_ARRAY((short)4, "statusArray"),
    RELATION_TYPE((short)5, "relationType"),
    RELATION_ID((short)6, "relationId"),
    SOURCE((short)7, "source"),
    TITLE_ONLY((short)8, "titleOnly"),
    MIN_CREATE_TIME((short)9, "minCreateTime"),
    MAX_CREATE_TIME((short)10, "maxCreateTime"),
    MIN_UPDATE_TIME((short)11, "minUpdateTime"),
    MAX_UPDATE_TIME((short)12, "maxUpdateTime"),
    MIN_PUBLISH_TIME((short)13, "minPublishTime"),
    MAX_PUBLISH_TIME((short)14, "maxPublishTime"),
    SORT_FIELD((short)15, "sortField"),
    /**
     * 
     * @see SortType
     */
    SORT_TYPE((short)16, "sortType"),
    FROM((short)17, "from"),
    COUNT((short)18, "count"),
    SPECIAL_ID((short)19, "specialId"),
    SPECIAL_TYPE((short)20, "specialType"),
    MIN_ANSWER_NUM((short)21, "minAnswerNum"),
    MAX_ANSWER_NUM((short)22, "maxAnswerNum"),
    AUTO_COMPLETE((short)23, "autoComplete"),
    BAN_BP_ID((short)24, "banBpId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BP_ID
          return BP_ID;
        case 2: // KEYWORDS
          return KEYWORDS;
        case 3: // TAG_IDS
          return TAG_IDS;
        case 4: // STATUS_ARRAY
          return STATUS_ARRAY;
        case 5: // RELATION_TYPE
          return RELATION_TYPE;
        case 6: // RELATION_ID
          return RELATION_ID;
        case 7: // SOURCE
          return SOURCE;
        case 8: // TITLE_ONLY
          return TITLE_ONLY;
        case 9: // MIN_CREATE_TIME
          return MIN_CREATE_TIME;
        case 10: // MAX_CREATE_TIME
          return MAX_CREATE_TIME;
        case 11: // MIN_UPDATE_TIME
          return MIN_UPDATE_TIME;
        case 12: // MAX_UPDATE_TIME
          return MAX_UPDATE_TIME;
        case 13: // MIN_PUBLISH_TIME
          return MIN_PUBLISH_TIME;
        case 14: // MAX_PUBLISH_TIME
          return MAX_PUBLISH_TIME;
        case 15: // SORT_FIELD
          return SORT_FIELD;
        case 16: // SORT_TYPE
          return SORT_TYPE;
        case 17: // FROM
          return FROM;
        case 18: // COUNT
          return COUNT;
        case 19: // SPECIAL_ID
          return SPECIAL_ID;
        case 20: // SPECIAL_TYPE
          return SPECIAL_TYPE;
        case 21: // MIN_ANSWER_NUM
          return MIN_ANSWER_NUM;
        case 22: // MAX_ANSWER_NUM
          return MAX_ANSWER_NUM;
        case 23: // AUTO_COMPLETE
          return AUTO_COMPLETE;
        case 24: // BAN_BP_ID
          return BAN_BP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BPID_ISSET_ID = 0;
  private static final int __RELATIONTYPE_ISSET_ID = 1;
  private static final int __RELATIONID_ISSET_ID = 2;
  private static final int __SOURCE_ISSET_ID = 3;
  private static final int __TITLEONLY_ISSET_ID = 4;
  private static final int __MINCREATETIME_ISSET_ID = 5;
  private static final int __MAXCREATETIME_ISSET_ID = 6;
  private static final int __MINUPDATETIME_ISSET_ID = 7;
  private static final int __MAXUPDATETIME_ISSET_ID = 8;
  private static final int __MINPUBLISHTIME_ISSET_ID = 9;
  private static final int __MAXPUBLISHTIME_ISSET_ID = 10;
  private static final int __FROM_ISSET_ID = 11;
  private static final int __COUNT_ISSET_ID = 12;
  private static final int __SPECIALID_ISSET_ID = 13;
  private static final int __SPECIALTYPE_ISSET_ID = 14;
  private static final int __MINANSWERNUM_ISSET_ID = 15;
  private static final int __MAXANSWERNUM_ISSET_ID = 16;
  private static final int __AUTOCOMPLETE_ISSET_ID = 17;
  private static final int __BANBPID_ISSET_ID = 18;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BP_ID, new org.apache.thrift.meta_data.FieldMetaData("bpId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("keywords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tagIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("statusArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("relationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RELATION_ID, new org.apache.thrift.meta_data.FieldMetaData("relationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE_ONLY, new org.apache.thrift.meta_data.FieldMetaData("titleOnly", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MIN_CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("minCreateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("maxCreateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("minUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("maxUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_PUBLISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("minPublishTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_PUBLISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("maxPublishTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SORT_FIELD, new org.apache.thrift.meta_data.FieldMetaData("sortField", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sortType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SortType.class)));
    tmpMap.put(_Fields.FROM, new org.apache.thrift.meta_data.FieldMetaData("from", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPECIAL_ID, new org.apache.thrift.meta_data.FieldMetaData("specialId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPECIAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("specialType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_ANSWER_NUM, new org.apache.thrift.meta_data.FieldMetaData("minAnswerNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_ANSWER_NUM, new org.apache.thrift.meta_data.FieldMetaData("maxAnswerNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUTO_COMPLETE, new org.apache.thrift.meta_data.FieldMetaData("autoComplete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BAN_BP_ID, new org.apache.thrift.meta_data.FieldMetaData("banBpId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSearchQuestionCondition.class, metaDataMap);
  }

  public TSearchQuestionCondition() {
    this.bpId = -1L;

    this.keywords = "";

    this.tagIds = "";

    this.statusArray = "";

    this.relationType = -1;

    this.relationId = -1L;

    this.source = -1;

    this.titleOnly = false;

    this.minCreateTime = -1L;

    this.maxCreateTime = -1L;

    this.minUpdateTime = -1L;

    this.maxUpdateTime = -1L;

    this.minPublishTime = -1L;

    this.maxPublishTime = -1L;

    this.sortField = "";

    this.sortType = com.sohu.bp.elite.model.SortType.ASC;

    this.from = 0;

    this.count = 0;

    this.specialId = -1L;

    this.specialType = -1;

    this.minAnswerNum = -1;

    this.maxAnswerNum = -1;

    this.autoComplete = -1;

    this.banBpId = -1L;

  }

  public TSearchQuestionCondition(
    long bpId,
    String keywords,
    String tagIds,
    String statusArray,
    int relationType,
    long relationId,
    int source,
    boolean titleOnly,
    long minCreateTime,
    long maxCreateTime,
    long minUpdateTime,
    long maxUpdateTime,
    long minPublishTime,
    long maxPublishTime,
    String sortField,
    SortType sortType,
    int from,
    int count,
    long specialId,
    int specialType,
    int minAnswerNum,
    int maxAnswerNum,
    int autoComplete,
    long banBpId)
  {
    this();
    this.bpId = bpId;
    setBpIdIsSet(true);
    this.keywords = keywords;
    this.tagIds = tagIds;
    this.statusArray = statusArray;
    this.relationType = relationType;
    setRelationTypeIsSet(true);
    this.relationId = relationId;
    setRelationIdIsSet(true);
    this.source = source;
    setSourceIsSet(true);
    this.titleOnly = titleOnly;
    setTitleOnlyIsSet(true);
    this.minCreateTime = minCreateTime;
    setMinCreateTimeIsSet(true);
    this.maxCreateTime = maxCreateTime;
    setMaxCreateTimeIsSet(true);
    this.minUpdateTime = minUpdateTime;
    setMinUpdateTimeIsSet(true);
    this.maxUpdateTime = maxUpdateTime;
    setMaxUpdateTimeIsSet(true);
    this.minPublishTime = minPublishTime;
    setMinPublishTimeIsSet(true);
    this.maxPublishTime = maxPublishTime;
    setMaxPublishTimeIsSet(true);
    this.sortField = sortField;
    this.sortType = sortType;
    this.from = from;
    setFromIsSet(true);
    this.count = count;
    setCountIsSet(true);
    this.specialId = specialId;
    setSpecialIdIsSet(true);
    this.specialType = specialType;
    setSpecialTypeIsSet(true);
    this.minAnswerNum = minAnswerNum;
    setMinAnswerNumIsSet(true);
    this.maxAnswerNum = maxAnswerNum;
    setMaxAnswerNumIsSet(true);
    this.autoComplete = autoComplete;
    setAutoCompleteIsSet(true);
    this.banBpId = banBpId;
    setBanBpIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSearchQuestionCondition(TSearchQuestionCondition other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bpId = other.bpId;
    if (other.isSetKeywords()) {
      this.keywords = other.keywords;
    }
    if (other.isSetTagIds()) {
      this.tagIds = other.tagIds;
    }
    if (other.isSetStatusArray()) {
      this.statusArray = other.statusArray;
    }
    this.relationType = other.relationType;
    this.relationId = other.relationId;
    this.source = other.source;
    this.titleOnly = other.titleOnly;
    this.minCreateTime = other.minCreateTime;
    this.maxCreateTime = other.maxCreateTime;
    this.minUpdateTime = other.minUpdateTime;
    this.maxUpdateTime = other.maxUpdateTime;
    this.minPublishTime = other.minPublishTime;
    this.maxPublishTime = other.maxPublishTime;
    if (other.isSetSortField()) {
      this.sortField = other.sortField;
    }
    if (other.isSetSortType()) {
      this.sortType = other.sortType;
    }
    this.from = other.from;
    this.count = other.count;
    this.specialId = other.specialId;
    this.specialType = other.specialType;
    this.minAnswerNum = other.minAnswerNum;
    this.maxAnswerNum = other.maxAnswerNum;
    this.autoComplete = other.autoComplete;
    this.banBpId = other.banBpId;
  }

  public TSearchQuestionCondition deepCopy() {
    return new TSearchQuestionCondition(this);
  }

  @Override
  public void clear() {
    this.bpId = -1L;

    this.keywords = "";

    this.tagIds = "";

    this.statusArray = "";

    this.relationType = -1;

    this.relationId = -1L;

    this.source = -1;

    this.titleOnly = false;

    this.minCreateTime = -1L;

    this.maxCreateTime = -1L;

    this.minUpdateTime = -1L;

    this.maxUpdateTime = -1L;

    this.minPublishTime = -1L;

    this.maxPublishTime = -1L;

    this.sortField = "";

    this.sortType = com.sohu.bp.elite.model.SortType.ASC;

    this.from = 0;

    this.count = 0;

    this.specialId = -1L;

    this.specialType = -1;

    this.minAnswerNum = -1;

    this.maxAnswerNum = -1;

    this.autoComplete = -1;

    this.banBpId = -1L;

  }

  public long getBpId() {
    return this.bpId;
  }

  public TSearchQuestionCondition setBpId(long bpId) {
    this.bpId = bpId;
    setBpIdIsSet(true);
    return this;
  }

  public void unsetBpId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BPID_ISSET_ID);
  }

  /** Returns true if field bpId is set (has been assigned a value) and false otherwise */
  public boolean isSetBpId() {
    return EncodingUtils.testBit(__isset_bitfield, __BPID_ISSET_ID);
  }

  public void setBpIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BPID_ISSET_ID, value);
  }

  public String getKeywords() {
    return this.keywords;
  }

  public TSearchQuestionCondition setKeywords(String keywords) {
    this.keywords = keywords;
    return this;
  }

  public void unsetKeywords() {
    this.keywords = null;
  }

  /** Returns true if field keywords is set (has been assigned a value) and false otherwise */
  public boolean isSetKeywords() {
    return this.keywords != null;
  }

  public void setKeywordsIsSet(boolean value) {
    if (!value) {
      this.keywords = null;
    }
  }

  public String getTagIds() {
    return this.tagIds;
  }

  public TSearchQuestionCondition setTagIds(String tagIds) {
    this.tagIds = tagIds;
    return this;
  }

  public void unsetTagIds() {
    this.tagIds = null;
  }

  /** Returns true if field tagIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTagIds() {
    return this.tagIds != null;
  }

  public void setTagIdsIsSet(boolean value) {
    if (!value) {
      this.tagIds = null;
    }
  }

  public String getStatusArray() {
    return this.statusArray;
  }

  public TSearchQuestionCondition setStatusArray(String statusArray) {
    this.statusArray = statusArray;
    return this;
  }

  public void unsetStatusArray() {
    this.statusArray = null;
  }

  /** Returns true if field statusArray is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusArray() {
    return this.statusArray != null;
  }

  public void setStatusArrayIsSet(boolean value) {
    if (!value) {
      this.statusArray = null;
    }
  }

  public int getRelationType() {
    return this.relationType;
  }

  public TSearchQuestionCondition setRelationType(int relationType) {
    this.relationType = relationType;
    setRelationTypeIsSet(true);
    return this;
  }

  public void unsetRelationType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATIONTYPE_ISSET_ID);
  }

  /** Returns true if field relationType is set (has been assigned a value) and false otherwise */
  public boolean isSetRelationType() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATIONTYPE_ISSET_ID);
  }

  public void setRelationTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATIONTYPE_ISSET_ID, value);
  }

  public long getRelationId() {
    return this.relationId;
  }

  public TSearchQuestionCondition setRelationId(long relationId) {
    this.relationId = relationId;
    setRelationIdIsSet(true);
    return this;
  }

  public void unsetRelationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATIONID_ISSET_ID);
  }

  /** Returns true if field relationId is set (has been assigned a value) and false otherwise */
  public boolean isSetRelationId() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATIONID_ISSET_ID);
  }

  public void setRelationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATIONID_ISSET_ID, value);
  }

  public int getSource() {
    return this.source;
  }

  public TSearchQuestionCondition setSource(int source) {
    this.source = source;
    setSourceIsSet(true);
    return this;
  }

  public void unsetSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return EncodingUtils.testBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCE_ISSET_ID, value);
  }

  public boolean isTitleOnly() {
    return this.titleOnly;
  }

  public TSearchQuestionCondition setTitleOnly(boolean titleOnly) {
    this.titleOnly = titleOnly;
    setTitleOnlyIsSet(true);
    return this;
  }

  public void unsetTitleOnly() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TITLEONLY_ISSET_ID);
  }

  /** Returns true if field titleOnly is set (has been assigned a value) and false otherwise */
  public boolean isSetTitleOnly() {
    return EncodingUtils.testBit(__isset_bitfield, __TITLEONLY_ISSET_ID);
  }

  public void setTitleOnlyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TITLEONLY_ISSET_ID, value);
  }

  public long getMinCreateTime() {
    return this.minCreateTime;
  }

  public TSearchQuestionCondition setMinCreateTime(long minCreateTime) {
    this.minCreateTime = minCreateTime;
    setMinCreateTimeIsSet(true);
    return this;
  }

  public void unsetMinCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINCREATETIME_ISSET_ID);
  }

  /** Returns true if field minCreateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMinCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MINCREATETIME_ISSET_ID);
  }

  public void setMinCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINCREATETIME_ISSET_ID, value);
  }

  public long getMaxCreateTime() {
    return this.maxCreateTime;
  }

  public TSearchQuestionCondition setMaxCreateTime(long maxCreateTime) {
    this.maxCreateTime = maxCreateTime;
    setMaxCreateTimeIsSet(true);
    return this;
  }

  public void unsetMaxCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXCREATETIME_ISSET_ID);
  }

  /** Returns true if field maxCreateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXCREATETIME_ISSET_ID);
  }

  public void setMaxCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXCREATETIME_ISSET_ID, value);
  }

  public long getMinUpdateTime() {
    return this.minUpdateTime;
  }

  public TSearchQuestionCondition setMinUpdateTime(long minUpdateTime) {
    this.minUpdateTime = minUpdateTime;
    setMinUpdateTimeIsSet(true);
    return this;
  }

  public void unsetMinUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINUPDATETIME_ISSET_ID);
  }

  /** Returns true if field minUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMinUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MINUPDATETIME_ISSET_ID);
  }

  public void setMinUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINUPDATETIME_ISSET_ID, value);
  }

  public long getMaxUpdateTime() {
    return this.maxUpdateTime;
  }

  public TSearchQuestionCondition setMaxUpdateTime(long maxUpdateTime) {
    this.maxUpdateTime = maxUpdateTime;
    setMaxUpdateTimeIsSet(true);
    return this;
  }

  public void unsetMaxUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXUPDATETIME_ISSET_ID);
  }

  /** Returns true if field maxUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXUPDATETIME_ISSET_ID);
  }

  public void setMaxUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXUPDATETIME_ISSET_ID, value);
  }

  public long getMinPublishTime() {
    return this.minPublishTime;
  }

  public TSearchQuestionCondition setMinPublishTime(long minPublishTime) {
    this.minPublishTime = minPublishTime;
    setMinPublishTimeIsSet(true);
    return this;
  }

  public void unsetMinPublishTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINPUBLISHTIME_ISSET_ID);
  }

  /** Returns true if field minPublishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMinPublishTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MINPUBLISHTIME_ISSET_ID);
  }

  public void setMinPublishTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINPUBLISHTIME_ISSET_ID, value);
  }

  public long getMaxPublishTime() {
    return this.maxPublishTime;
  }

  public TSearchQuestionCondition setMaxPublishTime(long maxPublishTime) {
    this.maxPublishTime = maxPublishTime;
    setMaxPublishTimeIsSet(true);
    return this;
  }

  public void unsetMaxPublishTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXPUBLISHTIME_ISSET_ID);
  }

  /** Returns true if field maxPublishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxPublishTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXPUBLISHTIME_ISSET_ID);
  }

  public void setMaxPublishTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXPUBLISHTIME_ISSET_ID, value);
  }

  public String getSortField() {
    return this.sortField;
  }

  public TSearchQuestionCondition setSortField(String sortField) {
    this.sortField = sortField;
    return this;
  }

  public void unsetSortField() {
    this.sortField = null;
  }

  /** Returns true if field sortField is set (has been assigned a value) and false otherwise */
  public boolean isSetSortField() {
    return this.sortField != null;
  }

  public void setSortFieldIsSet(boolean value) {
    if (!value) {
      this.sortField = null;
    }
  }

  /**
   * 
   * @see SortType
   */
  public SortType getSortType() {
    return this.sortType;
  }

  /**
   * 
   * @see SortType
   */
  public TSearchQuestionCondition setSortType(SortType sortType) {
    this.sortType = sortType;
    return this;
  }

  public void unsetSortType() {
    this.sortType = null;
  }

  /** Returns true if field sortType is set (has been assigned a value) and false otherwise */
  public boolean isSetSortType() {
    return this.sortType != null;
  }

  public void setSortTypeIsSet(boolean value) {
    if (!value) {
      this.sortType = null;
    }
  }

  public int getFrom() {
    return this.from;
  }

  public TSearchQuestionCondition setFrom(int from) {
    this.from = from;
    setFromIsSet(true);
    return this;
  }

  public void unsetFrom() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROM_ISSET_ID);
  }

  /** Returns true if field from is set (has been assigned a value) and false otherwise */
  public boolean isSetFrom() {
    return EncodingUtils.testBit(__isset_bitfield, __FROM_ISSET_ID);
  }

  public void setFromIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROM_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public TSearchQuestionCondition setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public long getSpecialId() {
    return this.specialId;
  }

  public TSearchQuestionCondition setSpecialId(long specialId) {
    this.specialId = specialId;
    setSpecialIdIsSet(true);
    return this;
  }

  public void unsetSpecialId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECIALID_ISSET_ID);
  }

  /** Returns true if field specialId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecialId() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECIALID_ISSET_ID);
  }

  public void setSpecialIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECIALID_ISSET_ID, value);
  }

  public int getSpecialType() {
    return this.specialType;
  }

  public TSearchQuestionCondition setSpecialType(int specialType) {
    this.specialType = specialType;
    setSpecialTypeIsSet(true);
    return this;
  }

  public void unsetSpecialType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECIALTYPE_ISSET_ID);
  }

  /** Returns true if field specialType is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecialType() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECIALTYPE_ISSET_ID);
  }

  public void setSpecialTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECIALTYPE_ISSET_ID, value);
  }

  public int getMinAnswerNum() {
    return this.minAnswerNum;
  }

  public TSearchQuestionCondition setMinAnswerNum(int minAnswerNum) {
    this.minAnswerNum = minAnswerNum;
    setMinAnswerNumIsSet(true);
    return this;
  }

  public void unsetMinAnswerNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINANSWERNUM_ISSET_ID);
  }

  /** Returns true if field minAnswerNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMinAnswerNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MINANSWERNUM_ISSET_ID);
  }

  public void setMinAnswerNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINANSWERNUM_ISSET_ID, value);
  }

  public int getMaxAnswerNum() {
    return this.maxAnswerNum;
  }

  public TSearchQuestionCondition setMaxAnswerNum(int maxAnswerNum) {
    this.maxAnswerNum = maxAnswerNum;
    setMaxAnswerNumIsSet(true);
    return this;
  }

  public void unsetMaxAnswerNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXANSWERNUM_ISSET_ID);
  }

  /** Returns true if field maxAnswerNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxAnswerNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXANSWERNUM_ISSET_ID);
  }

  public void setMaxAnswerNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXANSWERNUM_ISSET_ID, value);
  }

  public int getAutoComplete() {
    return this.autoComplete;
  }

  public TSearchQuestionCondition setAutoComplete(int autoComplete) {
    this.autoComplete = autoComplete;
    setAutoCompleteIsSet(true);
    return this;
  }

  public void unsetAutoComplete() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUTOCOMPLETE_ISSET_ID);
  }

  /** Returns true if field autoComplete is set (has been assigned a value) and false otherwise */
  public boolean isSetAutoComplete() {
    return EncodingUtils.testBit(__isset_bitfield, __AUTOCOMPLETE_ISSET_ID);
  }

  public void setAutoCompleteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUTOCOMPLETE_ISSET_ID, value);
  }

  public long getBanBpId() {
    return this.banBpId;
  }

  public TSearchQuestionCondition setBanBpId(long banBpId) {
    this.banBpId = banBpId;
    setBanBpIdIsSet(true);
    return this;
  }

  public void unsetBanBpId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANBPID_ISSET_ID);
  }

  /** Returns true if field banBpId is set (has been assigned a value) and false otherwise */
  public boolean isSetBanBpId() {
    return EncodingUtils.testBit(__isset_bitfield, __BANBPID_ISSET_ID);
  }

  public void setBanBpIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANBPID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BP_ID:
      if (value == null) {
        unsetBpId();
      } else {
        setBpId((Long)value);
      }
      break;

    case KEYWORDS:
      if (value == null) {
        unsetKeywords();
      } else {
        setKeywords((String)value);
      }
      break;

    case TAG_IDS:
      if (value == null) {
        unsetTagIds();
      } else {
        setTagIds((String)value);
      }
      break;

    case STATUS_ARRAY:
      if (value == null) {
        unsetStatusArray();
      } else {
        setStatusArray((String)value);
      }
      break;

    case RELATION_TYPE:
      if (value == null) {
        unsetRelationType();
      } else {
        setRelationType((Integer)value);
      }
      break;

    case RELATION_ID:
      if (value == null) {
        unsetRelationId();
      } else {
        setRelationId((Long)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Integer)value);
      }
      break;

    case TITLE_ONLY:
      if (value == null) {
        unsetTitleOnly();
      } else {
        setTitleOnly((Boolean)value);
      }
      break;

    case MIN_CREATE_TIME:
      if (value == null) {
        unsetMinCreateTime();
      } else {
        setMinCreateTime((Long)value);
      }
      break;

    case MAX_CREATE_TIME:
      if (value == null) {
        unsetMaxCreateTime();
      } else {
        setMaxCreateTime((Long)value);
      }
      break;

    case MIN_UPDATE_TIME:
      if (value == null) {
        unsetMinUpdateTime();
      } else {
        setMinUpdateTime((Long)value);
      }
      break;

    case MAX_UPDATE_TIME:
      if (value == null) {
        unsetMaxUpdateTime();
      } else {
        setMaxUpdateTime((Long)value);
      }
      break;

    case MIN_PUBLISH_TIME:
      if (value == null) {
        unsetMinPublishTime();
      } else {
        setMinPublishTime((Long)value);
      }
      break;

    case MAX_PUBLISH_TIME:
      if (value == null) {
        unsetMaxPublishTime();
      } else {
        setMaxPublishTime((Long)value);
      }
      break;

    case SORT_FIELD:
      if (value == null) {
        unsetSortField();
      } else {
        setSortField((String)value);
      }
      break;

    case SORT_TYPE:
      if (value == null) {
        unsetSortType();
      } else {
        setSortType((SortType)value);
      }
      break;

    case FROM:
      if (value == null) {
        unsetFrom();
      } else {
        setFrom((Integer)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case SPECIAL_ID:
      if (value == null) {
        unsetSpecialId();
      } else {
        setSpecialId((Long)value);
      }
      break;

    case SPECIAL_TYPE:
      if (value == null) {
        unsetSpecialType();
      } else {
        setSpecialType((Integer)value);
      }
      break;

    case MIN_ANSWER_NUM:
      if (value == null) {
        unsetMinAnswerNum();
      } else {
        setMinAnswerNum((Integer)value);
      }
      break;

    case MAX_ANSWER_NUM:
      if (value == null) {
        unsetMaxAnswerNum();
      } else {
        setMaxAnswerNum((Integer)value);
      }
      break;

    case AUTO_COMPLETE:
      if (value == null) {
        unsetAutoComplete();
      } else {
        setAutoComplete((Integer)value);
      }
      break;

    case BAN_BP_ID:
      if (value == null) {
        unsetBanBpId();
      } else {
        setBanBpId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BP_ID:
      return Long.valueOf(getBpId());

    case KEYWORDS:
      return getKeywords();

    case TAG_IDS:
      return getTagIds();

    case STATUS_ARRAY:
      return getStatusArray();

    case RELATION_TYPE:
      return Integer.valueOf(getRelationType());

    case RELATION_ID:
      return Long.valueOf(getRelationId());

    case SOURCE:
      return Integer.valueOf(getSource());

    case TITLE_ONLY:
      return Boolean.valueOf(isTitleOnly());

    case MIN_CREATE_TIME:
      return Long.valueOf(getMinCreateTime());

    case MAX_CREATE_TIME:
      return Long.valueOf(getMaxCreateTime());

    case MIN_UPDATE_TIME:
      return Long.valueOf(getMinUpdateTime());

    case MAX_UPDATE_TIME:
      return Long.valueOf(getMaxUpdateTime());

    case MIN_PUBLISH_TIME:
      return Long.valueOf(getMinPublishTime());

    case MAX_PUBLISH_TIME:
      return Long.valueOf(getMaxPublishTime());

    case SORT_FIELD:
      return getSortField();

    case SORT_TYPE:
      return getSortType();

    case FROM:
      return Integer.valueOf(getFrom());

    case COUNT:
      return Integer.valueOf(getCount());

    case SPECIAL_ID:
      return Long.valueOf(getSpecialId());

    case SPECIAL_TYPE:
      return Integer.valueOf(getSpecialType());

    case MIN_ANSWER_NUM:
      return Integer.valueOf(getMinAnswerNum());

    case MAX_ANSWER_NUM:
      return Integer.valueOf(getMaxAnswerNum());

    case AUTO_COMPLETE:
      return Integer.valueOf(getAutoComplete());

    case BAN_BP_ID:
      return Long.valueOf(getBanBpId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BP_ID:
      return isSetBpId();
    case KEYWORDS:
      return isSetKeywords();
    case TAG_IDS:
      return isSetTagIds();
    case STATUS_ARRAY:
      return isSetStatusArray();
    case RELATION_TYPE:
      return isSetRelationType();
    case RELATION_ID:
      return isSetRelationId();
    case SOURCE:
      return isSetSource();
    case TITLE_ONLY:
      return isSetTitleOnly();
    case MIN_CREATE_TIME:
      return isSetMinCreateTime();
    case MAX_CREATE_TIME:
      return isSetMaxCreateTime();
    case MIN_UPDATE_TIME:
      return isSetMinUpdateTime();
    case MAX_UPDATE_TIME:
      return isSetMaxUpdateTime();
    case MIN_PUBLISH_TIME:
      return isSetMinPublishTime();
    case MAX_PUBLISH_TIME:
      return isSetMaxPublishTime();
    case SORT_FIELD:
      return isSetSortField();
    case SORT_TYPE:
      return isSetSortType();
    case FROM:
      return isSetFrom();
    case COUNT:
      return isSetCount();
    case SPECIAL_ID:
      return isSetSpecialId();
    case SPECIAL_TYPE:
      return isSetSpecialType();
    case MIN_ANSWER_NUM:
      return isSetMinAnswerNum();
    case MAX_ANSWER_NUM:
      return isSetMaxAnswerNum();
    case AUTO_COMPLETE:
      return isSetAutoComplete();
    case BAN_BP_ID:
      return isSetBanBpId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSearchQuestionCondition)
      return this.equals((TSearchQuestionCondition)that);
    return false;
  }

  public boolean equals(TSearchQuestionCondition that) {
    if (that == null)
      return false;

    boolean this_present_bpId = true;
    boolean that_present_bpId = true;
    if (this_present_bpId || that_present_bpId) {
      if (!(this_present_bpId && that_present_bpId))
        return false;
      if (this.bpId != that.bpId)
        return false;
    }

    boolean this_present_keywords = true && this.isSetKeywords();
    boolean that_present_keywords = true && that.isSetKeywords();
    if (this_present_keywords || that_present_keywords) {
      if (!(this_present_keywords && that_present_keywords))
        return false;
      if (!this.keywords.equals(that.keywords))
        return false;
    }

    boolean this_present_tagIds = true && this.isSetTagIds();
    boolean that_present_tagIds = true && that.isSetTagIds();
    if (this_present_tagIds || that_present_tagIds) {
      if (!(this_present_tagIds && that_present_tagIds))
        return false;
      if (!this.tagIds.equals(that.tagIds))
        return false;
    }

    boolean this_present_statusArray = true && this.isSetStatusArray();
    boolean that_present_statusArray = true && that.isSetStatusArray();
    if (this_present_statusArray || that_present_statusArray) {
      if (!(this_present_statusArray && that_present_statusArray))
        return false;
      if (!this.statusArray.equals(that.statusArray))
        return false;
    }

    boolean this_present_relationType = true;
    boolean that_present_relationType = true;
    if (this_present_relationType || that_present_relationType) {
      if (!(this_present_relationType && that_present_relationType))
        return false;
      if (this.relationType != that.relationType)
        return false;
    }

    boolean this_present_relationId = true;
    boolean that_present_relationId = true;
    if (this_present_relationId || that_present_relationId) {
      if (!(this_present_relationId && that_present_relationId))
        return false;
      if (this.relationId != that.relationId)
        return false;
    }

    boolean this_present_source = true;
    boolean that_present_source = true;
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    boolean this_present_titleOnly = true;
    boolean that_present_titleOnly = true;
    if (this_present_titleOnly || that_present_titleOnly) {
      if (!(this_present_titleOnly && that_present_titleOnly))
        return false;
      if (this.titleOnly != that.titleOnly)
        return false;
    }

    boolean this_present_minCreateTime = true;
    boolean that_present_minCreateTime = true;
    if (this_present_minCreateTime || that_present_minCreateTime) {
      if (!(this_present_minCreateTime && that_present_minCreateTime))
        return false;
      if (this.minCreateTime != that.minCreateTime)
        return false;
    }

    boolean this_present_maxCreateTime = true;
    boolean that_present_maxCreateTime = true;
    if (this_present_maxCreateTime || that_present_maxCreateTime) {
      if (!(this_present_maxCreateTime && that_present_maxCreateTime))
        return false;
      if (this.maxCreateTime != that.maxCreateTime)
        return false;
    }

    boolean this_present_minUpdateTime = true;
    boolean that_present_minUpdateTime = true;
    if (this_present_minUpdateTime || that_present_minUpdateTime) {
      if (!(this_present_minUpdateTime && that_present_minUpdateTime))
        return false;
      if (this.minUpdateTime != that.minUpdateTime)
        return false;
    }

    boolean this_present_maxUpdateTime = true;
    boolean that_present_maxUpdateTime = true;
    if (this_present_maxUpdateTime || that_present_maxUpdateTime) {
      if (!(this_present_maxUpdateTime && that_present_maxUpdateTime))
        return false;
      if (this.maxUpdateTime != that.maxUpdateTime)
        return false;
    }

    boolean this_present_minPublishTime = true;
    boolean that_present_minPublishTime = true;
    if (this_present_minPublishTime || that_present_minPublishTime) {
      if (!(this_present_minPublishTime && that_present_minPublishTime))
        return false;
      if (this.minPublishTime != that.minPublishTime)
        return false;
    }

    boolean this_present_maxPublishTime = true;
    boolean that_present_maxPublishTime = true;
    if (this_present_maxPublishTime || that_present_maxPublishTime) {
      if (!(this_present_maxPublishTime && that_present_maxPublishTime))
        return false;
      if (this.maxPublishTime != that.maxPublishTime)
        return false;
    }

    boolean this_present_sortField = true && this.isSetSortField();
    boolean that_present_sortField = true && that.isSetSortField();
    if (this_present_sortField || that_present_sortField) {
      if (!(this_present_sortField && that_present_sortField))
        return false;
      if (!this.sortField.equals(that.sortField))
        return false;
    }

    boolean this_present_sortType = true && this.isSetSortType();
    boolean that_present_sortType = true && that.isSetSortType();
    if (this_present_sortType || that_present_sortType) {
      if (!(this_present_sortType && that_present_sortType))
        return false;
      if (!this.sortType.equals(that.sortType))
        return false;
    }

    boolean this_present_from = true;
    boolean that_present_from = true;
    if (this_present_from || that_present_from) {
      if (!(this_present_from && that_present_from))
        return false;
      if (this.from != that.from)
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_specialId = true;
    boolean that_present_specialId = true;
    if (this_present_specialId || that_present_specialId) {
      if (!(this_present_specialId && that_present_specialId))
        return false;
      if (this.specialId != that.specialId)
        return false;
    }

    boolean this_present_specialType = true;
    boolean that_present_specialType = true;
    if (this_present_specialType || that_present_specialType) {
      if (!(this_present_specialType && that_present_specialType))
        return false;
      if (this.specialType != that.specialType)
        return false;
    }

    boolean this_present_minAnswerNum = true;
    boolean that_present_minAnswerNum = true;
    if (this_present_minAnswerNum || that_present_minAnswerNum) {
      if (!(this_present_minAnswerNum && that_present_minAnswerNum))
        return false;
      if (this.minAnswerNum != that.minAnswerNum)
        return false;
    }

    boolean this_present_maxAnswerNum = true;
    boolean that_present_maxAnswerNum = true;
    if (this_present_maxAnswerNum || that_present_maxAnswerNum) {
      if (!(this_present_maxAnswerNum && that_present_maxAnswerNum))
        return false;
      if (this.maxAnswerNum != that.maxAnswerNum)
        return false;
    }

    boolean this_present_autoComplete = true;
    boolean that_present_autoComplete = true;
    if (this_present_autoComplete || that_present_autoComplete) {
      if (!(this_present_autoComplete && that_present_autoComplete))
        return false;
      if (this.autoComplete != that.autoComplete)
        return false;
    }

    boolean this_present_banBpId = true;
    boolean that_present_banBpId = true;
    if (this_present_banBpId || that_present_banBpId) {
      if (!(this_present_banBpId && that_present_banBpId))
        return false;
      if (this.banBpId != that.banBpId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TSearchQuestionCondition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TSearchQuestionCondition typedOther = (TSearchQuestionCondition)other;

    lastComparison = Boolean.valueOf(isSetBpId()).compareTo(typedOther.isSetBpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bpId, typedOther.bpId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeywords()).compareTo(typedOther.isSetKeywords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeywords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywords, typedOther.keywords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagIds()).compareTo(typedOther.isSetTagIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagIds, typedOther.tagIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusArray()).compareTo(typedOther.isSetStatusArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusArray, typedOther.statusArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelationType()).compareTo(typedOther.isSetRelationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationType, typedOther.relationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelationId()).compareTo(typedOther.isSetRelationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationId, typedOther.relationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitleOnly()).compareTo(typedOther.isSetTitleOnly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitleOnly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titleOnly, typedOther.titleOnly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinCreateTime()).compareTo(typedOther.isSetMinCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minCreateTime, typedOther.minCreateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxCreateTime()).compareTo(typedOther.isSetMaxCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCreateTime, typedOther.maxCreateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinUpdateTime()).compareTo(typedOther.isSetMinUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minUpdateTime, typedOther.minUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxUpdateTime()).compareTo(typedOther.isSetMaxUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxUpdateTime, typedOther.maxUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinPublishTime()).compareTo(typedOther.isSetMinPublishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinPublishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minPublishTime, typedOther.minPublishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxPublishTime()).compareTo(typedOther.isSetMaxPublishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxPublishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxPublishTime, typedOther.maxPublishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortField()).compareTo(typedOther.isSetSortField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortField, typedOther.sortField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortType()).compareTo(typedOther.isSetSortType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortType, typedOther.sortType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrom()).compareTo(typedOther.isSetFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.from, typedOther.from);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecialId()).compareTo(typedOther.isSetSpecialId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecialId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialId, typedOther.specialId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecialType()).compareTo(typedOther.isSetSpecialType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecialType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialType, typedOther.specialType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinAnswerNum()).compareTo(typedOther.isSetMinAnswerNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinAnswerNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minAnswerNum, typedOther.minAnswerNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxAnswerNum()).compareTo(typedOther.isSetMaxAnswerNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxAnswerNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxAnswerNum, typedOther.maxAnswerNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAutoComplete()).compareTo(typedOther.isSetAutoComplete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutoComplete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autoComplete, typedOther.autoComplete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBanBpId()).compareTo(typedOther.isSetBanBpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBanBpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.banBpId, typedOther.banBpId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSearchQuestionCondition(");
    boolean first = true;

    sb.append("bpId:");
    sb.append(this.bpId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("keywords:");
    if (this.keywords == null) {
      sb.append("null");
    } else {
      sb.append(this.keywords);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagIds:");
    if (this.tagIds == null) {
      sb.append("null");
    } else {
      sb.append(this.tagIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusArray:");
    if (this.statusArray == null) {
      sb.append("null");
    } else {
      sb.append(this.statusArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("relationType:");
    sb.append(this.relationType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("relationId:");
    sb.append(this.relationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    sb.append(this.source);
    first = false;
    if (!first) sb.append(", ");
    sb.append("titleOnly:");
    sb.append(this.titleOnly);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minCreateTime:");
    sb.append(this.minCreateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxCreateTime:");
    sb.append(this.maxCreateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minUpdateTime:");
    sb.append(this.minUpdateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxUpdateTime:");
    sb.append(this.maxUpdateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minPublishTime:");
    sb.append(this.minPublishTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxPublishTime:");
    sb.append(this.maxPublishTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortField:");
    if (this.sortField == null) {
      sb.append("null");
    } else {
      sb.append(this.sortField);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortType:");
    if (this.sortType == null) {
      sb.append("null");
    } else {
      sb.append(this.sortType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("from:");
    sb.append(this.from);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("specialId:");
    sb.append(this.specialId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("specialType:");
    sb.append(this.specialType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minAnswerNum:");
    sb.append(this.minAnswerNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxAnswerNum:");
    sb.append(this.maxAnswerNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("autoComplete:");
    sb.append(this.autoComplete);
    first = false;
    if (!first) sb.append(", ");
    sb.append("banBpId:");
    sb.append(this.banBpId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSearchQuestionConditionStandardSchemeFactory implements SchemeFactory {
    public TSearchQuestionConditionStandardScheme getScheme() {
      return new TSearchQuestionConditionStandardScheme();
    }
  }

  private static class TSearchQuestionConditionStandardScheme extends StandardScheme<TSearchQuestionCondition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSearchQuestionCondition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bpId = iprot.readI64();
              struct.setBpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEYWORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keywords = iprot.readString();
              struct.setKeywordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TAG_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tagIds = iprot.readString();
              struct.setTagIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statusArray = iprot.readString();
              struct.setStatusArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RELATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.relationType = iprot.readI32();
              struct.setRelationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RELATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.relationId = iprot.readI64();
              struct.setRelationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.source = iprot.readI32();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TITLE_ONLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.titleOnly = iprot.readBool();
              struct.setTitleOnlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MIN_CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.minCreateTime = iprot.readI64();
              struct.setMinCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MAX_CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxCreateTime = iprot.readI64();
              struct.setMaxCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MIN_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.minUpdateTime = iprot.readI64();
              struct.setMinUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MAX_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxUpdateTime = iprot.readI64();
              struct.setMaxUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MIN_PUBLISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.minPublishTime = iprot.readI64();
              struct.setMinPublishTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MAX_PUBLISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxPublishTime = iprot.readI64();
              struct.setMaxPublishTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SORT_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sortField = iprot.readString();
              struct.setSortFieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SORT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sortType = SortType.findByValue(iprot.readI32());
              struct.setSortTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.from = iprot.readI32();
              struct.setFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SPECIAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.specialId = iprot.readI64();
              struct.setSpecialIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SPECIAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.specialType = iprot.readI32();
              struct.setSpecialTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MIN_ANSWER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minAnswerNum = iprot.readI32();
              struct.setMinAnswerNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // MAX_ANSWER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxAnswerNum = iprot.readI32();
              struct.setMaxAnswerNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // AUTO_COMPLETE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.autoComplete = iprot.readI32();
              struct.setAutoCompleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // BAN_BP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.banBpId = iprot.readI64();
              struct.setBanBpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSearchQuestionCondition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BP_ID_FIELD_DESC);
      oprot.writeI64(struct.bpId);
      oprot.writeFieldEnd();
      if (struct.keywords != null) {
        oprot.writeFieldBegin(KEYWORDS_FIELD_DESC);
        oprot.writeString(struct.keywords);
        oprot.writeFieldEnd();
      }
      if (struct.tagIds != null) {
        oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
        oprot.writeString(struct.tagIds);
        oprot.writeFieldEnd();
      }
      if (struct.statusArray != null) {
        oprot.writeFieldBegin(STATUS_ARRAY_FIELD_DESC);
        oprot.writeString(struct.statusArray);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RELATION_TYPE_FIELD_DESC);
      oprot.writeI32(struct.relationType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RELATION_ID_FIELD_DESC);
      oprot.writeI64(struct.relationId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SOURCE_FIELD_DESC);
      oprot.writeI32(struct.source);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TITLE_ONLY_FIELD_DESC);
      oprot.writeBool(struct.titleOnly);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.minCreateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.maxCreateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.minUpdateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.maxUpdateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_PUBLISH_TIME_FIELD_DESC);
      oprot.writeI64(struct.minPublishTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_PUBLISH_TIME_FIELD_DESC);
      oprot.writeI64(struct.maxPublishTime);
      oprot.writeFieldEnd();
      if (struct.sortField != null) {
        oprot.writeFieldBegin(SORT_FIELD_FIELD_DESC);
        oprot.writeString(struct.sortField);
        oprot.writeFieldEnd();
      }
      if (struct.sortType != null) {
        oprot.writeFieldBegin(SORT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.sortType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FROM_FIELD_DESC);
      oprot.writeI32(struct.from);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(struct.count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPECIAL_ID_FIELD_DESC);
      oprot.writeI64(struct.specialId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPECIAL_TYPE_FIELD_DESC);
      oprot.writeI32(struct.specialType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_ANSWER_NUM_FIELD_DESC);
      oprot.writeI32(struct.minAnswerNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_ANSWER_NUM_FIELD_DESC);
      oprot.writeI32(struct.maxAnswerNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUTO_COMPLETE_FIELD_DESC);
      oprot.writeI32(struct.autoComplete);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BAN_BP_ID_FIELD_DESC);
      oprot.writeI64(struct.banBpId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSearchQuestionConditionTupleSchemeFactory implements SchemeFactory {
    public TSearchQuestionConditionTupleScheme getScheme() {
      return new TSearchQuestionConditionTupleScheme();
    }
  }

  private static class TSearchQuestionConditionTupleScheme extends TupleScheme<TSearchQuestionCondition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSearchQuestionCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBpId()) {
        optionals.set(0);
      }
      if (struct.isSetKeywords()) {
        optionals.set(1);
      }
      if (struct.isSetTagIds()) {
        optionals.set(2);
      }
      if (struct.isSetStatusArray()) {
        optionals.set(3);
      }
      if (struct.isSetRelationType()) {
        optionals.set(4);
      }
      if (struct.isSetRelationId()) {
        optionals.set(5);
      }
      if (struct.isSetSource()) {
        optionals.set(6);
      }
      if (struct.isSetTitleOnly()) {
        optionals.set(7);
      }
      if (struct.isSetMinCreateTime()) {
        optionals.set(8);
      }
      if (struct.isSetMaxCreateTime()) {
        optionals.set(9);
      }
      if (struct.isSetMinUpdateTime()) {
        optionals.set(10);
      }
      if (struct.isSetMaxUpdateTime()) {
        optionals.set(11);
      }
      if (struct.isSetMinPublishTime()) {
        optionals.set(12);
      }
      if (struct.isSetMaxPublishTime()) {
        optionals.set(13);
      }
      if (struct.isSetSortField()) {
        optionals.set(14);
      }
      if (struct.isSetSortType()) {
        optionals.set(15);
      }
      if (struct.isSetFrom()) {
        optionals.set(16);
      }
      if (struct.isSetCount()) {
        optionals.set(17);
      }
      if (struct.isSetSpecialId()) {
        optionals.set(18);
      }
      if (struct.isSetSpecialType()) {
        optionals.set(19);
      }
      if (struct.isSetMinAnswerNum()) {
        optionals.set(20);
      }
      if (struct.isSetMaxAnswerNum()) {
        optionals.set(21);
      }
      if (struct.isSetAutoComplete()) {
        optionals.set(22);
      }
      if (struct.isSetBanBpId()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetBpId()) {
        oprot.writeI64(struct.bpId);
      }
      if (struct.isSetKeywords()) {
        oprot.writeString(struct.keywords);
      }
      if (struct.isSetTagIds()) {
        oprot.writeString(struct.tagIds);
      }
      if (struct.isSetStatusArray()) {
        oprot.writeString(struct.statusArray);
      }
      if (struct.isSetRelationType()) {
        oprot.writeI32(struct.relationType);
      }
      if (struct.isSetRelationId()) {
        oprot.writeI64(struct.relationId);
      }
      if (struct.isSetSource()) {
        oprot.writeI32(struct.source);
      }
      if (struct.isSetTitleOnly()) {
        oprot.writeBool(struct.titleOnly);
      }
      if (struct.isSetMinCreateTime()) {
        oprot.writeI64(struct.minCreateTime);
      }
      if (struct.isSetMaxCreateTime()) {
        oprot.writeI64(struct.maxCreateTime);
      }
      if (struct.isSetMinUpdateTime()) {
        oprot.writeI64(struct.minUpdateTime);
      }
      if (struct.isSetMaxUpdateTime()) {
        oprot.writeI64(struct.maxUpdateTime);
      }
      if (struct.isSetMinPublishTime()) {
        oprot.writeI64(struct.minPublishTime);
      }
      if (struct.isSetMaxPublishTime()) {
        oprot.writeI64(struct.maxPublishTime);
      }
      if (struct.isSetSortField()) {
        oprot.writeString(struct.sortField);
      }
      if (struct.isSetSortType()) {
        oprot.writeI32(struct.sortType.getValue());
      }
      if (struct.isSetFrom()) {
        oprot.writeI32(struct.from);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetSpecialId()) {
        oprot.writeI64(struct.specialId);
      }
      if (struct.isSetSpecialType()) {
        oprot.writeI32(struct.specialType);
      }
      if (struct.isSetMinAnswerNum()) {
        oprot.writeI32(struct.minAnswerNum);
      }
      if (struct.isSetMaxAnswerNum()) {
        oprot.writeI32(struct.maxAnswerNum);
      }
      if (struct.isSetAutoComplete()) {
        oprot.writeI32(struct.autoComplete);
      }
      if (struct.isSetBanBpId()) {
        oprot.writeI64(struct.banBpId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSearchQuestionCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.bpId = iprot.readI64();
        struct.setBpIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.keywords = iprot.readString();
        struct.setKeywordsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tagIds = iprot.readString();
        struct.setTagIdsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.statusArray = iprot.readString();
        struct.setStatusArrayIsSet(true);
      }
      if (incoming.get(4)) {
        struct.relationType = iprot.readI32();
        struct.setRelationTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.relationId = iprot.readI64();
        struct.setRelationIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.source = iprot.readI32();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.titleOnly = iprot.readBool();
        struct.setTitleOnlyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.minCreateTime = iprot.readI64();
        struct.setMinCreateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.maxCreateTime = iprot.readI64();
        struct.setMaxCreateTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.minUpdateTime = iprot.readI64();
        struct.setMinUpdateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.maxUpdateTime = iprot.readI64();
        struct.setMaxUpdateTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.minPublishTime = iprot.readI64();
        struct.setMinPublishTimeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.maxPublishTime = iprot.readI64();
        struct.setMaxPublishTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.sortField = iprot.readString();
        struct.setSortFieldIsSet(true);
      }
      if (incoming.get(15)) {
        struct.sortType = SortType.findByValue(iprot.readI32());
        struct.setSortTypeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.from = iprot.readI32();
        struct.setFromIsSet(true);
      }
      if (incoming.get(17)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(18)) {
        struct.specialId = iprot.readI64();
        struct.setSpecialIdIsSet(true);
      }
      if (incoming.get(19)) {
        struct.specialType = iprot.readI32();
        struct.setSpecialTypeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.minAnswerNum = iprot.readI32();
        struct.setMinAnswerNumIsSet(true);
      }
      if (incoming.get(21)) {
        struct.maxAnswerNum = iprot.readI32();
        struct.setMaxAnswerNumIsSet(true);
      }
      if (incoming.get(22)) {
        struct.autoComplete = iprot.readI32();
        struct.setAutoCompleteIsSet(true);
      }
      if (incoming.get(23)) {
        struct.banBpId = iprot.readI64();
        struct.setBanBpIdIsSet(true);
      }
    }
  }

}

