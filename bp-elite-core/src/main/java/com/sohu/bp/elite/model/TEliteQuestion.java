/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sohu.bp.elite.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TEliteQuestion implements org.apache.thrift.TBase<TEliteQuestion, TEliteQuestion._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEliteQuestion");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField BP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bpId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("detail", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagIds", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField PUBLISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("publishTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField RELATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("relationType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField RELATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("relationId", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField CREATE_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("createHost", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField CREATE_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("createPort", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField UPDATE_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("updateHost", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField UPDATE_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatePort", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField SOURCE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceUrl", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField AREA_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("areaCode", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField SPECIAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("specialId", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField SPECIAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("specialType", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField HIGHLIGHT_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("highlightText", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField HIGHLIGHT_WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("highlightWords", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("counts", org.apache.thrift.protocol.TType.MAP, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TEliteQuestionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TEliteQuestionTupleSchemeFactory());
  }

  public long id; // required
  public long bpId; // required
  public String title; // required
  public String detail; // required
  public String tagIds; // required
  public long createTime; // required
  public long updateTime; // required
  public long publishTime; // required
  public int relationType; // required
  public long relationId; // required
  public int source; // required
  public int status; // required
  public int version; // required
  public long createHost; // required
  public int createPort; // required
  public long updateHost; // required
  public int updatePort; // required
  public String sourceUrl; // required
  public long areaCode; // required
  public long specialId; // required
  public int specialType; // required
  public String options; // required
  public String highlightText; // required
  public String highlightWords; // required
  public Map<Integer,Integer> counts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    BP_ID((short)2, "bpId"),
    TITLE((short)3, "title"),
    DETAIL((short)4, "detail"),
    TAG_IDS((short)5, "tagIds"),
    CREATE_TIME((short)6, "createTime"),
    UPDATE_TIME((short)7, "updateTime"),
    PUBLISH_TIME((short)8, "publishTime"),
    RELATION_TYPE((short)9, "relationType"),
    RELATION_ID((short)10, "relationId"),
    SOURCE((short)11, "source"),
    STATUS((short)12, "status"),
    VERSION((short)13, "version"),
    CREATE_HOST((short)14, "createHost"),
    CREATE_PORT((short)15, "createPort"),
    UPDATE_HOST((short)16, "updateHost"),
    UPDATE_PORT((short)17, "updatePort"),
    SOURCE_URL((short)18, "sourceUrl"),
    AREA_CODE((short)19, "areaCode"),
    SPECIAL_ID((short)20, "specialId"),
    SPECIAL_TYPE((short)21, "specialType"),
    OPTIONS((short)22, "options"),
    HIGHLIGHT_TEXT((short)23, "highlightText"),
    HIGHLIGHT_WORDS((short)24, "highlightWords"),
    COUNTS((short)25, "counts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // BP_ID
          return BP_ID;
        case 3: // TITLE
          return TITLE;
        case 4: // DETAIL
          return DETAIL;
        case 5: // TAG_IDS
          return TAG_IDS;
        case 6: // CREATE_TIME
          return CREATE_TIME;
        case 7: // UPDATE_TIME
          return UPDATE_TIME;
        case 8: // PUBLISH_TIME
          return PUBLISH_TIME;
        case 9: // RELATION_TYPE
          return RELATION_TYPE;
        case 10: // RELATION_ID
          return RELATION_ID;
        case 11: // SOURCE
          return SOURCE;
        case 12: // STATUS
          return STATUS;
        case 13: // VERSION
          return VERSION;
        case 14: // CREATE_HOST
          return CREATE_HOST;
        case 15: // CREATE_PORT
          return CREATE_PORT;
        case 16: // UPDATE_HOST
          return UPDATE_HOST;
        case 17: // UPDATE_PORT
          return UPDATE_PORT;
        case 18: // SOURCE_URL
          return SOURCE_URL;
        case 19: // AREA_CODE
          return AREA_CODE;
        case 20: // SPECIAL_ID
          return SPECIAL_ID;
        case 21: // SPECIAL_TYPE
          return SPECIAL_TYPE;
        case 22: // OPTIONS
          return OPTIONS;
        case 23: // HIGHLIGHT_TEXT
          return HIGHLIGHT_TEXT;
        case 24: // HIGHLIGHT_WORDS
          return HIGHLIGHT_WORDS;
        case 25: // COUNTS
          return COUNTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __BPID_ISSET_ID = 1;
  private static final int __CREATETIME_ISSET_ID = 2;
  private static final int __UPDATETIME_ISSET_ID = 3;
  private static final int __PUBLISHTIME_ISSET_ID = 4;
  private static final int __RELATIONTYPE_ISSET_ID = 5;
  private static final int __RELATIONID_ISSET_ID = 6;
  private static final int __SOURCE_ISSET_ID = 7;
  private static final int __STATUS_ISSET_ID = 8;
  private static final int __VERSION_ISSET_ID = 9;
  private static final int __CREATEHOST_ISSET_ID = 10;
  private static final int __CREATEPORT_ISSET_ID = 11;
  private static final int __UPDATEHOST_ISSET_ID = 12;
  private static final int __UPDATEPORT_ISSET_ID = 13;
  private static final int __AREACODE_ISSET_ID = 14;
  private static final int __SPECIALID_ISSET_ID = 15;
  private static final int __SPECIALTYPE_ISSET_ID = 16;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BP_ID, new org.apache.thrift.meta_data.FieldMetaData("bpId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAIL, new org.apache.thrift.meta_data.FieldMetaData("detail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tagIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PUBLISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("publishTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RELATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("relationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RELATION_ID, new org.apache.thrift.meta_data.FieldMetaData("relationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_HOST, new org.apache.thrift.meta_data.FieldMetaData("createHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_PORT, new org.apache.thrift.meta_data.FieldMetaData("createPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_HOST, new org.apache.thrift.meta_data.FieldMetaData("updateHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_PORT, new org.apache.thrift.meta_data.FieldMetaData("updatePort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOURCE_URL, new org.apache.thrift.meta_data.FieldMetaData("sourceUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA_CODE, new org.apache.thrift.meta_data.FieldMetaData("areaCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPECIAL_ID, new org.apache.thrift.meta_data.FieldMetaData("specialId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPECIAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("specialType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIGHLIGHT_TEXT, new org.apache.thrift.meta_data.FieldMetaData("highlightText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIGHLIGHT_WORDS, new org.apache.thrift.meta_data.FieldMetaData("highlightWords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTS, new org.apache.thrift.meta_data.FieldMetaData("counts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEliteQuestion.class, metaDataMap);
  }

  public TEliteQuestion() {
    this.id = 0L;

    this.bpId = 0L;

    this.title = "";

    this.detail = "";

    this.tagIds = "";

    this.createTime = 0L;

    this.updateTime = 0L;

    this.publishTime = 0L;

    this.relationType = 0;

    this.relationId = 0L;

    this.source = 0;

    this.status = 0;

    this.version = 0;

    this.createHost = 0L;

    this.createPort = 0;

    this.updateHost = 0L;

    this.updatePort = 0;

    this.sourceUrl = "";

    this.areaCode = 0L;

    this.specialId = 0L;

    this.specialType = 0;

    this.options = "";

    this.highlightText = "";

    this.highlightWords = "";

  }

  public TEliteQuestion(
    long id,
    long bpId,
    String title,
    String detail,
    String tagIds,
    long createTime,
    long updateTime,
    long publishTime,
    int relationType,
    long relationId,
    int source,
    int status,
    int version,
    long createHost,
    int createPort,
    long updateHost,
    int updatePort,
    String sourceUrl,
    long areaCode,
    long specialId,
    int specialType,
    String options,
    String highlightText,
    String highlightWords,
    Map<Integer,Integer> counts)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.bpId = bpId;
    setBpIdIsSet(true);
    this.title = title;
    this.detail = detail;
    this.tagIds = tagIds;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.publishTime = publishTime;
    setPublishTimeIsSet(true);
    this.relationType = relationType;
    setRelationTypeIsSet(true);
    this.relationId = relationId;
    setRelationIdIsSet(true);
    this.source = source;
    setSourceIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.version = version;
    setVersionIsSet(true);
    this.createHost = createHost;
    setCreateHostIsSet(true);
    this.createPort = createPort;
    setCreatePortIsSet(true);
    this.updateHost = updateHost;
    setUpdateHostIsSet(true);
    this.updatePort = updatePort;
    setUpdatePortIsSet(true);
    this.sourceUrl = sourceUrl;
    this.areaCode = areaCode;
    setAreaCodeIsSet(true);
    this.specialId = specialId;
    setSpecialIdIsSet(true);
    this.specialType = specialType;
    setSpecialTypeIsSet(true);
    this.options = options;
    this.highlightText = highlightText;
    this.highlightWords = highlightWords;
    this.counts = counts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEliteQuestion(TEliteQuestion other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.bpId = other.bpId;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetDetail()) {
      this.detail = other.detail;
    }
    if (other.isSetTagIds()) {
      this.tagIds = other.tagIds;
    }
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    this.publishTime = other.publishTime;
    this.relationType = other.relationType;
    this.relationId = other.relationId;
    this.source = other.source;
    this.status = other.status;
    this.version = other.version;
    this.createHost = other.createHost;
    this.createPort = other.createPort;
    this.updateHost = other.updateHost;
    this.updatePort = other.updatePort;
    if (other.isSetSourceUrl()) {
      this.sourceUrl = other.sourceUrl;
    }
    this.areaCode = other.areaCode;
    this.specialId = other.specialId;
    this.specialType = other.specialType;
    if (other.isSetOptions()) {
      this.options = other.options;
    }
    if (other.isSetHighlightText()) {
      this.highlightText = other.highlightText;
    }
    if (other.isSetHighlightWords()) {
      this.highlightWords = other.highlightWords;
    }
    if (other.isSetCounts()) {
      Map<Integer,Integer> __this__counts = new HashMap<Integer,Integer>();
      for (Map.Entry<Integer, Integer> other_element : other.counts.entrySet()) {

        Integer other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Integer __this__counts_copy_key = other_element_key;

        Integer __this__counts_copy_value = other_element_value;

        __this__counts.put(__this__counts_copy_key, __this__counts_copy_value);
      }
      this.counts = __this__counts;
    }
  }

  public TEliteQuestion deepCopy() {
    return new TEliteQuestion(this);
  }

  @Override
  public void clear() {
    this.id = 0L;

    this.bpId = 0L;

    this.title = "";

    this.detail = "";

    this.tagIds = "";

    this.createTime = 0L;

    this.updateTime = 0L;

    this.publishTime = 0L;

    this.relationType = 0;

    this.relationId = 0L;

    this.source = 0;

    this.status = 0;

    this.version = 0;

    this.createHost = 0L;

    this.createPort = 0;

    this.updateHost = 0L;

    this.updatePort = 0;

    this.sourceUrl = "";

    this.areaCode = 0L;

    this.specialId = 0L;

    this.specialType = 0;

    this.options = "";

    this.highlightText = "";

    this.highlightWords = "";

    this.counts = null;
  }

  public long getId() {
    return this.id;
  }

  public TEliteQuestion setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getBpId() {
    return this.bpId;
  }

  public TEliteQuestion setBpId(long bpId) {
    this.bpId = bpId;
    setBpIdIsSet(true);
    return this;
  }

  public void unsetBpId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BPID_ISSET_ID);
  }

  /** Returns true if field bpId is set (has been assigned a value) and false otherwise */
  public boolean isSetBpId() {
    return EncodingUtils.testBit(__isset_bitfield, __BPID_ISSET_ID);
  }

  public void setBpIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BPID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public TEliteQuestion setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getDetail() {
    return this.detail;
  }

  public TEliteQuestion setDetail(String detail) {
    this.detail = detail;
    return this;
  }

  public void unsetDetail() {
    this.detail = null;
  }

  /** Returns true if field detail is set (has been assigned a value) and false otherwise */
  public boolean isSetDetail() {
    return this.detail != null;
  }

  public void setDetailIsSet(boolean value) {
    if (!value) {
      this.detail = null;
    }
  }

  public String getTagIds() {
    return this.tagIds;
  }

  public TEliteQuestion setTagIds(String tagIds) {
    this.tagIds = tagIds;
    return this;
  }

  public void unsetTagIds() {
    this.tagIds = null;
  }

  /** Returns true if field tagIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTagIds() {
    return this.tagIds != null;
  }

  public void setTagIdsIsSet(boolean value) {
    if (!value) {
      this.tagIds = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public TEliteQuestion setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public TEliteQuestion setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public long getPublishTime() {
    return this.publishTime;
  }

  public TEliteQuestion setPublishTime(long publishTime) {
    this.publishTime = publishTime;
    setPublishTimeIsSet(true);
    return this;
  }

  public void unsetPublishTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISHTIME_ISSET_ID);
  }

  /** Returns true if field publishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLISHTIME_ISSET_ID);
  }

  public void setPublishTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISHTIME_ISSET_ID, value);
  }

  public int getRelationType() {
    return this.relationType;
  }

  public TEliteQuestion setRelationType(int relationType) {
    this.relationType = relationType;
    setRelationTypeIsSet(true);
    return this;
  }

  public void unsetRelationType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATIONTYPE_ISSET_ID);
  }

  /** Returns true if field relationType is set (has been assigned a value) and false otherwise */
  public boolean isSetRelationType() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATIONTYPE_ISSET_ID);
  }

  public void setRelationTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATIONTYPE_ISSET_ID, value);
  }

  public long getRelationId() {
    return this.relationId;
  }

  public TEliteQuestion setRelationId(long relationId) {
    this.relationId = relationId;
    setRelationIdIsSet(true);
    return this;
  }

  public void unsetRelationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATIONID_ISSET_ID);
  }

  /** Returns true if field relationId is set (has been assigned a value) and false otherwise */
  public boolean isSetRelationId() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATIONID_ISSET_ID);
  }

  public void setRelationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATIONID_ISSET_ID, value);
  }

  public int getSource() {
    return this.source;
  }

  public TEliteQuestion setSource(int source) {
    this.source = source;
    setSourceIsSet(true);
    return this;
  }

  public void unsetSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return EncodingUtils.testBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCE_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TEliteQuestion setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getVersion() {
    return this.version;
  }

  public TEliteQuestion setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public long getCreateHost() {
    return this.createHost;
  }

  public TEliteQuestion setCreateHost(long createHost) {
    this.createHost = createHost;
    setCreateHostIsSet(true);
    return this;
  }

  public void unsetCreateHost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEHOST_ISSET_ID);
  }

  /** Returns true if field createHost is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateHost() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEHOST_ISSET_ID);
  }

  public void setCreateHostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEHOST_ISSET_ID, value);
  }

  public int getCreatePort() {
    return this.createPort;
  }

  public TEliteQuestion setCreatePort(int createPort) {
    this.createPort = createPort;
    setCreatePortIsSet(true);
    return this;
  }

  public void unsetCreatePort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEPORT_ISSET_ID);
  }

  /** Returns true if field createPort is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatePort() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEPORT_ISSET_ID);
  }

  public void setCreatePortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEPORT_ISSET_ID, value);
  }

  public long getUpdateHost() {
    return this.updateHost;
  }

  public TEliteQuestion setUpdateHost(long updateHost) {
    this.updateHost = updateHost;
    setUpdateHostIsSet(true);
    return this;
  }

  public void unsetUpdateHost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEHOST_ISSET_ID);
  }

  /** Returns true if field updateHost is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateHost() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEHOST_ISSET_ID);
  }

  public void setUpdateHostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEHOST_ISSET_ID, value);
  }

  public int getUpdatePort() {
    return this.updatePort;
  }

  public TEliteQuestion setUpdatePort(int updatePort) {
    this.updatePort = updatePort;
    setUpdatePortIsSet(true);
    return this;
  }

  public void unsetUpdatePort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEPORT_ISSET_ID);
  }

  /** Returns true if field updatePort is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatePort() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEPORT_ISSET_ID);
  }

  public void setUpdatePortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEPORT_ISSET_ID, value);
  }

  public String getSourceUrl() {
    return this.sourceUrl;
  }

  public TEliteQuestion setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  public void unsetSourceUrl() {
    this.sourceUrl = null;
  }

  /** Returns true if field sourceUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceUrl() {
    return this.sourceUrl != null;
  }

  public void setSourceUrlIsSet(boolean value) {
    if (!value) {
      this.sourceUrl = null;
    }
  }

  public long getAreaCode() {
    return this.areaCode;
  }

  public TEliteQuestion setAreaCode(long areaCode) {
    this.areaCode = areaCode;
    setAreaCodeIsSet(true);
    return this;
  }

  public void unsetAreaCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AREACODE_ISSET_ID);
  }

  /** Returns true if field areaCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaCode() {
    return EncodingUtils.testBit(__isset_bitfield, __AREACODE_ISSET_ID);
  }

  public void setAreaCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AREACODE_ISSET_ID, value);
  }

  public long getSpecialId() {
    return this.specialId;
  }

  public TEliteQuestion setSpecialId(long specialId) {
    this.specialId = specialId;
    setSpecialIdIsSet(true);
    return this;
  }

  public void unsetSpecialId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECIALID_ISSET_ID);
  }

  /** Returns true if field specialId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecialId() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECIALID_ISSET_ID);
  }

  public void setSpecialIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECIALID_ISSET_ID, value);
  }

  public int getSpecialType() {
    return this.specialType;
  }

  public TEliteQuestion setSpecialType(int specialType) {
    this.specialType = specialType;
    setSpecialTypeIsSet(true);
    return this;
  }

  public void unsetSpecialType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECIALTYPE_ISSET_ID);
  }

  /** Returns true if field specialType is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecialType() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECIALTYPE_ISSET_ID);
  }

  public void setSpecialTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECIALTYPE_ISSET_ID, value);
  }

  public String getOptions() {
    return this.options;
  }

  public TEliteQuestion setOptions(String options) {
    this.options = options;
    return this;
  }

  public void unsetOptions() {
    this.options = null;
  }

  /** Returns true if field options is set (has been assigned a value) and false otherwise */
  public boolean isSetOptions() {
    return this.options != null;
  }

  public void setOptionsIsSet(boolean value) {
    if (!value) {
      this.options = null;
    }
  }

  public String getHighlightText() {
    return this.highlightText;
  }

  public TEliteQuestion setHighlightText(String highlightText) {
    this.highlightText = highlightText;
    return this;
  }

  public void unsetHighlightText() {
    this.highlightText = null;
  }

  /** Returns true if field highlightText is set (has been assigned a value) and false otherwise */
  public boolean isSetHighlightText() {
    return this.highlightText != null;
  }

  public void setHighlightTextIsSet(boolean value) {
    if (!value) {
      this.highlightText = null;
    }
  }

  public String getHighlightWords() {
    return this.highlightWords;
  }

  public TEliteQuestion setHighlightWords(String highlightWords) {
    this.highlightWords = highlightWords;
    return this;
  }

  public void unsetHighlightWords() {
    this.highlightWords = null;
  }

  /** Returns true if field highlightWords is set (has been assigned a value) and false otherwise */
  public boolean isSetHighlightWords() {
    return this.highlightWords != null;
  }

  public void setHighlightWordsIsSet(boolean value) {
    if (!value) {
      this.highlightWords = null;
    }
  }

  public int getCountsSize() {
    return (this.counts == null) ? 0 : this.counts.size();
  }

  public void putToCounts(int key, int val) {
    if (this.counts == null) {
      this.counts = new HashMap<Integer,Integer>();
    }
    this.counts.put(key, val);
  }

  public Map<Integer,Integer> getCounts() {
    return this.counts;
  }

  public TEliteQuestion setCounts(Map<Integer,Integer> counts) {
    this.counts = counts;
    return this;
  }

  public void unsetCounts() {
    this.counts = null;
  }

  /** Returns true if field counts is set (has been assigned a value) and false otherwise */
  public boolean isSetCounts() {
    return this.counts != null;
  }

  public void setCountsIsSet(boolean value) {
    if (!value) {
      this.counts = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case BP_ID:
      if (value == null) {
        unsetBpId();
      } else {
        setBpId((Long)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case DETAIL:
      if (value == null) {
        unsetDetail();
      } else {
        setDetail((String)value);
      }
      break;

    case TAG_IDS:
      if (value == null) {
        unsetTagIds();
      } else {
        setTagIds((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case PUBLISH_TIME:
      if (value == null) {
        unsetPublishTime();
      } else {
        setPublishTime((Long)value);
      }
      break;

    case RELATION_TYPE:
      if (value == null) {
        unsetRelationType();
      } else {
        setRelationType((Integer)value);
      }
      break;

    case RELATION_ID:
      if (value == null) {
        unsetRelationId();
      } else {
        setRelationId((Long)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case CREATE_HOST:
      if (value == null) {
        unsetCreateHost();
      } else {
        setCreateHost((Long)value);
      }
      break;

    case CREATE_PORT:
      if (value == null) {
        unsetCreatePort();
      } else {
        setCreatePort((Integer)value);
      }
      break;

    case UPDATE_HOST:
      if (value == null) {
        unsetUpdateHost();
      } else {
        setUpdateHost((Long)value);
      }
      break;

    case UPDATE_PORT:
      if (value == null) {
        unsetUpdatePort();
      } else {
        setUpdatePort((Integer)value);
      }
      break;

    case SOURCE_URL:
      if (value == null) {
        unsetSourceUrl();
      } else {
        setSourceUrl((String)value);
      }
      break;

    case AREA_CODE:
      if (value == null) {
        unsetAreaCode();
      } else {
        setAreaCode((Long)value);
      }
      break;

    case SPECIAL_ID:
      if (value == null) {
        unsetSpecialId();
      } else {
        setSpecialId((Long)value);
      }
      break;

    case SPECIAL_TYPE:
      if (value == null) {
        unsetSpecialType();
      } else {
        setSpecialType((Integer)value);
      }
      break;

    case OPTIONS:
      if (value == null) {
        unsetOptions();
      } else {
        setOptions((String)value);
      }
      break;

    case HIGHLIGHT_TEXT:
      if (value == null) {
        unsetHighlightText();
      } else {
        setHighlightText((String)value);
      }
      break;

    case HIGHLIGHT_WORDS:
      if (value == null) {
        unsetHighlightWords();
      } else {
        setHighlightWords((String)value);
      }
      break;

    case COUNTS:
      if (value == null) {
        unsetCounts();
      } else {
        setCounts((Map<Integer,Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case BP_ID:
      return Long.valueOf(getBpId());

    case TITLE:
      return getTitle();

    case DETAIL:
      return getDetail();

    case TAG_IDS:
      return getTagIds();

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case PUBLISH_TIME:
      return Long.valueOf(getPublishTime());

    case RELATION_TYPE:
      return Integer.valueOf(getRelationType());

    case RELATION_ID:
      return Long.valueOf(getRelationId());

    case SOURCE:
      return Integer.valueOf(getSource());

    case STATUS:
      return Integer.valueOf(getStatus());

    case VERSION:
      return Integer.valueOf(getVersion());

    case CREATE_HOST:
      return Long.valueOf(getCreateHost());

    case CREATE_PORT:
      return Integer.valueOf(getCreatePort());

    case UPDATE_HOST:
      return Long.valueOf(getUpdateHost());

    case UPDATE_PORT:
      return Integer.valueOf(getUpdatePort());

    case SOURCE_URL:
      return getSourceUrl();

    case AREA_CODE:
      return Long.valueOf(getAreaCode());

    case SPECIAL_ID:
      return Long.valueOf(getSpecialId());

    case SPECIAL_TYPE:
      return Integer.valueOf(getSpecialType());

    case OPTIONS:
      return getOptions();

    case HIGHLIGHT_TEXT:
      return getHighlightText();

    case HIGHLIGHT_WORDS:
      return getHighlightWords();

    case COUNTS:
      return getCounts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case BP_ID:
      return isSetBpId();
    case TITLE:
      return isSetTitle();
    case DETAIL:
      return isSetDetail();
    case TAG_IDS:
      return isSetTagIds();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case PUBLISH_TIME:
      return isSetPublishTime();
    case RELATION_TYPE:
      return isSetRelationType();
    case RELATION_ID:
      return isSetRelationId();
    case SOURCE:
      return isSetSource();
    case STATUS:
      return isSetStatus();
    case VERSION:
      return isSetVersion();
    case CREATE_HOST:
      return isSetCreateHost();
    case CREATE_PORT:
      return isSetCreatePort();
    case UPDATE_HOST:
      return isSetUpdateHost();
    case UPDATE_PORT:
      return isSetUpdatePort();
    case SOURCE_URL:
      return isSetSourceUrl();
    case AREA_CODE:
      return isSetAreaCode();
    case SPECIAL_ID:
      return isSetSpecialId();
    case SPECIAL_TYPE:
      return isSetSpecialType();
    case OPTIONS:
      return isSetOptions();
    case HIGHLIGHT_TEXT:
      return isSetHighlightText();
    case HIGHLIGHT_WORDS:
      return isSetHighlightWords();
    case COUNTS:
      return isSetCounts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TEliteQuestion)
      return this.equals((TEliteQuestion)that);
    return false;
  }

  public boolean equals(TEliteQuestion that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_bpId = true;
    boolean that_present_bpId = true;
    if (this_present_bpId || that_present_bpId) {
      if (!(this_present_bpId && that_present_bpId))
        return false;
      if (this.bpId != that.bpId)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_detail = true && this.isSetDetail();
    boolean that_present_detail = true && that.isSetDetail();
    if (this_present_detail || that_present_detail) {
      if (!(this_present_detail && that_present_detail))
        return false;
      if (!this.detail.equals(that.detail))
        return false;
    }

    boolean this_present_tagIds = true && this.isSetTagIds();
    boolean that_present_tagIds = true && that.isSetTagIds();
    if (this_present_tagIds || that_present_tagIds) {
      if (!(this_present_tagIds && that_present_tagIds))
        return false;
      if (!this.tagIds.equals(that.tagIds))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_publishTime = true;
    boolean that_present_publishTime = true;
    if (this_present_publishTime || that_present_publishTime) {
      if (!(this_present_publishTime && that_present_publishTime))
        return false;
      if (this.publishTime != that.publishTime)
        return false;
    }

    boolean this_present_relationType = true;
    boolean that_present_relationType = true;
    if (this_present_relationType || that_present_relationType) {
      if (!(this_present_relationType && that_present_relationType))
        return false;
      if (this.relationType != that.relationType)
        return false;
    }

    boolean this_present_relationId = true;
    boolean that_present_relationId = true;
    if (this_present_relationId || that_present_relationId) {
      if (!(this_present_relationId && that_present_relationId))
        return false;
      if (this.relationId != that.relationId)
        return false;
    }

    boolean this_present_source = true;
    boolean that_present_source = true;
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_createHost = true;
    boolean that_present_createHost = true;
    if (this_present_createHost || that_present_createHost) {
      if (!(this_present_createHost && that_present_createHost))
        return false;
      if (this.createHost != that.createHost)
        return false;
    }

    boolean this_present_createPort = true;
    boolean that_present_createPort = true;
    if (this_present_createPort || that_present_createPort) {
      if (!(this_present_createPort && that_present_createPort))
        return false;
      if (this.createPort != that.createPort)
        return false;
    }

    boolean this_present_updateHost = true;
    boolean that_present_updateHost = true;
    if (this_present_updateHost || that_present_updateHost) {
      if (!(this_present_updateHost && that_present_updateHost))
        return false;
      if (this.updateHost != that.updateHost)
        return false;
    }

    boolean this_present_updatePort = true;
    boolean that_present_updatePort = true;
    if (this_present_updatePort || that_present_updatePort) {
      if (!(this_present_updatePort && that_present_updatePort))
        return false;
      if (this.updatePort != that.updatePort)
        return false;
    }

    boolean this_present_sourceUrl = true && this.isSetSourceUrl();
    boolean that_present_sourceUrl = true && that.isSetSourceUrl();
    if (this_present_sourceUrl || that_present_sourceUrl) {
      if (!(this_present_sourceUrl && that_present_sourceUrl))
        return false;
      if (!this.sourceUrl.equals(that.sourceUrl))
        return false;
    }

    boolean this_present_areaCode = true;
    boolean that_present_areaCode = true;
    if (this_present_areaCode || that_present_areaCode) {
      if (!(this_present_areaCode && that_present_areaCode))
        return false;
      if (this.areaCode != that.areaCode)
        return false;
    }

    boolean this_present_specialId = true;
    boolean that_present_specialId = true;
    if (this_present_specialId || that_present_specialId) {
      if (!(this_present_specialId && that_present_specialId))
        return false;
      if (this.specialId != that.specialId)
        return false;
    }

    boolean this_present_specialType = true;
    boolean that_present_specialType = true;
    if (this_present_specialType || that_present_specialType) {
      if (!(this_present_specialType && that_present_specialType))
        return false;
      if (this.specialType != that.specialType)
        return false;
    }

    boolean this_present_options = true && this.isSetOptions();
    boolean that_present_options = true && that.isSetOptions();
    if (this_present_options || that_present_options) {
      if (!(this_present_options && that_present_options))
        return false;
      if (!this.options.equals(that.options))
        return false;
    }

    boolean this_present_highlightText = true && this.isSetHighlightText();
    boolean that_present_highlightText = true && that.isSetHighlightText();
    if (this_present_highlightText || that_present_highlightText) {
      if (!(this_present_highlightText && that_present_highlightText))
        return false;
      if (!this.highlightText.equals(that.highlightText))
        return false;
    }

    boolean this_present_highlightWords = true && this.isSetHighlightWords();
    boolean that_present_highlightWords = true && that.isSetHighlightWords();
    if (this_present_highlightWords || that_present_highlightWords) {
      if (!(this_present_highlightWords && that_present_highlightWords))
        return false;
      if (!this.highlightWords.equals(that.highlightWords))
        return false;
    }

    boolean this_present_counts = true && this.isSetCounts();
    boolean that_present_counts = true && that.isSetCounts();
    if (this_present_counts || that_present_counts) {
      if (!(this_present_counts && that_present_counts))
        return false;
      if (!this.counts.equals(that.counts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TEliteQuestion other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TEliteQuestion typedOther = (TEliteQuestion)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBpId()).compareTo(typedOther.isSetBpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bpId, typedOther.bpId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetail()).compareTo(typedOther.isSetDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detail, typedOther.detail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagIds()).compareTo(typedOther.isSetTagIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagIds, typedOther.tagIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishTime()).compareTo(typedOther.isSetPublishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishTime, typedOther.publishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelationType()).compareTo(typedOther.isSetRelationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationType, typedOther.relationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelationId()).compareTo(typedOther.isSetRelationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationId, typedOther.relationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateHost()).compareTo(typedOther.isSetCreateHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createHost, typedOther.createHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatePort()).compareTo(typedOther.isSetCreatePort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatePort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createPort, typedOther.createPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateHost()).compareTo(typedOther.isSetUpdateHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateHost, typedOther.updateHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatePort()).compareTo(typedOther.isSetUpdatePort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatePort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatePort, typedOther.updatePort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceUrl()).compareTo(typedOther.isSetSourceUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceUrl, typedOther.sourceUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreaCode()).compareTo(typedOther.isSetAreaCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaCode, typedOther.areaCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecialId()).compareTo(typedOther.isSetSpecialId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecialId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialId, typedOther.specialId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecialType()).compareTo(typedOther.isSetSpecialType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecialType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialType, typedOther.specialType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptions()).compareTo(typedOther.isSetOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, typedOther.options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighlightText()).compareTo(typedOther.isSetHighlightText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighlightText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highlightText, typedOther.highlightText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighlightWords()).compareTo(typedOther.isSetHighlightWords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighlightWords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highlightWords, typedOther.highlightWords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCounts()).compareTo(typedOther.isSetCounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counts, typedOther.counts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TEliteQuestion(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bpId:");
    sb.append(this.bpId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("detail:");
    if (this.detail == null) {
      sb.append("null");
    } else {
      sb.append(this.detail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagIds:");
    if (this.tagIds == null) {
      sb.append("null");
    } else {
      sb.append(this.tagIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("publishTime:");
    sb.append(this.publishTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("relationType:");
    sb.append(this.relationType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("relationId:");
    sb.append(this.relationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    sb.append(this.source);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createHost:");
    sb.append(this.createHost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createPort:");
    sb.append(this.createPort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateHost:");
    sb.append(this.updateHost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatePort:");
    sb.append(this.updatePort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceUrl:");
    if (this.sourceUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("areaCode:");
    sb.append(this.areaCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("specialId:");
    sb.append(this.specialId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("specialType:");
    sb.append(this.specialType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("options:");
    if (this.options == null) {
      sb.append("null");
    } else {
      sb.append(this.options);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("highlightText:");
    if (this.highlightText == null) {
      sb.append("null");
    } else {
      sb.append(this.highlightText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("highlightWords:");
    if (this.highlightWords == null) {
      sb.append("null");
    } else {
      sb.append(this.highlightWords);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("counts:");
    if (this.counts == null) {
      sb.append("null");
    } else {
      sb.append(this.counts);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEliteQuestionStandardSchemeFactory implements SchemeFactory {
    public TEliteQuestionStandardScheme getScheme() {
      return new TEliteQuestionStandardScheme();
    }
  }

  private static class TEliteQuestionStandardScheme extends StandardScheme<TEliteQuestion> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEliteQuestion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bpId = iprot.readI64();
              struct.setBpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.detail = iprot.readString();
              struct.setDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TAG_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tagIds = iprot.readString();
              struct.setTagIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PUBLISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.publishTime = iprot.readI64();
              struct.setPublishTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RELATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.relationType = iprot.readI32();
              struct.setRelationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RELATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.relationId = iprot.readI64();
              struct.setRelationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.source = iprot.readI32();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATE_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createHost = iprot.readI64();
              struct.setCreateHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATE_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createPort = iprot.readI32();
              struct.setCreatePortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UPDATE_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateHost = iprot.readI64();
              struct.setUpdateHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // UPDATE_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updatePort = iprot.readI32();
              struct.setUpdatePortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SOURCE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceUrl = iprot.readString();
              struct.setSourceUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // AREA_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.areaCode = iprot.readI64();
              struct.setAreaCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SPECIAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.specialId = iprot.readI64();
              struct.setSpecialIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SPECIAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.specialType = iprot.readI32();
              struct.setSpecialTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.options = iprot.readString();
              struct.setOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // HIGHLIGHT_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.highlightText = iprot.readString();
              struct.setHighlightTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // HIGHLIGHT_WORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.highlightWords = iprot.readString();
              struct.setHighlightWordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.counts = new HashMap<Integer,Integer>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  int _key2; // required
                  int _val3; // required
                  _key2 = iprot.readI32();
                  _val3 = iprot.readI32();
                  struct.counts.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setCountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEliteQuestion struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BP_ID_FIELD_DESC);
      oprot.writeI64(struct.bpId);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.detail != null) {
        oprot.writeFieldBegin(DETAIL_FIELD_DESC);
        oprot.writeString(struct.detail);
        oprot.writeFieldEnd();
      }
      if (struct.tagIds != null) {
        oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
        oprot.writeString(struct.tagIds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUBLISH_TIME_FIELD_DESC);
      oprot.writeI64(struct.publishTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RELATION_TYPE_FIELD_DESC);
      oprot.writeI32(struct.relationType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RELATION_ID_FIELD_DESC);
      oprot.writeI64(struct.relationId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SOURCE_FIELD_DESC);
      oprot.writeI32(struct.source);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_HOST_FIELD_DESC);
      oprot.writeI64(struct.createHost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_PORT_FIELD_DESC);
      oprot.writeI32(struct.createPort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_HOST_FIELD_DESC);
      oprot.writeI64(struct.updateHost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_PORT_FIELD_DESC);
      oprot.writeI32(struct.updatePort);
      oprot.writeFieldEnd();
      if (struct.sourceUrl != null) {
        oprot.writeFieldBegin(SOURCE_URL_FIELD_DESC);
        oprot.writeString(struct.sourceUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AREA_CODE_FIELD_DESC);
      oprot.writeI64(struct.areaCode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPECIAL_ID_FIELD_DESC);
      oprot.writeI64(struct.specialId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPECIAL_TYPE_FIELD_DESC);
      oprot.writeI32(struct.specialType);
      oprot.writeFieldEnd();
      if (struct.options != null) {
        oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
        oprot.writeString(struct.options);
        oprot.writeFieldEnd();
      }
      if (struct.highlightText != null) {
        oprot.writeFieldBegin(HIGHLIGHT_TEXT_FIELD_DESC);
        oprot.writeString(struct.highlightText);
        oprot.writeFieldEnd();
      }
      if (struct.highlightWords != null) {
        oprot.writeFieldBegin(HIGHLIGHT_WORDS_FIELD_DESC);
        oprot.writeString(struct.highlightWords);
        oprot.writeFieldEnd();
      }
      if (struct.counts != null) {
        oprot.writeFieldBegin(COUNTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.counts.size()));
          for (Map.Entry<Integer, Integer> _iter4 : struct.counts.entrySet())
          {
            oprot.writeI32(_iter4.getKey());
            oprot.writeI32(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEliteQuestionTupleSchemeFactory implements SchemeFactory {
    public TEliteQuestionTupleScheme getScheme() {
      return new TEliteQuestionTupleScheme();
    }
  }

  private static class TEliteQuestionTupleScheme extends TupleScheme<TEliteQuestion> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEliteQuestion struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetBpId()) {
        optionals.set(1);
      }
      if (struct.isSetTitle()) {
        optionals.set(2);
      }
      if (struct.isSetDetail()) {
        optionals.set(3);
      }
      if (struct.isSetTagIds()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(5);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(6);
      }
      if (struct.isSetPublishTime()) {
        optionals.set(7);
      }
      if (struct.isSetRelationType()) {
        optionals.set(8);
      }
      if (struct.isSetRelationId()) {
        optionals.set(9);
      }
      if (struct.isSetSource()) {
        optionals.set(10);
      }
      if (struct.isSetStatus()) {
        optionals.set(11);
      }
      if (struct.isSetVersion()) {
        optionals.set(12);
      }
      if (struct.isSetCreateHost()) {
        optionals.set(13);
      }
      if (struct.isSetCreatePort()) {
        optionals.set(14);
      }
      if (struct.isSetUpdateHost()) {
        optionals.set(15);
      }
      if (struct.isSetUpdatePort()) {
        optionals.set(16);
      }
      if (struct.isSetSourceUrl()) {
        optionals.set(17);
      }
      if (struct.isSetAreaCode()) {
        optionals.set(18);
      }
      if (struct.isSetSpecialId()) {
        optionals.set(19);
      }
      if (struct.isSetSpecialType()) {
        optionals.set(20);
      }
      if (struct.isSetOptions()) {
        optionals.set(21);
      }
      if (struct.isSetHighlightText()) {
        optionals.set(22);
      }
      if (struct.isSetHighlightWords()) {
        optionals.set(23);
      }
      if (struct.isSetCounts()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetBpId()) {
        oprot.writeI64(struct.bpId);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetDetail()) {
        oprot.writeString(struct.detail);
      }
      if (struct.isSetTagIds()) {
        oprot.writeString(struct.tagIds);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetPublishTime()) {
        oprot.writeI64(struct.publishTime);
      }
      if (struct.isSetRelationType()) {
        oprot.writeI32(struct.relationType);
      }
      if (struct.isSetRelationId()) {
        oprot.writeI64(struct.relationId);
      }
      if (struct.isSetSource()) {
        oprot.writeI32(struct.source);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetCreateHost()) {
        oprot.writeI64(struct.createHost);
      }
      if (struct.isSetCreatePort()) {
        oprot.writeI32(struct.createPort);
      }
      if (struct.isSetUpdateHost()) {
        oprot.writeI64(struct.updateHost);
      }
      if (struct.isSetUpdatePort()) {
        oprot.writeI32(struct.updatePort);
      }
      if (struct.isSetSourceUrl()) {
        oprot.writeString(struct.sourceUrl);
      }
      if (struct.isSetAreaCode()) {
        oprot.writeI64(struct.areaCode);
      }
      if (struct.isSetSpecialId()) {
        oprot.writeI64(struct.specialId);
      }
      if (struct.isSetSpecialType()) {
        oprot.writeI32(struct.specialType);
      }
      if (struct.isSetOptions()) {
        oprot.writeString(struct.options);
      }
      if (struct.isSetHighlightText()) {
        oprot.writeString(struct.highlightText);
      }
      if (struct.isSetHighlightWords()) {
        oprot.writeString(struct.highlightWords);
      }
      if (struct.isSetCounts()) {
        {
          oprot.writeI32(struct.counts.size());
          for (Map.Entry<Integer, Integer> _iter5 : struct.counts.entrySet())
          {
            oprot.writeI32(_iter5.getKey());
            oprot.writeI32(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEliteQuestion struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bpId = iprot.readI64();
        struct.setBpIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.detail = iprot.readString();
        struct.setDetailIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tagIds = iprot.readString();
        struct.setTagIdsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.publishTime = iprot.readI64();
        struct.setPublishTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.relationType = iprot.readI32();
        struct.setRelationTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.relationId = iprot.readI64();
        struct.setRelationIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.source = iprot.readI32();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(13)) {
        struct.createHost = iprot.readI64();
        struct.setCreateHostIsSet(true);
      }
      if (incoming.get(14)) {
        struct.createPort = iprot.readI32();
        struct.setCreatePortIsSet(true);
      }
      if (incoming.get(15)) {
        struct.updateHost = iprot.readI64();
        struct.setUpdateHostIsSet(true);
      }
      if (incoming.get(16)) {
        struct.updatePort = iprot.readI32();
        struct.setUpdatePortIsSet(true);
      }
      if (incoming.get(17)) {
        struct.sourceUrl = iprot.readString();
        struct.setSourceUrlIsSet(true);
      }
      if (incoming.get(18)) {
        struct.areaCode = iprot.readI64();
        struct.setAreaCodeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.specialId = iprot.readI64();
        struct.setSpecialIdIsSet(true);
      }
      if (incoming.get(20)) {
        struct.specialType = iprot.readI32();
        struct.setSpecialTypeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.options = iprot.readString();
        struct.setOptionsIsSet(true);
      }
      if (incoming.get(22)) {
        struct.highlightText = iprot.readString();
        struct.setHighlightTextIsSet(true);
      }
      if (incoming.get(23)) {
        struct.highlightWords = iprot.readString();
        struct.setHighlightWordsIsSet(true);
      }
      if (incoming.get(24)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.counts = new HashMap<Integer,Integer>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            int _key8; // required
            int _val9; // required
            _key8 = iprot.readI32();
            _val9 = iprot.readI32();
            struct.counts.put(_key8, _val9);
          }
        }
        struct.setCountsIsSet(true);
      }
    }
  }

}

