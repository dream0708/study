/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sohu.bp.elite.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TEliteMedia implements org.apache.thrift.TBase<TEliteMedia, TEliteMedia._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEliteMedia");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField QUESTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("questionId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ANSWER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("answerId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField MEDIA_GIVEN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaGivenId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField UPLOAD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField UPLOAD_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadHost", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField UPLOAD_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadPort", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TEliteMediaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TEliteMediaTupleSchemeFactory());
  }

  public long id; // required
  /**
   * 
   * @see TEliteMediaType
   */
  public TEliteMediaType type; // required
  public long questionId; // required
  public long answerId; // required
  public long mediaGivenId; // required
  public String url; // required
  public long updateTime; // required
  public long uploadTime; // required
  public long uploadHost; // required
  public int uploadPort; // required
  /**
   * 
   * @see TEliteMediaStatus
   */
  public TEliteMediaStatus status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 
     * @see TEliteMediaType
     */
    TYPE((short)2, "type"),
    QUESTION_ID((short)3, "questionId"),
    ANSWER_ID((short)4, "answerId"),
    MEDIA_GIVEN_ID((short)5, "mediaGivenId"),
    URL((short)6, "url"),
    UPDATE_TIME((short)7, "updateTime"),
    UPLOAD_TIME((short)8, "uploadTime"),
    UPLOAD_HOST((short)9, "uploadHost"),
    UPLOAD_PORT((short)10, "uploadPort"),
    /**
     * 
     * @see TEliteMediaStatus
     */
    STATUS((short)11, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TYPE
          return TYPE;
        case 3: // QUESTION_ID
          return QUESTION_ID;
        case 4: // ANSWER_ID
          return ANSWER_ID;
        case 5: // MEDIA_GIVEN_ID
          return MEDIA_GIVEN_ID;
        case 6: // URL
          return URL;
        case 7: // UPDATE_TIME
          return UPDATE_TIME;
        case 8: // UPLOAD_TIME
          return UPLOAD_TIME;
        case 9: // UPLOAD_HOST
          return UPLOAD_HOST;
        case 10: // UPLOAD_PORT
          return UPLOAD_PORT;
        case 11: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __QUESTIONID_ISSET_ID = 1;
  private static final int __ANSWERID_ISSET_ID = 2;
  private static final int __MEDIAGIVENID_ISSET_ID = 3;
  private static final int __UPDATETIME_ISSET_ID = 4;
  private static final int __UPLOADTIME_ISSET_ID = 5;
  private static final int __UPLOADHOST_ISSET_ID = 6;
  private static final int __UPLOADPORT_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TEliteMediaType.class)));
    tmpMap.put(_Fields.QUESTION_ID, new org.apache.thrift.meta_data.FieldMetaData("questionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ANSWER_ID, new org.apache.thrift.meta_data.FieldMetaData("answerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEDIA_GIVEN_ID, new org.apache.thrift.meta_data.FieldMetaData("mediaGivenId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPLOAD_TIME, new org.apache.thrift.meta_data.FieldMetaData("uploadTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPLOAD_HOST, new org.apache.thrift.meta_data.FieldMetaData("uploadHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPLOAD_PORT, new org.apache.thrift.meta_data.FieldMetaData("uploadPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TEliteMediaStatus.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEliteMedia.class, metaDataMap);
  }

  public TEliteMedia() {
    this.id = 0L;

    this.type = com.sohu.bp.elite.model.TEliteMediaType.VIDEO;

    this.questionId = 0L;

    this.answerId = 0L;

    this.mediaGivenId = 0L;

    this.url = "";

    this.updateTime = 0L;

    this.uploadTime = 0L;

    this.uploadHost = 0L;

    this.uploadPort = 0;

    this.status = com.sohu.bp.elite.model.TEliteMediaStatus.INVALID;

  }

  public TEliteMedia(
    long id,
    TEliteMediaType type,
    long questionId,
    long answerId,
    long mediaGivenId,
    String url,
    long updateTime,
    long uploadTime,
    long uploadHost,
    int uploadPort,
    TEliteMediaStatus status)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.type = type;
    this.questionId = questionId;
    setQuestionIdIsSet(true);
    this.answerId = answerId;
    setAnswerIdIsSet(true);
    this.mediaGivenId = mediaGivenId;
    setMediaGivenIdIsSet(true);
    this.url = url;
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.uploadTime = uploadTime;
    setUploadTimeIsSet(true);
    this.uploadHost = uploadHost;
    setUploadHostIsSet(true);
    this.uploadPort = uploadPort;
    setUploadPortIsSet(true);
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEliteMedia(TEliteMedia other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.questionId = other.questionId;
    this.answerId = other.answerId;
    this.mediaGivenId = other.mediaGivenId;
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.updateTime = other.updateTime;
    this.uploadTime = other.uploadTime;
    this.uploadHost = other.uploadHost;
    this.uploadPort = other.uploadPort;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
  }

  public TEliteMedia deepCopy() {
    return new TEliteMedia(this);
  }

  @Override
  public void clear() {
    this.id = 0L;

    this.type = com.sohu.bp.elite.model.TEliteMediaType.VIDEO;

    this.questionId = 0L;

    this.answerId = 0L;

    this.mediaGivenId = 0L;

    this.url = "";

    this.updateTime = 0L;

    this.uploadTime = 0L;

    this.uploadHost = 0L;

    this.uploadPort = 0;

    this.status = com.sohu.bp.elite.model.TEliteMediaStatus.INVALID;

  }

  public long getId() {
    return this.id;
  }

  public TEliteMedia setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 
   * @see TEliteMediaType
   */
  public TEliteMediaType getType() {
    return this.type;
  }

  /**
   * 
   * @see TEliteMediaType
   */
  public TEliteMedia setType(TEliteMediaType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public long getQuestionId() {
    return this.questionId;
  }

  public TEliteMedia setQuestionId(long questionId) {
    this.questionId = questionId;
    setQuestionIdIsSet(true);
    return this;
  }

  public void unsetQuestionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
  }

  /** Returns true if field questionId is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionId() {
    return EncodingUtils.testBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
  }

  public void setQuestionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUESTIONID_ISSET_ID, value);
  }

  public long getAnswerId() {
    return this.answerId;
  }

  public TEliteMedia setAnswerId(long answerId) {
    this.answerId = answerId;
    setAnswerIdIsSet(true);
    return this;
  }

  public void unsetAnswerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANSWERID_ISSET_ID);
  }

  /** Returns true if field answerId is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswerId() {
    return EncodingUtils.testBit(__isset_bitfield, __ANSWERID_ISSET_ID);
  }

  public void setAnswerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANSWERID_ISSET_ID, value);
  }

  public long getMediaGivenId() {
    return this.mediaGivenId;
  }

  public TEliteMedia setMediaGivenId(long mediaGivenId) {
    this.mediaGivenId = mediaGivenId;
    setMediaGivenIdIsSet(true);
    return this;
  }

  public void unsetMediaGivenId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDIAGIVENID_ISSET_ID);
  }

  /** Returns true if field mediaGivenId is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaGivenId() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDIAGIVENID_ISSET_ID);
  }

  public void setMediaGivenIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDIAGIVENID_ISSET_ID, value);
  }

  public String getUrl() {
    return this.url;
  }

  public TEliteMedia setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public TEliteMedia setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public long getUploadTime() {
    return this.uploadTime;
  }

  public TEliteMedia setUploadTime(long uploadTime) {
    this.uploadTime = uploadTime;
    setUploadTimeIsSet(true);
    return this;
  }

  public void unsetUploadTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPLOADTIME_ISSET_ID);
  }

  /** Returns true if field uploadTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPLOADTIME_ISSET_ID);
  }

  public void setUploadTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPLOADTIME_ISSET_ID, value);
  }

  public long getUploadHost() {
    return this.uploadHost;
  }

  public TEliteMedia setUploadHost(long uploadHost) {
    this.uploadHost = uploadHost;
    setUploadHostIsSet(true);
    return this;
  }

  public void unsetUploadHost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPLOADHOST_ISSET_ID);
  }

  /** Returns true if field uploadHost is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadHost() {
    return EncodingUtils.testBit(__isset_bitfield, __UPLOADHOST_ISSET_ID);
  }

  public void setUploadHostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPLOADHOST_ISSET_ID, value);
  }

  public int getUploadPort() {
    return this.uploadPort;
  }

  public TEliteMedia setUploadPort(int uploadPort) {
    this.uploadPort = uploadPort;
    setUploadPortIsSet(true);
    return this;
  }

  public void unsetUploadPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPLOADPORT_ISSET_ID);
  }

  /** Returns true if field uploadPort is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadPort() {
    return EncodingUtils.testBit(__isset_bitfield, __UPLOADPORT_ISSET_ID);
  }

  public void setUploadPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPLOADPORT_ISSET_ID, value);
  }

  /**
   * 
   * @see TEliteMediaStatus
   */
  public TEliteMediaStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see TEliteMediaStatus
   */
  public TEliteMedia setStatus(TEliteMediaStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TEliteMediaType)value);
      }
      break;

    case QUESTION_ID:
      if (value == null) {
        unsetQuestionId();
      } else {
        setQuestionId((Long)value);
      }
      break;

    case ANSWER_ID:
      if (value == null) {
        unsetAnswerId();
      } else {
        setAnswerId((Long)value);
      }
      break;

    case MEDIA_GIVEN_ID:
      if (value == null) {
        unsetMediaGivenId();
      } else {
        setMediaGivenId((Long)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case UPLOAD_TIME:
      if (value == null) {
        unsetUploadTime();
      } else {
        setUploadTime((Long)value);
      }
      break;

    case UPLOAD_HOST:
      if (value == null) {
        unsetUploadHost();
      } else {
        setUploadHost((Long)value);
      }
      break;

    case UPLOAD_PORT:
      if (value == null) {
        unsetUploadPort();
      } else {
        setUploadPort((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((TEliteMediaStatus)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case TYPE:
      return getType();

    case QUESTION_ID:
      return Long.valueOf(getQuestionId());

    case ANSWER_ID:
      return Long.valueOf(getAnswerId());

    case MEDIA_GIVEN_ID:
      return Long.valueOf(getMediaGivenId());

    case URL:
      return getUrl();

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case UPLOAD_TIME:
      return Long.valueOf(getUploadTime());

    case UPLOAD_HOST:
      return Long.valueOf(getUploadHost());

    case UPLOAD_PORT:
      return Integer.valueOf(getUploadPort());

    case STATUS:
      return getStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TYPE:
      return isSetType();
    case QUESTION_ID:
      return isSetQuestionId();
    case ANSWER_ID:
      return isSetAnswerId();
    case MEDIA_GIVEN_ID:
      return isSetMediaGivenId();
    case URL:
      return isSetUrl();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case UPLOAD_TIME:
      return isSetUploadTime();
    case UPLOAD_HOST:
      return isSetUploadHost();
    case UPLOAD_PORT:
      return isSetUploadPort();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TEliteMedia)
      return this.equals((TEliteMedia)that);
    return false;
  }

  public boolean equals(TEliteMedia that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_questionId = true;
    boolean that_present_questionId = true;
    if (this_present_questionId || that_present_questionId) {
      if (!(this_present_questionId && that_present_questionId))
        return false;
      if (this.questionId != that.questionId)
        return false;
    }

    boolean this_present_answerId = true;
    boolean that_present_answerId = true;
    if (this_present_answerId || that_present_answerId) {
      if (!(this_present_answerId && that_present_answerId))
        return false;
      if (this.answerId != that.answerId)
        return false;
    }

    boolean this_present_mediaGivenId = true;
    boolean that_present_mediaGivenId = true;
    if (this_present_mediaGivenId || that_present_mediaGivenId) {
      if (!(this_present_mediaGivenId && that_present_mediaGivenId))
        return false;
      if (this.mediaGivenId != that.mediaGivenId)
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_uploadTime = true;
    boolean that_present_uploadTime = true;
    if (this_present_uploadTime || that_present_uploadTime) {
      if (!(this_present_uploadTime && that_present_uploadTime))
        return false;
      if (this.uploadTime != that.uploadTime)
        return false;
    }

    boolean this_present_uploadHost = true;
    boolean that_present_uploadHost = true;
    if (this_present_uploadHost || that_present_uploadHost) {
      if (!(this_present_uploadHost && that_present_uploadHost))
        return false;
      if (this.uploadHost != that.uploadHost)
        return false;
    }

    boolean this_present_uploadPort = true;
    boolean that_present_uploadPort = true;
    if (this_present_uploadPort || that_present_uploadPort) {
      if (!(this_present_uploadPort && that_present_uploadPort))
        return false;
      if (this.uploadPort != that.uploadPort)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TEliteMedia other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TEliteMedia typedOther = (TEliteMedia)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionId()).compareTo(typedOther.isSetQuestionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionId, typedOther.questionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswerId()).compareTo(typedOther.isSetAnswerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answerId, typedOther.answerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMediaGivenId()).compareTo(typedOther.isSetMediaGivenId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaGivenId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaGivenId, typedOther.mediaGivenId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadTime()).compareTo(typedOther.isSetUploadTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadTime, typedOther.uploadTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadHost()).compareTo(typedOther.isSetUploadHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadHost, typedOther.uploadHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadPort()).compareTo(typedOther.isSetUploadPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadPort, typedOther.uploadPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TEliteMedia(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionId:");
    sb.append(this.questionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("answerId:");
    sb.append(this.answerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mediaGivenId:");
    sb.append(this.mediaGivenId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uploadTime:");
    sb.append(this.uploadTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uploadHost:");
    sb.append(this.uploadHost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uploadPort:");
    sb.append(this.uploadPort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEliteMediaStandardSchemeFactory implements SchemeFactory {
    public TEliteMediaStandardScheme getScheme() {
      return new TEliteMediaStandardScheme();
    }
  }

  private static class TEliteMediaStandardScheme extends StandardScheme<TEliteMedia> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEliteMedia struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = TEliteMediaType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUESTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.questionId = iprot.readI64();
              struct.setQuestionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ANSWER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.answerId = iprot.readI64();
              struct.setAnswerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEDIA_GIVEN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mediaGivenId = iprot.readI64();
              struct.setMediaGivenIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UPLOAD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uploadTime = iprot.readI64();
              struct.setUploadTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPLOAD_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uploadHost = iprot.readI64();
              struct.setUploadHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPLOAD_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uploadPort = iprot.readI32();
              struct.setUploadPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = TEliteMediaStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEliteMedia struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUESTION_ID_FIELD_DESC);
      oprot.writeI64(struct.questionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ANSWER_ID_FIELD_DESC);
      oprot.writeI64(struct.answerId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEDIA_GIVEN_ID_FIELD_DESC);
      oprot.writeI64(struct.mediaGivenId);
      oprot.writeFieldEnd();
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPLOAD_TIME_FIELD_DESC);
      oprot.writeI64(struct.uploadTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPLOAD_HOST_FIELD_DESC);
      oprot.writeI64(struct.uploadHost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPLOAD_PORT_FIELD_DESC);
      oprot.writeI32(struct.uploadPort);
      oprot.writeFieldEnd();
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEliteMediaTupleSchemeFactory implements SchemeFactory {
    public TEliteMediaTupleScheme getScheme() {
      return new TEliteMediaTupleScheme();
    }
  }

  private static class TEliteMediaTupleScheme extends TupleScheme<TEliteMedia> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEliteMedia struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetQuestionId()) {
        optionals.set(2);
      }
      if (struct.isSetAnswerId()) {
        optionals.set(3);
      }
      if (struct.isSetMediaGivenId()) {
        optionals.set(4);
      }
      if (struct.isSetUrl()) {
        optionals.set(5);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(6);
      }
      if (struct.isSetUploadTime()) {
        optionals.set(7);
      }
      if (struct.isSetUploadHost()) {
        optionals.set(8);
      }
      if (struct.isSetUploadPort()) {
        optionals.set(9);
      }
      if (struct.isSetStatus()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetQuestionId()) {
        oprot.writeI64(struct.questionId);
      }
      if (struct.isSetAnswerId()) {
        oprot.writeI64(struct.answerId);
      }
      if (struct.isSetMediaGivenId()) {
        oprot.writeI64(struct.mediaGivenId);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetUploadTime()) {
        oprot.writeI64(struct.uploadTime);
      }
      if (struct.isSetUploadHost()) {
        oprot.writeI64(struct.uploadHost);
      }
      if (struct.isSetUploadPort()) {
        oprot.writeI32(struct.uploadPort);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEliteMedia struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = TEliteMediaType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.questionId = iprot.readI64();
        struct.setQuestionIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.answerId = iprot.readI64();
        struct.setAnswerIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mediaGivenId = iprot.readI64();
        struct.setMediaGivenIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.uploadTime = iprot.readI64();
        struct.setUploadTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.uploadHost = iprot.readI64();
        struct.setUploadHostIsSet(true);
      }
      if (incoming.get(9)) {
        struct.uploadPort = iprot.readI32();
        struct.setUploadPortIsSet(true);
      }
      if (incoming.get(10)) {
        struct.status = TEliteMediaStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
    }
  }

}

