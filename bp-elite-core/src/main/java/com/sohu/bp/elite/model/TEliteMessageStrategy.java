/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sohu.bp.elite.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TEliteMessageStrategy implements org.apache.thrift.TBase<TEliteMessageStrategy, TEliteMessageStrategy._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEliteMessageStrategy");

  private static final org.apache.thrift.protocol.TField TIME_PERIOD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timePeriodType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FREQUENCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("frequenceType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FREQUENCE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("frequenceValue", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("identity", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TEliteMessageStrategyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TEliteMessageStrategyTupleSchemeFactory());
  }

  /**
   * 
   * @see TEliteMessageTimePeriodType
   */
  public TEliteMessageTimePeriodType timePeriodType; // required
  /**
   * 
   * @see TEliteMessageFrequenceType
   */
  public TEliteMessageFrequenceType frequenceType; // required
  public int frequenceValue; // required
  public String identity; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TEliteMessageTimePeriodType
     */
    TIME_PERIOD_TYPE((short)1, "timePeriodType"),
    /**
     * 
     * @see TEliteMessageFrequenceType
     */
    FREQUENCE_TYPE((short)2, "frequenceType"),
    FREQUENCE_VALUE((short)3, "frequenceValue"),
    IDENTITY((short)4, "identity");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME_PERIOD_TYPE
          return TIME_PERIOD_TYPE;
        case 2: // FREQUENCE_TYPE
          return FREQUENCE_TYPE;
        case 3: // FREQUENCE_VALUE
          return FREQUENCE_VALUE;
        case 4: // IDENTITY
          return IDENTITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FREQUENCEVALUE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME_PERIOD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timePeriodType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TEliteMessageTimePeriodType.class)));
    tmpMap.put(_Fields.FREQUENCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("frequenceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TEliteMessageFrequenceType.class)));
    tmpMap.put(_Fields.FREQUENCE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("frequenceValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("identity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEliteMessageStrategy.class, metaDataMap);
  }

  public TEliteMessageStrategy() {
    this.timePeriodType = com.sohu.bp.elite.model.TEliteMessageTimePeriodType.DAY_TIME;

    this.frequenceType = com.sohu.bp.elite.model.TEliteMessageFrequenceType.DAY;

    this.frequenceValue = 6;

    this.identity = "";

  }

  public TEliteMessageStrategy(
    TEliteMessageTimePeriodType timePeriodType,
    TEliteMessageFrequenceType frequenceType,
    int frequenceValue,
    String identity)
  {
    this();
    this.timePeriodType = timePeriodType;
    this.frequenceType = frequenceType;
    this.frequenceValue = frequenceValue;
    setFrequenceValueIsSet(true);
    this.identity = identity;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEliteMessageStrategy(TEliteMessageStrategy other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTimePeriodType()) {
      this.timePeriodType = other.timePeriodType;
    }
    if (other.isSetFrequenceType()) {
      this.frequenceType = other.frequenceType;
    }
    this.frequenceValue = other.frequenceValue;
    if (other.isSetIdentity()) {
      this.identity = other.identity;
    }
  }

  public TEliteMessageStrategy deepCopy() {
    return new TEliteMessageStrategy(this);
  }

  @Override
  public void clear() {
    this.timePeriodType = com.sohu.bp.elite.model.TEliteMessageTimePeriodType.DAY_TIME;

    this.frequenceType = com.sohu.bp.elite.model.TEliteMessageFrequenceType.DAY;

    this.frequenceValue = 6;

    this.identity = "";

  }

  /**
   * 
   * @see TEliteMessageTimePeriodType
   */
  public TEliteMessageTimePeriodType getTimePeriodType() {
    return this.timePeriodType;
  }

  /**
   * 
   * @see TEliteMessageTimePeriodType
   */
  public TEliteMessageStrategy setTimePeriodType(TEliteMessageTimePeriodType timePeriodType) {
    this.timePeriodType = timePeriodType;
    return this;
  }

  public void unsetTimePeriodType() {
    this.timePeriodType = null;
  }

  /** Returns true if field timePeriodType is set (has been assigned a value) and false otherwise */
  public boolean isSetTimePeriodType() {
    return this.timePeriodType != null;
  }

  public void setTimePeriodTypeIsSet(boolean value) {
    if (!value) {
      this.timePeriodType = null;
    }
  }

  /**
   * 
   * @see TEliteMessageFrequenceType
   */
  public TEliteMessageFrequenceType getFrequenceType() {
    return this.frequenceType;
  }

  /**
   * 
   * @see TEliteMessageFrequenceType
   */
  public TEliteMessageStrategy setFrequenceType(TEliteMessageFrequenceType frequenceType) {
    this.frequenceType = frequenceType;
    return this;
  }

  public void unsetFrequenceType() {
    this.frequenceType = null;
  }

  /** Returns true if field frequenceType is set (has been assigned a value) and false otherwise */
  public boolean isSetFrequenceType() {
    return this.frequenceType != null;
  }

  public void setFrequenceTypeIsSet(boolean value) {
    if (!value) {
      this.frequenceType = null;
    }
  }

  public int getFrequenceValue() {
    return this.frequenceValue;
  }

  public TEliteMessageStrategy setFrequenceValue(int frequenceValue) {
    this.frequenceValue = frequenceValue;
    setFrequenceValueIsSet(true);
    return this;
  }

  public void unsetFrequenceValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREQUENCEVALUE_ISSET_ID);
  }

  /** Returns true if field frequenceValue is set (has been assigned a value) and false otherwise */
  public boolean isSetFrequenceValue() {
    return EncodingUtils.testBit(__isset_bitfield, __FREQUENCEVALUE_ISSET_ID);
  }

  public void setFrequenceValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREQUENCEVALUE_ISSET_ID, value);
  }

  public String getIdentity() {
    return this.identity;
  }

  public TEliteMessageStrategy setIdentity(String identity) {
    this.identity = identity;
    return this;
  }

  public void unsetIdentity() {
    this.identity = null;
  }

  /** Returns true if field identity is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentity() {
    return this.identity != null;
  }

  public void setIdentityIsSet(boolean value) {
    if (!value) {
      this.identity = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIME_PERIOD_TYPE:
      if (value == null) {
        unsetTimePeriodType();
      } else {
        setTimePeriodType((TEliteMessageTimePeriodType)value);
      }
      break;

    case FREQUENCE_TYPE:
      if (value == null) {
        unsetFrequenceType();
      } else {
        setFrequenceType((TEliteMessageFrequenceType)value);
      }
      break;

    case FREQUENCE_VALUE:
      if (value == null) {
        unsetFrequenceValue();
      } else {
        setFrequenceValue((Integer)value);
      }
      break;

    case IDENTITY:
      if (value == null) {
        unsetIdentity();
      } else {
        setIdentity((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME_PERIOD_TYPE:
      return getTimePeriodType();

    case FREQUENCE_TYPE:
      return getFrequenceType();

    case FREQUENCE_VALUE:
      return Integer.valueOf(getFrequenceValue());

    case IDENTITY:
      return getIdentity();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIME_PERIOD_TYPE:
      return isSetTimePeriodType();
    case FREQUENCE_TYPE:
      return isSetFrequenceType();
    case FREQUENCE_VALUE:
      return isSetFrequenceValue();
    case IDENTITY:
      return isSetIdentity();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TEliteMessageStrategy)
      return this.equals((TEliteMessageStrategy)that);
    return false;
  }

  public boolean equals(TEliteMessageStrategy that) {
    if (that == null)
      return false;

    boolean this_present_timePeriodType = true && this.isSetTimePeriodType();
    boolean that_present_timePeriodType = true && that.isSetTimePeriodType();
    if (this_present_timePeriodType || that_present_timePeriodType) {
      if (!(this_present_timePeriodType && that_present_timePeriodType))
        return false;
      if (!this.timePeriodType.equals(that.timePeriodType))
        return false;
    }

    boolean this_present_frequenceType = true && this.isSetFrequenceType();
    boolean that_present_frequenceType = true && that.isSetFrequenceType();
    if (this_present_frequenceType || that_present_frequenceType) {
      if (!(this_present_frequenceType && that_present_frequenceType))
        return false;
      if (!this.frequenceType.equals(that.frequenceType))
        return false;
    }

    boolean this_present_frequenceValue = true;
    boolean that_present_frequenceValue = true;
    if (this_present_frequenceValue || that_present_frequenceValue) {
      if (!(this_present_frequenceValue && that_present_frequenceValue))
        return false;
      if (this.frequenceValue != that.frequenceValue)
        return false;
    }

    boolean this_present_identity = true && this.isSetIdentity();
    boolean that_present_identity = true && that.isSetIdentity();
    if (this_present_identity || that_present_identity) {
      if (!(this_present_identity && that_present_identity))
        return false;
      if (!this.identity.equals(that.identity))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TEliteMessageStrategy other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TEliteMessageStrategy typedOther = (TEliteMessageStrategy)other;

    lastComparison = Boolean.valueOf(isSetTimePeriodType()).compareTo(typedOther.isSetTimePeriodType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimePeriodType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timePeriodType, typedOther.timePeriodType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrequenceType()).compareTo(typedOther.isSetFrequenceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrequenceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frequenceType, typedOther.frequenceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrequenceValue()).compareTo(typedOther.isSetFrequenceValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrequenceValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frequenceValue, typedOther.frequenceValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentity()).compareTo(typedOther.isSetIdentity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identity, typedOther.identity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TEliteMessageStrategy(");
    boolean first = true;

    sb.append("timePeriodType:");
    if (this.timePeriodType == null) {
      sb.append("null");
    } else {
      sb.append(this.timePeriodType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("frequenceType:");
    if (this.frequenceType == null) {
      sb.append("null");
    } else {
      sb.append(this.frequenceType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("frequenceValue:");
    sb.append(this.frequenceValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("identity:");
    if (this.identity == null) {
      sb.append("null");
    } else {
      sb.append(this.identity);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEliteMessageStrategyStandardSchemeFactory implements SchemeFactory {
    public TEliteMessageStrategyStandardScheme getScheme() {
      return new TEliteMessageStrategyStandardScheme();
    }
  }

  private static class TEliteMessageStrategyStandardScheme extends StandardScheme<TEliteMessageStrategy> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEliteMessageStrategy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME_PERIOD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timePeriodType = TEliteMessageTimePeriodType.findByValue(iprot.readI32());
              struct.setTimePeriodTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FREQUENCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frequenceType = TEliteMessageFrequenceType.findByValue(iprot.readI32());
              struct.setFrequenceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FREQUENCE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frequenceValue = iprot.readI32();
              struct.setFrequenceValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IDENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identity = iprot.readString();
              struct.setIdentityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEliteMessageStrategy struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.timePeriodType != null) {
        oprot.writeFieldBegin(TIME_PERIOD_TYPE_FIELD_DESC);
        oprot.writeI32(struct.timePeriodType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.frequenceType != null) {
        oprot.writeFieldBegin(FREQUENCE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.frequenceType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FREQUENCE_VALUE_FIELD_DESC);
      oprot.writeI32(struct.frequenceValue);
      oprot.writeFieldEnd();
      if (struct.identity != null) {
        oprot.writeFieldBegin(IDENTITY_FIELD_DESC);
        oprot.writeString(struct.identity);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEliteMessageStrategyTupleSchemeFactory implements SchemeFactory {
    public TEliteMessageStrategyTupleScheme getScheme() {
      return new TEliteMessageStrategyTupleScheme();
    }
  }

  private static class TEliteMessageStrategyTupleScheme extends TupleScheme<TEliteMessageStrategy> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEliteMessageStrategy struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTimePeriodType()) {
        optionals.set(0);
      }
      if (struct.isSetFrequenceType()) {
        optionals.set(1);
      }
      if (struct.isSetFrequenceValue()) {
        optionals.set(2);
      }
      if (struct.isSetIdentity()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTimePeriodType()) {
        oprot.writeI32(struct.timePeriodType.getValue());
      }
      if (struct.isSetFrequenceType()) {
        oprot.writeI32(struct.frequenceType.getValue());
      }
      if (struct.isSetFrequenceValue()) {
        oprot.writeI32(struct.frequenceValue);
      }
      if (struct.isSetIdentity()) {
        oprot.writeString(struct.identity);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEliteMessageStrategy struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.timePeriodType = TEliteMessageTimePeriodType.findByValue(iprot.readI32());
        struct.setTimePeriodTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.frequenceType = TEliteMessageFrequenceType.findByValue(iprot.readI32());
        struct.setFrequenceTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.frequenceValue = iprot.readI32();
        struct.setFrequenceValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.identity = iprot.readString();
        struct.setIdentityIsSet(true);
      }
    }
  }

}

