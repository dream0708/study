/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sohu.bp.elite.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TEliteFollow implements org.apache.thrift.TBase<TEliteFollow, TEliteFollow._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEliteFollow");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField BP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bpId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("createHost", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("createPort", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATE_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("updateHost", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField UPDATE_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatePort", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TEliteFollowStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TEliteFollowTupleSchemeFactory());
  }

  public long id; // required
  public long userId; // required
  public long bpId; // required
  /**
   * 
   * @see TEliteFollowType
   */
  public TEliteFollowType type; // required
  public int status; // required
  public long createTime; // required
  public long createHost; // required
  public int createPort; // required
  public long updateTime; // required
  public long updateHost; // required
  public int updatePort; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USER_ID((short)2, "userId"),
    BP_ID((short)3, "bpId"),
    /**
     * 
     * @see TEliteFollowType
     */
    TYPE((short)4, "type"),
    STATUS((short)5, "status"),
    CREATE_TIME((short)6, "createTime"),
    CREATE_HOST((short)7, "createHost"),
    CREATE_PORT((short)8, "createPort"),
    UPDATE_TIME((short)9, "updateTime"),
    UPDATE_HOST((short)10, "updateHost"),
    UPDATE_PORT((short)11, "updatePort");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // BP_ID
          return BP_ID;
        case 4: // TYPE
          return TYPE;
        case 5: // STATUS
          return STATUS;
        case 6: // CREATE_TIME
          return CREATE_TIME;
        case 7: // CREATE_HOST
          return CREATE_HOST;
        case 8: // CREATE_PORT
          return CREATE_PORT;
        case 9: // UPDATE_TIME
          return UPDATE_TIME;
        case 10: // UPDATE_HOST
          return UPDATE_HOST;
        case 11: // UPDATE_PORT
          return UPDATE_PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __BPID_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __CREATETIME_ISSET_ID = 4;
  private static final int __CREATEHOST_ISSET_ID = 5;
  private static final int __CREATEPORT_ISSET_ID = 6;
  private static final int __UPDATETIME_ISSET_ID = 7;
  private static final int __UPDATEHOST_ISSET_ID = 8;
  private static final int __UPDATEPORT_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BP_ID, new org.apache.thrift.meta_data.FieldMetaData("bpId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TEliteFollowType.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_HOST, new org.apache.thrift.meta_data.FieldMetaData("createHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_PORT, new org.apache.thrift.meta_data.FieldMetaData("createPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_HOST, new org.apache.thrift.meta_data.FieldMetaData("updateHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_PORT, new org.apache.thrift.meta_data.FieldMetaData("updatePort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEliteFollow.class, metaDataMap);
  }

  public TEliteFollow() {
    this.id = 0L;

    this.userId = 0L;

    this.bpId = 0L;

    this.type = com.sohu.bp.elite.model.TEliteFollowType.ELITE_USER;

    this.status = 0;

    this.createTime = 0L;

    this.createHost = 0L;

    this.createPort = 0;

    this.updateTime = 0L;

    this.updateHost = 0L;

    this.updatePort = 0;

  }

  public TEliteFollow(
    long id,
    long userId,
    long bpId,
    TEliteFollowType type,
    int status,
    long createTime,
    long createHost,
    int createPort,
    long updateTime,
    long updateHost,
    int updatePort)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.bpId = bpId;
    setBpIdIsSet(true);
    this.type = type;
    this.status = status;
    setStatusIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.createHost = createHost;
    setCreateHostIsSet(true);
    this.createPort = createPort;
    setCreatePortIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.updateHost = updateHost;
    setUpdateHostIsSet(true);
    this.updatePort = updatePort;
    setUpdatePortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEliteFollow(TEliteFollow other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.userId = other.userId;
    this.bpId = other.bpId;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.status = other.status;
    this.createTime = other.createTime;
    this.createHost = other.createHost;
    this.createPort = other.createPort;
    this.updateTime = other.updateTime;
    this.updateHost = other.updateHost;
    this.updatePort = other.updatePort;
  }

  public TEliteFollow deepCopy() {
    return new TEliteFollow(this);
  }

  @Override
  public void clear() {
    this.id = 0L;

    this.userId = 0L;

    this.bpId = 0L;

    this.type = com.sohu.bp.elite.model.TEliteFollowType.ELITE_USER;

    this.status = 0;

    this.createTime = 0L;

    this.createHost = 0L;

    this.createPort = 0;

    this.updateTime = 0L;

    this.updateHost = 0L;

    this.updatePort = 0;

  }

  public long getId() {
    return this.id;
  }

  public TEliteFollow setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getUserId() {
    return this.userId;
  }

  public TEliteFollow setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public long getBpId() {
    return this.bpId;
  }

  public TEliteFollow setBpId(long bpId) {
    this.bpId = bpId;
    setBpIdIsSet(true);
    return this;
  }

  public void unsetBpId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BPID_ISSET_ID);
  }

  /** Returns true if field bpId is set (has been assigned a value) and false otherwise */
  public boolean isSetBpId() {
    return EncodingUtils.testBit(__isset_bitfield, __BPID_ISSET_ID);
  }

  public void setBpIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BPID_ISSET_ID, value);
  }

  /**
   * 
   * @see TEliteFollowType
   */
  public TEliteFollowType getType() {
    return this.type;
  }

  /**
   * 
   * @see TEliteFollowType
   */
  public TEliteFollow setType(TEliteFollowType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public TEliteFollow setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public TEliteFollow setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public long getCreateHost() {
    return this.createHost;
  }

  public TEliteFollow setCreateHost(long createHost) {
    this.createHost = createHost;
    setCreateHostIsSet(true);
    return this;
  }

  public void unsetCreateHost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEHOST_ISSET_ID);
  }

  /** Returns true if field createHost is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateHost() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEHOST_ISSET_ID);
  }

  public void setCreateHostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEHOST_ISSET_ID, value);
  }

  public int getCreatePort() {
    return this.createPort;
  }

  public TEliteFollow setCreatePort(int createPort) {
    this.createPort = createPort;
    setCreatePortIsSet(true);
    return this;
  }

  public void unsetCreatePort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEPORT_ISSET_ID);
  }

  /** Returns true if field createPort is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatePort() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEPORT_ISSET_ID);
  }

  public void setCreatePortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEPORT_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public TEliteFollow setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public long getUpdateHost() {
    return this.updateHost;
  }

  public TEliteFollow setUpdateHost(long updateHost) {
    this.updateHost = updateHost;
    setUpdateHostIsSet(true);
    return this;
  }

  public void unsetUpdateHost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEHOST_ISSET_ID);
  }

  /** Returns true if field updateHost is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateHost() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEHOST_ISSET_ID);
  }

  public void setUpdateHostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEHOST_ISSET_ID, value);
  }

  public int getUpdatePort() {
    return this.updatePort;
  }

  public TEliteFollow setUpdatePort(int updatePort) {
    this.updatePort = updatePort;
    setUpdatePortIsSet(true);
    return this;
  }

  public void unsetUpdatePort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEPORT_ISSET_ID);
  }

  /** Returns true if field updatePort is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatePort() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEPORT_ISSET_ID);
  }

  public void setUpdatePortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEPORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case BP_ID:
      if (value == null) {
        unsetBpId();
      } else {
        setBpId((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TEliteFollowType)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case CREATE_HOST:
      if (value == null) {
        unsetCreateHost();
      } else {
        setCreateHost((Long)value);
      }
      break;

    case CREATE_PORT:
      if (value == null) {
        unsetCreatePort();
      } else {
        setCreatePort((Integer)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case UPDATE_HOST:
      if (value == null) {
        unsetUpdateHost();
      } else {
        setUpdateHost((Long)value);
      }
      break;

    case UPDATE_PORT:
      if (value == null) {
        unsetUpdatePort();
      } else {
        setUpdatePort((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case USER_ID:
      return Long.valueOf(getUserId());

    case BP_ID:
      return Long.valueOf(getBpId());

    case TYPE:
      return getType();

    case STATUS:
      return Integer.valueOf(getStatus());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case CREATE_HOST:
      return Long.valueOf(getCreateHost());

    case CREATE_PORT:
      return Integer.valueOf(getCreatePort());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case UPDATE_HOST:
      return Long.valueOf(getUpdateHost());

    case UPDATE_PORT:
      return Integer.valueOf(getUpdatePort());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USER_ID:
      return isSetUserId();
    case BP_ID:
      return isSetBpId();
    case TYPE:
      return isSetType();
    case STATUS:
      return isSetStatus();
    case CREATE_TIME:
      return isSetCreateTime();
    case CREATE_HOST:
      return isSetCreateHost();
    case CREATE_PORT:
      return isSetCreatePort();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case UPDATE_HOST:
      return isSetUpdateHost();
    case UPDATE_PORT:
      return isSetUpdatePort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TEliteFollow)
      return this.equals((TEliteFollow)that);
    return false;
  }

  public boolean equals(TEliteFollow that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_bpId = true;
    boolean that_present_bpId = true;
    if (this_present_bpId || that_present_bpId) {
      if (!(this_present_bpId && that_present_bpId))
        return false;
      if (this.bpId != that.bpId)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_createHost = true;
    boolean that_present_createHost = true;
    if (this_present_createHost || that_present_createHost) {
      if (!(this_present_createHost && that_present_createHost))
        return false;
      if (this.createHost != that.createHost)
        return false;
    }

    boolean this_present_createPort = true;
    boolean that_present_createPort = true;
    if (this_present_createPort || that_present_createPort) {
      if (!(this_present_createPort && that_present_createPort))
        return false;
      if (this.createPort != that.createPort)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_updateHost = true;
    boolean that_present_updateHost = true;
    if (this_present_updateHost || that_present_updateHost) {
      if (!(this_present_updateHost && that_present_updateHost))
        return false;
      if (this.updateHost != that.updateHost)
        return false;
    }

    boolean this_present_updatePort = true;
    boolean that_present_updatePort = true;
    if (this_present_updatePort || that_present_updatePort) {
      if (!(this_present_updatePort && that_present_updatePort))
        return false;
      if (this.updatePort != that.updatePort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TEliteFollow other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TEliteFollow typedOther = (TEliteFollow)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBpId()).compareTo(typedOther.isSetBpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bpId, typedOther.bpId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateHost()).compareTo(typedOther.isSetCreateHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createHost, typedOther.createHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatePort()).compareTo(typedOther.isSetCreatePort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatePort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createPort, typedOther.createPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateHost()).compareTo(typedOther.isSetUpdateHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateHost, typedOther.updateHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatePort()).compareTo(typedOther.isSetUpdatePort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatePort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatePort, typedOther.updatePort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TEliteFollow(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bpId:");
    sb.append(this.bpId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createHost:");
    sb.append(this.createHost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createPort:");
    sb.append(this.createPort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateHost:");
    sb.append(this.updateHost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatePort:");
    sb.append(this.updatePort);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEliteFollowStandardSchemeFactory implements SchemeFactory {
    public TEliteFollowStandardScheme getScheme() {
      return new TEliteFollowStandardScheme();
    }
  }

  private static class TEliteFollowStandardScheme extends StandardScheme<TEliteFollow> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEliteFollow struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bpId = iprot.readI64();
              struct.setBpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = TEliteFollowType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createHost = iprot.readI64();
              struct.setCreateHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createPort = iprot.readI32();
              struct.setCreatePortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATE_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateHost = iprot.readI64();
              struct.setUpdateHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATE_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updatePort = iprot.readI32();
              struct.setUpdatePortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEliteFollow struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BP_ID_FIELD_DESC);
      oprot.writeI64(struct.bpId);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_HOST_FIELD_DESC);
      oprot.writeI64(struct.createHost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_PORT_FIELD_DESC);
      oprot.writeI32(struct.createPort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_HOST_FIELD_DESC);
      oprot.writeI64(struct.updateHost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_PORT_FIELD_DESC);
      oprot.writeI32(struct.updatePort);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEliteFollowTupleSchemeFactory implements SchemeFactory {
    public TEliteFollowTupleScheme getScheme() {
      return new TEliteFollowTupleScheme();
    }
  }

  private static class TEliteFollowTupleScheme extends TupleScheme<TEliteFollow> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEliteFollow struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetBpId()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(5);
      }
      if (struct.isSetCreateHost()) {
        optionals.set(6);
      }
      if (struct.isSetCreatePort()) {
        optionals.set(7);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(8);
      }
      if (struct.isSetUpdateHost()) {
        optionals.set(9);
      }
      if (struct.isSetUpdatePort()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetBpId()) {
        oprot.writeI64(struct.bpId);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetCreateHost()) {
        oprot.writeI64(struct.createHost);
      }
      if (struct.isSetCreatePort()) {
        oprot.writeI32(struct.createPort);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetUpdateHost()) {
        oprot.writeI64(struct.updateHost);
      }
      if (struct.isSetUpdatePort()) {
        oprot.writeI32(struct.updatePort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEliteFollow struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bpId = iprot.readI64();
        struct.setBpIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = TEliteFollowType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createHost = iprot.readI64();
        struct.setCreateHostIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createPort = iprot.readI32();
        struct.setCreatePortIsSet(true);
      }
      if (incoming.get(8)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.updateHost = iprot.readI64();
        struct.setUpdateHostIsSet(true);
      }
      if (incoming.get(10)) {
        struct.updatePort = iprot.readI32();
        struct.setUpdatePortIsSet(true);
      }
    }
  }

}

